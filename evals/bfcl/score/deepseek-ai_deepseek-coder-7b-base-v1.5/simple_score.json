{"accuracy": 0.725, "correct_count": 290, "total_count": 400}
{"id": 14, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'interval'. Expected outer type array with inner type <class 'float'>. Parameter value: [1, 3]."], "error_type": "type_error:nested", "prompt": {"question": "Calculate the area under the curve y=x^2 from x=1 to x=3.", "function": {"name": "calculate_area_under_curve", "description": "Calculate the area under a mathematical function within a given interval.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The mathematical function as a string."}, "interval": {"type": "array", "items": {"type": "float"}, "description": "An array that defines the interval to calculate the area under the curve from the start to the end point."}, "method": {"type": "string", "description": "The numerical method to approximate the area under the curve. The default value is 'trapezoidal'."}}, "required": ["function", "interval"]}}}, "model_result_raw": "[calculate_area_under_curve(function='x**2', interval=[1, 3], method='trapezoidal')]", "model_result_decoded": [{"calculate_area_under_curve": {"function": "x**2", "interval": [1, 3], "method": "trapezoidal"}}], "possible_answer": {"calculate_area_under_curve": {"function": ["x^2", "x**2"], "interval": [[1.0, 3.0]], "method": ["", "trapezoidal"]}}}
{"id": 31, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'initial_velocity'. Expected type float, got int. Parameter value: 0."], "error_type": "type_error:simple", "prompt": {"question": "What is the final velocity of a vehicle that started from rest and accelerated at 4 m/s^2 for a distance of 300 meters?", "function": {"name": "kinematics.final_velocity_from_distance", "description": "Calculate the final velocity of an object given the acceleration and distance travelled, assuming initial velocity is 0.", "parameters": {"type": "dict", "properties": {"acceleration": {"type": "integer", "description": "Acceleration of the object, m/s^2."}, "distance": {"type": "integer", "description": "Distance traveled by the object, m."}, "initial_velocity": {"type": "float", "description": "Initial velocity of the object. Default is 0, m/s"}}, "required": ["acceleration", "distance"]}}}, "model_result_raw": "[kinematics.final_velocity_from_distance(acceleration=4, distance=300, initial_velocity=0)]", "model_result_decoded": [{"kinematics.final_velocity_from_distance": {"acceleration": 4, "distance": 300, "initial_velocity": 0}}], "possible_answer": {"kinematics.final_velocity_from_distance": {"acceleration": [4], "distance": [300], "initial_velocity": ["", 0.0]}}}
{"id": 37, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'unit': 'imperial'. Expected one of ['km', '']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the shortest driving distance between New York City and Washington D.C.", "function": {"name": "get_shortest_driving_distance", "description": "Calculate the shortest driving distance between two locations.", "parameters": {"type": "dict", "properties": {"origin": {"type": "string", "description": "Starting point of the journey. You should format it as city name like Boston."}, "destination": {"type": "string", "description": "End point of the journey. You should format it as city name like Boston."}, "unit": {"type": "string", "description": "Preferred unit of distance (optional, default is 'km')."}}, "required": ["origin", "destination"]}}}, "model_result_raw": "[get_shortest_driving_distance(origin='New York City', destination='Washington D.C.', unit='imperial')]", "model_result_decoded": [{"get_shortest_driving_distance": {"origin": "New York City", "destination": "Washington D.C.", "unit": "imperial"}}], "possible_answer": {"get_shortest_driving_distance": {"origin": ["New York City"], "destination": ["Washington D.C."], "unit": ["km", ""]}}}
{"id": 39, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'constant': 8.99e-09. Expected one of ['', 8990000000.0]."], "error_type": "value_error:others", "prompt": {"question": "What is the electrostatic potential between two charged bodies of 1e-9 and 2e-9 of distance 0.05?", "function": {"name": "calculate_electrostatic_potential", "description": "Calculate the electrostatic potential between two charged bodies using the principle of Coulomb's Law.", "parameters": {"type": "dict", "properties": {"charge1": {"type": "float", "description": "The quantity of charge on the first body."}, "charge2": {"type": "float", "description": "The quantity of charge on the second body."}, "distance": {"type": "float", "description": "The distance between the two bodies."}, "constant": {"type": "float", "description": "The value of the electrostatic constant. Default is 8.99e9."}}, "required": ["charge1", "charge2", "distance"]}}}, "model_result_raw": "[calculate_electrostatic_potential(charge1=1e-09, charge2=2e-09, distance=0.05, constant=8.99e-09)]", "model_result_decoded": [{"calculate_electrostatic_potential": {"charge1": 1e-09, "charge2": 2e-09, "distance": 0.05, "constant": 8.99e-09}}], "possible_answer": {"calculate_electrostatic_potential": {"charge1": [1e-09], "charge2": [2e-09], "distance": [0.05], "constant": ["", 8990000000.0]}}}
{"id": 43, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'capacitance': 0.1. Expected one of [0.0001]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the resonant frequency of an LC circuit given capacitance of 100\u00b5F and inductance of 50mH.", "function": {"name": "calculate_resonant_frequency", "description": "Calculate the resonant frequency of an LC (inductor-capacitor) circuit.", "parameters": {"type": "dict", "properties": {"inductance": {"type": "float", "description": "The inductance (L) in henries (H)."}, "capacitance": {"type": "float", "description": "The capacitance (C) in farads (F)."}, "round_off": {"type": "integer", "description": "Rounding off the result to a certain decimal places, default is 2."}}, "required": ["inductance", "capacitance"]}}}, "model_result_raw": "[calculate_resonant_frequency(inductance=0.05, capacitance=0.1, round_off=2)]", "model_result_decoded": [{"calculate_resonant_frequency": {"inductance": 0.05, "capacitance": 0.1, "round_off": 2}}], "possible_answer": {"calculate_resonant_frequency": {"inductance": [0.05], "capacitance": [0.0001], "round_off": ["", 2]}}}
{"id": 56, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'cell_type': 'human cell'. Expected one of ['human']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find me detailed information about the structure of human cell", "function": {"name": "biology.get_cell_info", "description": "Retrieve information about the structure and functioning of a specified type of cell", "parameters": {"type": "dict", "properties": {"cell_type": {"type": "string", "description": "Type of cell you want information about"}, "detailed": {"type": "boolean", "description": "Indicate if you want a detailed description of the cell", "default": "false"}}, "required": ["cell_type"]}}}, "model_result_raw": "[biology.get_cell_info(cell_type='human cell', detailed=True)]", "model_result_decoded": [{"biology.get_cell_info": {"cell_type": "human cell", "detailed": true}}], "possible_answer": {"biology.get_cell_info": {"cell_type": ["human"], "detailed": [true]}}}
{"id": 58, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'calibration_factor': 1e-09. Expected one of [1000000000.0, '']."], "error_type": "value_error:others", "prompt": {"question": "Calculate the cell density in a sample with an optical density of 0.6, where the experiment dilution is 5 times.", "function": {"name": "calculate_cell_density", "description": "Calculate the cell density of a biological sample based on its optical density and the experiment dilution.", "parameters": {"type": "dict", "properties": {"optical_density": {"type": "float", "description": "The optical density of the sample, usually obtained from a spectrophotometer reading."}, "dilution": {"type": "integer", "description": "The dilution factor applied during the experiment."}, "calibration_factor": {"type": "float", "description": "The calibration factor to adjust the density, default value is 1e9 assuming cell density is in CFU/mL."}}, "required": ["optical_density", "dilution"]}}}, "model_result_raw": "[calculate_cell_density(optical_density=0.6, dilution=5, calibration_factor=1e-09)]", "model_result_decoded": [{"calculate_cell_density": {"optical_density": 0.6, "dilution": 5, "calibration_factor": 1e-09}}], "possible_answer": {"calculate_cell_density": {"optical_density": [0.6], "dilution": [5], "calibration_factor": [1000000000.0, ""]}}}
{"id": 59, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'specific_function': False. Expected one of [True]."], "error_type": "value_error:others", "prompt": {"question": "What is the function of ATP synthase in mitochondria?", "function": {"name": "cell_biology.function_lookup", "description": "Look up the function of a given molecule in a specified organelle.", "parameters": {"type": "dict", "properties": {"molecule": {"type": "string", "description": "The molecule of interest."}, "organelle": {"type": "string", "description": "The organelle of interest."}, "specific_function": {"type": "boolean", "description": "If set to true, a specific function of the molecule within the organelle will be provided, if such information exists."}}, "required": ["molecule", "organelle", "specific_function"]}}}, "model_result_raw": "[cell_biology.function_lookup(molecule='ATP synthase', organelle='mitochondria', specific_function=False)]", "model_result_decoded": [{"cell_biology.function_lookup": {"molecule": "ATP synthase", "organelle": "mitochondria", "specific_function": false}}], "possible_answer": {"cell_biology.function_lookup": {"molecule": ["ATP synthase"], "organelle": ["mitochondria"], "specific_function": [true]}}}
{"id": 62, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'height': 68. Expected one of [70]."], "error_type": "value_error:others", "prompt": {"question": "Predict whether a person with weight 150lbs and height 5ft 10in who is lightly active will get type 2 diabetes.", "function": {"name": "diabetes_prediction", "description": "Predict the likelihood of diabetes type 2 based on a person's weight and height.", "parameters": {"type": "dict", "properties": {"weight": {"type": "integer", "description": "Weight of the person in lbs."}, "height": {"type": "integer", "description": "Height of the person in inches."}, "activity_level": {"type": "string", "enum": ["sedentary", "lightly active", "moderately active", "very active", "extra active"], "description": "Physical activity level of the person."}}, "required": ["weight", "height", "activity_level"]}}}, "model_result_raw": "[diabetes_prediction(weight=150, height=68, activity_level='lightly active')]", "model_result_decoded": [{"diabetes_prediction": {"weight": 150, "height": 68, "activity_level": "lightly active"}}], "possible_answer": {"diabetes_prediction": {"weight": [150], "height": [70], "activity_level": ["lightly active"]}}}
{"id": 76, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'growth_rate': 0.014. Expected one of [0.015]."], "error_type": "value_error:others", "prompt": {"question": "Estimate the population size of elephants of 35000 in the next 5 years given the current growth rate of 0.015.", "function": {"name": "elephant_population_estimate", "description": "Estimate future population of elephants given current population and growth rate.", "parameters": {"type": "dict", "properties": {"current_population": {"type": "integer", "description": "The current number of elephants."}, "growth_rate": {"type": "float", "description": "The annual population growth rate of elephants."}, "years": {"type": "integer", "description": "The number of years to project the population."}}, "required": ["current_population", "growth_rate", "years"]}}}, "model_result_raw": "[elephant_population_estimate(current_population=35000, growth_rate=0.014, years=10)]", "model_result_decoded": [{"elephant_population_estimate": {"current_population": 35000, "growth_rate": 0.014, "years": 10}}], "possible_answer": {"elephant_population_estimate": {"current_population": [35000], "growth_rate": [0.015], "years": [5]}}}
{"id": 77, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'years': 10. Expected one of [50]."], "error_type": "value_error:others", "prompt": {"question": "Get me the predictions of the evolutionary rate for Homo Sapiens for next 50 years using Darwin model", "function": {"name": "prediction.evolution", "description": "Predict the evolutionary rate for a specific species for a given timeframe.", "parameters": {"type": "dict", "properties": {"species": {"type": "string", "description": "The species that the evolution rate will be predicted for."}, "years": {"type": "integer", "description": "Number of years for the prediction."}, "model": {"type": "string", "description": "The model used to make the prediction, options: 'Darwin', 'Lamarck', default is 'Darwin'."}}, "required": ["species", "years"]}}}, "model_result_raw": "[prediction.evolution(species='Homo Sapiens', years=10, model='Darwin')]", "model_result_decoded": [{"prediction.evolution": {"species": "Homo Sapiens", "years": 10, "model": "Darwin"}}], "possible_answer": {"prediction.evolution": {"species": ["Homo Sapiens", "homo sapiens", "Homo sapiens"], "years": [50], "model": ["Darwin"]}}}
{"id": 78, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'Los Angeles'. Expected one of ['Los Angeles, CA']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find a nearby restaurant that serves vegan food in Los Angeles.", "function": {"name": "restaurant.find_nearby", "description": "Locate nearby restaurants based on specific dietary preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Los Angeles, CA"}, "dietary_preference": {"type": "array", "items": {"type": "string", "enum": ["Vegan", "Vegetarian", "Gluten-free", "Dairy-free", "Nut-free"]}, "description": "Dietary preference. Default is empty list."}}, "required": ["location"]}}}, "model_result_raw": "[restaurant.find_nearby(location='Los Angeles', dietary_preference=['Vegan'])]", "model_result_decoded": [{"restaurant.find_nearby": {"location": "Los Angeles", "dietary_preference": ["Vegan"]}}], "possible_answer": {"restaurant.find_nearby": {"location": ["Los Angeles, CA"], "dietary_preference": [["Vegan"]]}}}
{"id": 81, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'food_type': 'Thai food'. Expected one of ['Thai']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "I want to find 5 restaurants nearby my location, Manhattan, offering Thai food and a vegan menu.", "function": {"name": "find_restaurants", "description": "Locate nearby restaurants based on location and food preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The specific location or area. The location should be in the format of District, City."}, "food_type": {"type": "string", "description": "The type of food preferred."}, "number": {"type": "integer", "description": "Number of results to return."}, "dietary_requirements": {"type": "array", "items": {"type": "string"}, "description": "Special dietary requirements, e.g. vegan, gluten-free. Default is empty list."}}, "required": ["location", "food_type", "number"]}}}, "model_result_raw": "[find_restaurants(location='Manhattan', food_type='Thai food', number=5, dietary_requirements=['vegan'])]", "model_result_decoded": [{"find_restaurants": {"location": "Manhattan", "food_type": "Thai food", "number": 5, "dietary_requirements": ["vegan"]}}], "possible_answer": {"find_restaurants": {"location": ["Manhattan, New York City", "Manhattan", "Manhattan, New York"], "food_type": ["Thai"], "number": [5], "dietary_requirements": [["vegan"], ["Vegan"]]}}}
{"id": 83, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'numbers'. Expected outer type array with inner type <class 'float'>. Parameter value: [12, 15, 18, 20, 21, 26, 30]."], "error_type": "type_error:nested", "prompt": {"question": "Calculate the average of list of integers [12, 15, 18, 20, 21, 26, 30].", "function": {"name": "calculate_average", "description": "Calculates the average of a list of numbers.", "parameters": {"type": "dict", "properties": {"numbers": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to calculate the average of."}}, "required": ["numbers"]}}}, "model_result_raw": "[calculate_average(numbers=[12, 15, 18, 20, 21, 26, 30])]", "model_result_decoded": [{"calculate_average": {"numbers": [12, 15, 18, 20, 21, 26, 30]}}], "possible_answer": {"calculate_average": {"numbers": [[12.0, 15.0, 18.0, 20.0, 21.0, 26.0, 30.0]]}}}
{"id": 88, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'list'. Expected outer type array with inner type <class 'float'>. Parameter value: [5, 3, 4, 1, 2]."], "error_type": "type_error:nested", "prompt": {"question": "Sort the list [5, 3, 4, 1, 2] in ascending order.", "function": {"name": "array_sort", "description": "Sorts a given list in ascending or descending order.", "parameters": {"type": "dict", "properties": {"list": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to be sorted."}, "order": {"type": "string", "enum": ["ascending", "descending"], "description": "Order of sorting."}}, "required": ["list", "order"]}}}, "model_result_raw": "[array_sort(list=[5, 3, 4, 1, 2], order='ascending')]", "model_result_decoded": [{"array_sort": {"list": [5, 3, 4, 1, 2], "order": "ascending"}}], "possible_answer": {"array_sort": {"list": [[5.0, 3.0, 4.0, 1.0, 2.0]], "order": ["ascending"]}}}
{"id": 90, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'table_name': 'student_records'. Expected one of ['students']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Fetch all records for students studying Science in 'Bluebird High School' from the StudentDB.", "function": {"name": "db_fetch_records", "description": "Fetch records from a specified database table based on certain conditions.", "parameters": {"type": "dict", "properties": {"database_name": {"type": "string", "description": "The name of the database."}, "table_name": {"type": "string", "description": "The name of the table from which records need to be fetched."}, "conditions": {"type": "dict", "properties": {"department": {"type": "string", "description": "The name of the department of students."}, "school": {"type": "string", "description": "The name of the school students are enrolled in."}}, "description": "The conditions based on which records are to be fetched."}, "fetch_limit": {"type": "integer", "description": "Limits the number of records to be fetched. Default is 0, which means no limit."}}, "required": ["database_name", "table_name", "conditions"]}}}, "model_result_raw": "[db_fetch_records(database_name='StudentDB', table_name='student_records', conditions={'department': 'Science', 'school': 'Bluebird High School'}, fetch_limit=0)]", "model_result_decoded": [{"db_fetch_records": {"database_name": "StudentDB", "table_name": "student_records", "conditions": {"department": "Science", "school": "Bluebird High School"}, "fetch_limit": 0}}], "possible_answer": {"db_fetch_records": {"database_name": ["StudentDB"], "table_name": ["students"], "conditions": [{"department": ["Science"], "school": ["Bluebird High School", "Bluebird HS"]}], "fetch_limit": ["", 0]}}}
{"id": 92, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'cuisine': ''. Expected one of ['sushi']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get the highest rated sushi restaurant in Boston, that opens on Sundays.", "function": {"name": "get_restaurant", "description": "Retrieve highest rated restaurant given cuisine, location, and a condition.", "parameters": {"type": "dict", "properties": {"cuisine": {"type": "string", "description": "Cuisine of the restaurant."}, "location": {"type": "string", "description": "City where restaurant is located."}, "condition": {"type": "string", "description": "Condition to be met by the restaurant (e.g., operating days, amenities, etc.)"}}, "required": ["cuisine", "location", "condition"]}}}, "model_result_raw": "[get_restaurant(cuisine='', location='', condition='')]", "model_result_decoded": [{"get_restaurant": {"cuisine": "", "location": "", "condition": ""}}], "possible_answer": {"get_restaurant": {"cuisine": ["sushi"], "location": ["Boston"], "condition": ["open on Sundays", "opens on Sundays"]}}}
{"id": 94, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Optional parameter 'format' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Fetch me the list of IMAX movie releases in theaters near LA for the next week.", "function": {"name": "get_theater_movie_releases", "description": "Retrieve the list of movie releases in specific theaters for a specified period. in the format of city shorten name like SF.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location of the theaters."}, "timeframe": {"type": "integer", "description": "The number of days for which releases are required from current date."}, "format": {"type": "string", "description": "Format of movies - could be 'IMAX', '2D', '3D', '4DX' etc. Default is 'all'"}}, "required": ["location", "timeframe"]}}}, "model_result_raw": "[get_theater_movie_releases(location='LA', timeframe=7)]", "model_result_decoded": [{"get_theater_movie_releases": {"location": "LA", "timeframe": 7}}], "possible_answer": {"get_theater_movie_releases": {"location": ["LA"], "timeframe": [7], "format": ["IMAX"]}}}
{"id": 95, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'user_id': 101. Expected one of [43523]."], "error_type": "value_error:others", "prompt": {"question": "Update my customer information with user id 43523 'name':'John Doe', 'email':'johndoe@email.com' in the database.", "function": {"name": "update_user_info", "description": "Update user information in the database.", "parameters": {"type": "dict", "properties": {"user_id": {"type": "integer", "description": "The user ID of the customer."}, "update_info": {"type": "dict", "properties": {"name": {"type": "string", "description": "The customer's updated name."}, "email": {"type": "string", "description": "The customer's updated email."}}, "description": "The new information to update."}, "database": {"type": "string", "description": "The database where the user's information is stored.", "default": "CustomerInfo"}}, "required": ["user_id", "update_info"]}}}, "model_result_raw": "[update_user_info(user_id=101, update_info={'name': 'John Doe', 'email': 'johndoe@email.com'})]", "model_result_decoded": [{"update_user_info": {"user_id": 101, "update_info": {"name": "John Doe", "email": "johndoe@email.com"}}}], "possible_answer": {"update_user_info": {"user_id": [43523], "update_info": [{"name": ["John Doe"], "email": ["johndoe@email.com"]}], "database": ["CustomerInfo", ""]}}}
{"id": 97, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'value': \"'engineer'\". Expected one of ['engineer']."], "error_type": "value_error:dict_value", "prompt": {"question": "Find records in database in user table where age is greater than 25 and job is 'engineer'.", "function": {"name": "database.query", "description": "Query the database based on certain conditions.", "parameters": {"type": "dict", "properties": {"table": {"type": "string", "description": "Name of the table to query."}, "conditions": {"type": "array", "items": {"type": "dict", "properties": {"field": {"type": "string", "description": "The field to apply the condition."}, "operation": {"type": "string", "description": "The operation to be performed."}, "value": {"type": "string", "description": "The value to be compared."}}, "required": ["field", "operation", "value"]}, "description": "Conditions for the query."}}, "required": ["table", "conditions"]}}}, "model_result_raw": "[database.query(table='user', conditions=[{'field': 'age', 'operation': '>', 'value': '25'}, {'field': 'job', 'operation': '=', 'value': \"'engineer'\"}])]", "model_result_decoded": [{"database.query": {"table": "user", "conditions": [{"field": "age", "operation": ">", "value": "25"}, {"field": "job", "operation": "=", "value": "'engineer'"}]}}], "possible_answer": {"database.query": {"table": ["user"], "conditions": [[{"field": ["age"], "operation": [">"], "value": ["25"]}, {"field": ["job"], "operation": ["="], "value": ["engineer"]}]]}}}
{"id": 100, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'end_range': 22.6. Expected one of [6.283185307179586]."], "error_type": "value_error:others", "prompt": {"question": "Plot a sine wave from 0 to 2 pi with a frequency of 5 Hz.", "function": {"name": "plot_sine_wave", "description": "Plot a sine wave for a given frequency in a given range.", "parameters": {"type": "dict", "properties": {"start_range": {"type": "integer", "description": "Start of the range in radians."}, "end_range": {"type": "float", "description": "End of the range in radians."}, "frequency": {"type": "integer", "description": "Frequency of the sine wave in Hz."}, "amplitude": {"type": "integer", "description": "Amplitude of the sine wave. Default is 1."}, "phase_shift": {"type": "integer", "description": "Phase shift of the sine wave in radians. Default is 0."}}, "required": ["start_range", "end_range", "frequency"]}}}, "model_result_raw": "[plot_sine_wave(start_range=0, end_range=22.6, frequency=5, amplitude=1, phase_shift=0)]", "model_result_decoded": [{"plot_sine_wave": {"start_range": 0, "end_range": 22.6, "frequency": 5, "amplitude": 1, "phase_shift": 0}}], "possible_answer": {"plot_sine_wave": {"start_range": [0], "end_range": [6.283185307179586], "frequency": [5], "amplitude": [1, ""], "phase_shift": [0, ""]}}}
{"id": 101, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'speed_of_light': 299800000. Expected one of [299792458, '']."], "error_type": "value_error:others", "prompt": {"question": "How much time will it take for the light to reach earth from a star 4 light years away?", "function": {"name": "light_travel_time", "description": "Calculate the time taken for light to travel from a celestial body to another.", "parameters": {"type": "dict", "properties": {"distance_in_light_years": {"type": "integer", "description": "The distance between the two celestial bodies in light years."}, "speed_of_light": {"type": "integer", "description": "The speed of light in vacuum, in m/s. Default value is 299792458 m/s."}}, "required": ["distance_in_light_years"]}}}, "model_result_raw": "[light_travel_time(distance_in_light_years=4, speed_of_light=299800000)]", "model_result_decoded": [{"light_travel_time": {"distance_in_light_years": 4, "speed_of_light": 299800000}}], "possible_answer": {"light_travel_time": {"distance_in_light_years": [4], "speed_of_light": [299792458, ""]}}}
{"id": 104, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'polynomial'. Expected outer type array with inner type <class 'float'>. Parameter value: [3, 2, -4]."], "error_type": "type_error:nested", "prompt": {"question": "Calculate the area under the curve y=3x^2 + 2x - 4, between x = -1 and x = 2.", "function": {"name": "mathematics.calculate_area_under_curve", "description": "Calculate the area under the curve for a given polynomial function within a specified interval.", "parameters": {"type": "dict", "properties": {"polynomial": {"type": "array", "items": {"type": "float"}, "description": "The coefficients of the polynomial, in decreasing order of exponent, where the first element is the coefficient for x^n, the second element is the coefficient for x^(n-1), and so on. The last element is the constant term."}, "limits": {"type": "array", "items": {"type": "float"}, "description": "A list of two numbers specifying the lower and upper limit for the integration interval."}}, "required": ["polynomial", "limits"]}}}, "model_result_raw": "[mathematics.calculate_area_under_curve(polynomial=[3, 2, -4], limits=[-1, 2])]", "model_result_decoded": [{"mathematics.calculate_area_under_curve": {"polynomial": [3, 2, -4], "limits": [-1, 2]}}], "possible_answer": {"mathematics.calculate_area_under_curve": {"polynomial": [[3.0, 2.0, -4.0]], "limits": [[-1.0, 2.0]]}}}
{"id": 113, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'total_outcomes': 13. Expected one of [52]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the probability of drawing a king from a deck of cards.", "function": {"name": "calculate_probability", "description": "Calculate the probability of an event.", "parameters": {"type": "dict", "properties": {"total_outcomes": {"type": "integer", "description": "Total number of possible outcomes."}, "favorable_outcomes": {"type": "integer", "description": "Number of outcomes considered as 'successful'."}, "round_to": {"type": "integer", "description": "Number of decimal places to round the result to.", "default": 2}}, "required": ["total_outcomes", "favorable_outcomes"]}}}, "model_result_raw": "[calculate_probability(total_outcomes=13, favorable_outcomes=1, round_to=2)]", "model_result_decoded": [{"calculate_probability": {"total_outcomes": 13, "favorable_outcomes": 1, "round_to": 2}}], "possible_answer": {"calculate_probability": {"total_outcomes": [52], "favorable_outcomes": [4], "round_to": ["", 2]}}}
{"id": 118, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Optional parameter 'format_as_ratio' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "What are the odds of pulling a heart suit from a well-shuffled standard deck of 52 cards? Format it as ratio.", "function": {"name": "probability_of_event", "description": "Calculates the probability of an event.", "parameters": {"type": "dict", "properties": {"success_outcomes": {"type": "integer", "description": "The number of successful outcomes."}, "total_outcomes": {"type": "integer", "description": "The total number of possible outcomes."}, "format_as_ratio": {"type": "boolean", "description": "When true, formats the output as a ratio instead of a decimal. Default is false."}}, "required": ["success_outcomes", "total_outcomes"]}}}, "model_result_raw": "[probability_of_event(success_outcomes=13, total_outcomes=52)]", "model_result_decoded": [{"probability_of_event": {"success_outcomes": 13, "total_outcomes": 52}}], "possible_answer": {"probability_of_event": {"success_outcomes": [13], "total_outcomes": [52], "format_as_ratio": [true]}}}
{"id": 122, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'num_trials': 0. Expected one of [100]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the probability of observing 60 heads if I flip a coin 100 times with probability of heads 0.5.", "function": {"name": "calc_binomial_prob", "description": "Calculates the probability of an outcome based on the binomial distribution", "parameters": {"type": "dict", "properties": {"num_trials": {"type": "integer", "description": "Number of independent experiments."}, "num_success": {"type": "integer", "description": "Number of times the event of interest has occurred."}, "prob_success": {"type": "float", "description": "Probability of the event of interest on any single experiment."}}, "required": ["num_trials", "num_success", "prob_success"]}}}, "model_result_raw": "[calc_binomial_prob(num_trials=0, num_success=0, prob_success=0)]", "model_result_decoded": [{"calc_binomial_prob": {"num_trials": 0, "num_success": 0, "prob_success": 0}}], "possible_answer": {"calc_binomial_prob": {"num_trials": [100], "num_success": [60], "prob_success": [0.5]}}}
{"id": 123, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'table': [50, 60]. Expected one of [[[10, 20], [30, 40]]]."], "error_type": "value_error:list/tuple", "prompt": {"question": "Perform a Chi-Squared test for independence on a 2x2 contingency table [ [10, 20], [30, 40] ]", "function": {"name": "chi_squared_test", "description": "Performs a Chi-Squared test for independence on a 2x2 contingency table.", "parameters": {"type": "dict", "properties": {"table": {"type": "array", "items": {"type": "integer"}, "description": "A 2x2 contingency table presented in array form."}, "alpha": {"type": "float", "description": "Significance level for the Chi-Squared test. Default is 0.05."}}, "required": ["table"]}}}, "model_result_raw": "[chi_squared_test(table=[50, 60], alpha=0.04)]", "model_result_decoded": [{"chi_squared_test": {"table": [50, 60], "alpha": 0.04}}], "possible_answer": {"chi_squared_test": {"table": [[[10, 20], [30, 40]]], "alpha": [0.05, ""]}}}
{"id": 130, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'discount_rate': 0.02. Expected one of [0.04]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the discounted cash flow of a bond that is giving a coupon payment of $100 annually for next 5 years with discount rate 4%.", "function": {"name": "calculate_discounted_cash_flow", "description": "Calculate the discounted cash flow of a bond for a given annual coupon payment, time frame and discount rate.", "parameters": {"type": "dict", "properties": {"coupon_payment": {"type": "integer", "description": "The annual coupon payment."}, "period": {"type": "integer", "description": "The time frame in years for which coupon payment is made."}, "discount_rate": {"type": "float", "description": "The discount rate."}, "face_value": {"type": "integer", "description": "The face value of the bond, default is 1000."}}, "required": ["coupon_payment", "period", "discount_rate"]}}}, "model_result_raw": "[calculate_discounted_cash_flow(coupon_payment=100, period=5, discount_rate=0.02, face_value=10000)]", "model_result_decoded": [{"calculate_discounted_cash_flow": {"coupon_payment": 100, "period": 5, "discount_rate": 0.02, "face_value": 10000}}], "possible_answer": {"calculate_discounted_cash_flow": {"coupon_payment": [100], "period": [5], "discount_rate": [0.04], "face_value": ["", 1000]}}}
{"id": 134, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Optional parameter 'compounding_periods_per_year' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Predict the future value of a $5000 investment with an annual interest rate of 5% in 3 years with monthly compounding.", "function": {"name": "finance.predict_future_value", "description": "Calculate the future value of an investment given its present value, interest rate, the number of compounding periods per year, and the time horizon.", "parameters": {"type": "dict", "properties": {"present_value": {"type": "integer", "description": "The present value of the investment."}, "annual_interest_rate": {"type": "float", "description": "The annual interest rate of the investment."}, "compounding_periods_per_year": {"type": "integer", "description": "The number of times that interest is compounded per year. Default is 1 (annually)."}, "time_years": {"type": "integer", "description": "The investment horizon in years."}}, "required": ["present_value", "annual_interest_rate", "time_years"]}}}, "model_result_raw": "[finance.predict_future_value(present_value=5000, annual_interest_rate=0.05, time_years=3)]", "model_result_decoded": [{"finance.predict_future_value": {"present_value": 5000, "annual_interest_rate": 0.05, "time_years": 3}}], "possible_answer": {"finance.predict_future_value": {"present_value": [5000], "annual_interest_rate": [0.05], "compounding_periods_per_year": [12], "time_years": [3]}}}
{"id": 140, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'yearly_yield'. Expected type float, got int. Parameter value: 5."], "error_type": "type_error:simple", "prompt": {"question": "What is the estimated return on a mutual fund, given that it has a yearly yield of 5%, an investment amount of $2000 and a time period of 3 years?", "function": {"name": "estimate_mutual_fund_return", "description": "Calculate the estimated return on a mutual fund given the yearly yield, the investment amount and the time period.", "parameters": {"type": "dict", "properties": {"yearly_yield": {"type": "float", "description": "The yearly yield of the mutual fund as a percentage."}, "investment_amount": {"type": "integer", "description": "The initial investment amount in the mutual fund."}, "years": {"type": "integer", "description": "The time period for which the investment is made in years."}}, "required": ["yearly_yield", "investment_amount", "years"]}}}, "model_result_raw": "[estimate_mutual_fund_return(yearly_yield=5, investment_amount=2000, years=3)]", "model_result_decoded": [{"estimate_mutual_fund_return": {"yearly_yield": 5, "investment_amount": 2000, "years": 3}}], "possible_answer": {"estimate_mutual_fund_return": {"yearly_yield": [0.05], "investment_amount": [2000], "years": [3]}}}
{"id": 143, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'date': '2023-2-2'. Expected one of ['2022-03-11']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the NASDAQ stock price for the company Amazon at closing March.11, 2022.", "function": {"name": "get_stock_price", "description": "Get the closing stock price for a specific company on a specified date.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "Name of the company."}, "date": {"type": "string", "description": "Date of when to get the stock price. Format: yyyy-mm-dd."}, "exchange": {"type": "string", "description": "Name of the stock exchange market where the company's stock is listed. Default is 'NASDAQ'"}}, "required": ["company_name", "date"]}}}, "model_result_raw": "[get_stock_price(company_name='Amazon', date='2023-2-2')]", "model_result_decoded": [{"get_stock_price": {"company_name": "Amazon", "date": "2023-2-2"}}], "possible_answer": {"get_stock_price": {"company_name": ["Amazon", "AMZN"], "date": ["2022-03-11"], "exchange": ["NASDAQ", ""]}}}
{"id": 151, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'annual_interest_rate'. Expected type float, got int. Parameter value: 3."], "error_type": "type_error:simple", "prompt": {"question": "Calculate the return of investment of a bank's savings account with a deposit of $1000, annual interest rate of 3% for 1 year.", "function": {"name": "calculate_roi", "description": "Calculate the return on investment for a given deposit amount, annual interest rate, and time frame.", "parameters": {"type": "dict", "properties": {"deposit": {"type": "integer", "description": "The initial deposit amount."}, "annual_interest_rate": {"type": "float", "description": "The annual interest rate provided by the bank."}, "years": {"type": "integer", "description": "The period for which the money is invested."}}, "required": ["deposit", "annual_interest_rate", "years"]}}}, "model_result_raw": "[calculate_roi(deposit=1000, annual_interest_rate=3, years=1)]", "model_result_decoded": [{"calculate_roi": {"deposit": 1000, "annual_interest_rate": 3, "years": 1}}], "possible_answer": {"calculate_roi": {"deposit": [1000], "annual_interest_rate": [0.03], "years": [1]}}}
{"id": 152, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Optional parameter 'top_n' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Find the highest grossing banks in the U.S for year 2020.", "function": {"name": "highest_grossing_banks", "description": "Retrieve the highest grossing banks in a specified country and year.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country to get the data from."}, "year": {"type": "integer", "description": "The year to get the data from."}, "top_n": {"type": "integer", "description": "Top n banks in terms of grossing. Default is 5"}}, "required": ["country", "year"]}}}, "model_result_raw": "[highest_grossing_banks(country='us', year=2020)]", "model_result_decoded": [{"highest_grossing_banks": {"country": "us", "year": 2020}}], "possible_answer": {"highest_grossing_banks": {"country": ["U.S", "United States", "USA", "U.S."], "year": [2020], "top_n": [1]}}}
{"id": 153, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'annual_yield'. Expected type float, got int. Parameter value: 5."], "error_type": "type_error:simple", "prompt": {"question": "Calculate the balance of a mutual fund given a total investment of $50000 with a 5% annual yield after 3 years.", "function": {"name": "calculate_mutual_fund_balance", "description": "Calculate the final balance of a mutual fund investment based on the total initial investment, annual yield rate and the time period.", "parameters": {"type": "dict", "properties": {"investment_amount": {"type": "integer", "description": "The initial total amount invested in the fund."}, "annual_yield": {"type": "float", "description": "The annual yield rate of the fund."}, "years": {"type": "integer", "description": "The period of time for the fund to mature."}}, "required": ["investment_amount", "annual_yield", "years"]}}}, "model_result_raw": "[calculate_mutual_fund_balance(investment_amount=50000, annual_yield=5, years=3)]", "model_result_decoded": [{"calculate_mutual_fund_balance": {"investment_amount": 50000, "annual_yield": 5, "years": 3}}], "possible_answer": {"calculate_mutual_fund_balance": {"investment_amount": [50000], "annual_yield": [0.05], "years": [3]}}}
{"id": 154, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'rate'. Expected type float, got int. Parameter value: 3."], "error_type": "type_error:simple", "prompt": {"question": "Calculate the compounded interest on an initial deposit of $5000 at an annual interest rate of 3% for 5 years, compounded quarterly.", "function": {"name": "calculate_compounded_interest", "description": "Calculate the compounded interest for a given initial deposit, interest rate, time and number of times the interest is compounded per unit time.", "parameters": {"type": "dict", "properties": {"principal": {"type": "integer", "description": "The initial amount of money that is being invested or loaned."}, "rate": {"type": "float", "description": "The annual interest rate."}, "time": {"type": "integer", "description": "The number of time periods the money is invested or loaned for."}, "n": {"type": "integer", "description": "The number of times that interest is compounded per unit time."}}, "required": ["principal", "rate", "time", "n"]}}}, "model_result_raw": "[calculate_compounded_interest(principal=5000, rate=3, time=5, n=4)]", "model_result_decoded": [{"calculate_compounded_interest": {"principal": 5000, "rate": 3, "time": 5, "n": 4}}], "possible_answer": {"calculate_compounded_interest": {"principal": [5000], "rate": [0.03], "time": [5], "n": [4]}}}
{"id": 157, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Optional parameter 'details' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Look up details of a felony crime record for case number CA123456 in San Diego County", "function": {"name": "crime_record.get_record", "description": "Retrieve detailed felony crime records using a specific case number and location.", "parameters": {"type": "dict", "properties": {"case_number": {"type": "string", "description": "The case number related to the crime."}, "county": {"type": "string", "description": "The county in which the crime occurred."}, "details": {"type": "boolean", "description": "To get a detailed report, set as true. Defaults to false."}}, "required": ["case_number", "county"]}}}, "model_result_raw": "[crime_record.get_record(case_number='CA123456', county='San Diego')]", "model_result_decoded": [{"crime_record.get_record": {"case_number": "CA123456", "county": "San Diego"}}], "possible_answer": {"crime_record.get_record": {"case_number": ["CA123456"], "county": ["San Diego"], "details": [true]}}}
{"id": 159, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'name': 'John Doe'. Expected one of ['Mr. X']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the information of criminal cases of Mr. X in New York between 2012 and 2015.", "function": {"name": "get_criminal_records", "description": "Retrieve the criminal records of a specific person in a specific area during a certain time period.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the person."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY"}, "from_year": {"type": "integer", "description": "The start year of the time frame."}, "to_year": {"type": "integer", "description": "The end year of the time frame."}}, "required": ["name", "location", "from_year", "to_year"]}}}, "model_result_raw": "[get_criminal_records(name='John Doe', location='New York', from_year=2012, to_year=2015)]", "model_result_decoded": [{"get_criminal_records": {"name": "John Doe", "location": "New York", "from_year": 2012, "to_year": 2015}}], "possible_answer": {"get_criminal_records": {"name": ["Mr. X"], "location": ["New York, NY"], "from_year": [2012], "to_year": [2015]}}}
{"id": 160, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'act_name': 'Criminal Law Amendment Act of 2013 (52 of 2013)'. Expected one of ['Criminal Law Amendment Act', 'Criminal Law Amendment']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Give me the details of Criminal Law Amendment Act of 2013.", "function": {"name": "get_act_details", "description": "Retrieve the details of a particular legal act based on its name and year of amendment if any.", "parameters": {"type": "dict", "properties": {"act_name": {"type": "string", "description": "The name of the act."}, "amendment_year": {"type": "integer", "description": "Year of amendment if any. If not provided, the latest amendment year will be considered."}}, "required": ["act_name", "amendment_year"]}}}, "model_result_raw": "[get_act_details(act_name='Criminal Law Amendment Act of 2013 (52 of 2013)', amendment_year=2013)]", "model_result_decoded": [{"get_act_details": {"act_name": "Criminal Law Amendment Act of 2013 (52 of 2013)", "amendment_year": 2013}}], "possible_answer": {"get_act_details": {"act_name": ["Criminal Law Amendment Act", "Criminal Law Amendment"], "amendment_year": [2013]}}}
{"id": 167, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'fee': 200. Expected one of [400]."], "error_type": "value_error:others", "prompt": {"question": "Find a lawyer specializing in divorce cases and charge fee less than 400 dollars per hour in Chicago.", "function": {"name": "lawyer.find_nearby", "description": "Locate nearby lawyers based on specific criteria like specialty, fee per hour and city.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city and state, e.g. Chicago, IL."}, "specialty": {"type": "array", "items": {"type": "string", "enum": ["Civil", "Divorce", "Immigration", "Business", "Criminal"]}, "description": "Specialization of the lawyer."}, "fee": {"type": "integer", "description": "Hourly fee charged by lawyer"}}, "required": ["city", "specialty", "fee"]}}}, "model_result_raw": "[lawyer.find_nearby(city='Chicago, IL', specialty=['Divorce'], fee=200)]", "model_result_decoded": [{"lawyer.find_nearby": {"city": "Chicago, IL", "specialty": ["Divorce"], "fee": 200}}], "possible_answer": {"lawyer.find_nearby": {"city": ["Chicago, IL.", "Chicago, IL"], "specialty": [["Divorce"]], "fee": [400]}}}
{"id": 173, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'case_id': 'R v Adams'. Expected one of ['R vs Adams', 'R_vs_Adams']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "How to obtain the detailed case information of the R vs Adams legal case?", "function": {"name": "legal_case.fetch", "description": "Fetch detailed legal case information from database.", "parameters": {"type": "dict", "properties": {"case_id": {"type": "string", "description": "The ID of the legal case."}, "details": {"type": "boolean", "description": "True if need the detail info. "}}, "required": ["case_id", "details"]}}}, "model_result_raw": "[legal_case.fetch(case_id='R v Adams', details=False)]", "model_result_decoded": [{"legal_case.fetch": {"case_id": "R v Adams", "details": false}}], "possible_answer": {"legal_case.fetch": {"case_id": ["R vs Adams", "R_vs_Adams"], "details": [true]}}}
{"id": 174, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'topic': 'land'. Expected one of ['land disputes']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find state law cases related to land disputes in the past 5 years from 2015 to 2021 in New York.", "function": {"name": "law_case_search", "description": "Search and retrieve law cases based on the topic, timeline, and location.", "parameters": {"type": "dict", "properties": {"topic": {"type": "string", "description": "The subject matter of the case."}, "year_range": {"type": "array", "items": {"type": "integer"}, "description": "The start and end year for searching cases."}, "location": {"type": "string", "description": "The location where the case is being heard."}, "judicial_system": {"type": "string", "description": "The specific judicial system in which to search (e.g. 'federal', 'state').", "default": "all"}}, "required": ["topic", "year_range", "location"]}}}, "model_result_raw": "[law_case_search(topic='land', year_range=[2015, 2021], location='New York')]", "model_result_decoded": [{"law_case_search": {"topic": "land", "year_range": [2015, 2021], "location": "New York"}}], "possible_answer": {"law_case_search": {"topic": ["land disputes"], "year_range": [[2015, 2021]], "location": ["New York"], "judicial_system": ["state"]}}}
{"id": 178, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'status': 'closed'. Expected one of ['all', '']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find all Patent lawsuit cases of Facebook in 2018.", "function": {"name": "get_lawsuit_cases", "description": "Retrieve all lawsuit cases related to a specific company during a particular year.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "year": {"type": "integer", "description": "The specific year to search for lawsuit cases."}, "status": {"type": "string", "enum": ["open", "closed", "all"], "description": "The status of the lawsuit cases to retrieve. If not specified, defaults to 'all'."}}, "required": ["company_name", "year"]}}}, "model_result_raw": "[get_lawsuit_cases(company_name='Facebook', year=2018, status='closed')]", "model_result_decoded": [{"get_lawsuit_cases": {"company_name": "Facebook", "year": 2018, "status": "closed"}}], "possible_answer": {"get_lawsuit_cases": {"company_name": ["Facebook"], "year": [2018], "status": ["all", ""]}}}
{"id": 179, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'court_location': 'Los Angeles Superior Court'. Expected one of ['Los Angeles']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find details about lawsuit case numbered 'LAX2019080202' in the Los Angeles court.", "function": {"name": "get_lawsuit_details", "description": "Retrieve the detailed information about a lawsuit based on its case number and the court location.", "parameters": {"type": "dict", "properties": {"case_number": {"type": "string", "description": "The case number of the lawsuit."}, "court_location": {"type": "string", "description": "The location of the court where the case is filed."}, "additional_details": {"type": "array", "items": {"type": "string", "enum": ["attorneys", "plaintiffs", "defendants", "charges", "court_updates"]}, "description": "Optional. Array containing additional details to be fetched. Default is all."}}, "required": ["case_number", "court_location"]}}}, "model_result_raw": "[get_lawsuit_details(case_number='LAX2019080202', court_location='Los Angeles Superior Court', additional_details=['attorneys', 'plaintiffs', 'defendants', 'charges', 'court_updates'])]", "model_result_decoded": [{"get_lawsuit_details": {"case_number": "LAX2019080202", "court_location": "Los Angeles Superior Court", "additional_details": ["attorneys", "plaintiffs", "defendants", "charges", "court_updates"]}}], "possible_answer": {"get_lawsuit_details": {"case_number": ["LAX2019080202"], "court_location": ["Los Angeles"], "additional_details": ["", ["attorneys", "plaintiffs", "defendants", "charges", "court_updates"]]}}}
{"id": 180, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'company1': 'Samsung'. Expected one of ['Apple']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the latest court case between Apple and Samsung occured in USA.", "function": {"name": "find_latest_court_case", "description": "Find the latest court case between two companies.", "parameters": {"type": "dict", "properties": {"company1": {"type": "string", "description": "The name of the first company."}, "company2": {"type": "string", "description": "The name of the second company."}, "country": {"type": "string", "description": "The country in which the court case is located.", "default": "USA"}}, "required": ["company1", "company2"]}}}, "model_result_raw": "[find_latest_court_case(company1='Samsung', company2='Apple', country='USA')]", "model_result_decoded": [{"find_latest_court_case": {"company1": "Samsung", "company2": "Apple", "country": "USA"}}], "possible_answer": {"find_latest_court_case": {"company1": ["Apple"], "company2": ["Samsung"], "country": ["USA", ""]}}}
{"id": 184, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'entity': 'Apple Inc.'. Expected one of ['Apple']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Search for current lawsuits filed against Apple in Santa Clara County.", "function": {"name": "lawsuit_search", "description": "Retrieve all lawsuits involving a particular entity from specified jurisdiction.", "parameters": {"type": "dict", "properties": {"entity": {"type": "string", "description": "The entity involved in lawsuits."}, "county": {"type": "string", "description": "The jurisdiction for the lawsuit search for example Alameda county."}, "state": {"type": "string", "description": "The state for the lawsuit search. Default is California."}}, "required": ["entity", "county"]}}}, "model_result_raw": "[lawsuit_search(entity='Apple Inc.', county='Santa Clara County', state='California')]", "model_result_decoded": [{"lawsuit_search": {"entity": "Apple Inc.", "county": "Santa Clara County", "state": "California"}}], "possible_answer": {"lawsuit_search": {"entity": ["Apple"], "county": ["Santa Clara County"], "state": ["California", ""]}}}
{"id": 196, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'daily_miles': 25. Expected one of [20]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the carbon footprint of my lifestyle, assuming I drive 20 miles a day, consume 3 meat meals a week, and produce 500 lbs of trash in a year.", "function": {"name": "calculate_carbon_footprint", "description": "Calculate the estimated carbon footprint of a lifestyle based on factors such as daily driving distance, weekly meat consumption, and yearly trash production.", "parameters": {"type": "dict", "properties": {"daily_miles": {"type": "integer", "description": "The daily driving distance in miles."}, "meat_meals_per_week": {"type": "integer", "description": "The number of meat-based meals consumed per week."}, "annual_trash_weight": {"type": "integer", "description": "The yearly weight of trash production in pounds."}, "flights_per_year": {"type": "integer", "description": "The number of flights taken per year. Default is 0."}}, "required": ["daily_miles", "meat_meals_per_week", "annual_trash_weight"]}}}, "model_result_raw": "[calculate_carbon_footprint(daily_miles=25, meat_meals_per_week=3, annual_trash_weight=250)]", "model_result_decoded": [{"calculate_carbon_footprint": {"daily_miles": 25, "meat_meals_per_week": 3, "annual_trash_weight": 250}}], "possible_answer": {"calculate_carbon_footprint": {"daily_miles": [20], "meat_meals_per_week": [3], "annual_trash_weight": [500], "flights_per_year": ["", 0]}}}
{"id": 198, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'San Diego, CA'. Expected one of ['San Diego']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the air quality index in San Diego at 12pm.", "function": {"name": "get_air_quality_index", "description": "Retrieve the air quality index at a specified location and time.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location to get the air quality index for."}, "time": {"type": "string", "description": "The specific time to check the air quality. Default is the current time."}}, "required": ["location", "time"]}}}, "model_result_raw": "[get_air_quality_index(location='San Diego, CA', time='2023-06-15 12:00:00')]", "model_result_decoded": [{"get_air_quality_index": {"location": "San Diego, CA", "time": "2023-06-15 12:00:00"}}], "possible_answer": {"get_air_quality_index": {"location": ["San Diego"], "time": ["12pm", "12:00"]}}}
{"id": 200, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'San Jose, California'. Expected one of ['San Jose', \"'San Jose'\"]. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find air quality index in San Jose for next three days.", "function": {"name": "environmental_data.air_quality_index", "description": "Retrieves Air Quality Index (AQI) for specified location over a number of days.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "Name of the city or town to retrieve air quality index for."}, "days": {"type": "integer", "description": "Number of days for which to retrieve data. If not provided, default to today."}}, "required": ["location"]}}}, "model_result_raw": "[environmental_data.air_quality_index(location='San Jose, California', days=3)]", "model_result_decoded": [{"environmental_data.air_quality_index": {"location": "San Jose, California", "days": 3}}], "possible_answer": {"environmental_data.air_quality_index": {"location": ["San Jose", "'San Jose'"], "days": [3]}}}
{"id": 201, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'distance': 6400. Expected one of [12000]."], "error_type": "value_error:others", "prompt": {"question": "How much CO2 is produced annually by a gas-fueled car that travels 12,000 miles per year, with fuel efficiency of 25% ?", "function": {"name": "calculate_emissions", "description": "Calculates the annual carbon dioxide emissions produced by a vehicle based on the distance traveled, the fuel type and the fuel efficiency of the vehicle.", "parameters": {"type": "dict", "properties": {"distance": {"type": "integer", "description": "The distance travelled in miles."}, "fuel_type": {"type": "string", "description": "Type of fuel used by the vehicle."}, "fuel_efficiency": {"type": "float", "description": "The vehicle's fuel efficiency in miles per gallon."}, "efficiency_reduction": {"type": "integer", "description": "The percentage decrease in fuel efficiency per year (optional). Default is 0"}}, "required": ["distance", "fuel_type", "fuel_efficiency"]}}}, "model_result_raw": "[calculate_emissions(distance=6400, fuel_type='Gas', fuel_efficiency=0.25, efficiency_reduction=0)]", "model_result_decoded": [{"calculate_emissions": {"distance": 6400, "fuel_type": "Gas", "fuel_efficiency": 0.25, "efficiency_reduction": 0}}], "possible_answer": {"calculate_emissions": {"distance": [12000], "fuel_type": ["gas"], "fuel_efficiency": ["", 20.0], "efficiency_reduction": [0, ""]}}}
{"id": 202, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'year': 2023. Expected one of ['', 2024]."], "error_type": "value_error:others", "prompt": {"question": "Estimate the population of pandas in the wild in China.", "function": {"name": "estimate_population", "description": "Estimate the population of a particular species in a given country.", "parameters": {"type": "dict", "properties": {"species": {"type": "string", "description": "The species for which population needs to be estimated."}, "country": {"type": "string", "description": "The country where the species lives."}, "year": {"type": "integer", "description": "The year for which population estimate is sought. Default is the current year."}}, "required": ["species", "country"]}}}, "model_result_raw": "[estimate_population(species='pandas', country='China', year=2023)]", "model_result_decoded": [{"estimate_population": {"species": "pandas", "country": "China", "year": 2023}}], "possible_answer": {"estimate_population": {"species": ["panda", "pandas"], "country": ["China", "CN"], "year": ["", 2024]}}}
{"id": 203, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'energy_type': 'solar'. Expected one of ['renewable']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "How many greenhouse gas emissions would I save if I switched to renewable energy sources for 3 months in California?", "function": {"name": "calculate_emission_savings", "description": "Calculate potential greenhouse gas emissions saved by switching to renewable energy sources.", "parameters": {"type": "dict", "properties": {"energy_type": {"type": "string", "description": "Type of the renewable energy source."}, "usage_duration": {"type": "integer", "description": "Usage duration in months."}, "region": {"type": "string", "description": "The region where you use energy. Default is 'Texas'."}}, "required": ["energy_type", "usage_duration"]}}}, "model_result_raw": "[calculate_emission_savings(energy_type='solar', usage_duration=3, region='California')]", "model_result_decoded": [{"calculate_emission_savings": {"energy_type": "solar", "usage_duration": 3, "region": "California"}}], "possible_answer": {"calculate_emission_savings": {"energy_type": ["renewable"], "usage_duration": [3], "region": ["California", "CA"]}}}
{"id": 204, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'historical': '2023-10-05'. Expected one of ['', 'today']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Can you find me the latest information about air quality index and pollution data for Chicago?", "function": {"name": "get_air_quality", "description": "Retrieve real-time air quality and pollution data for a specific location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the air quality data for."}, "detail": {"type": "boolean", "description": "If true, additional data like PM2.5, PM10, ozone levels, and pollution sources will be retrieved. Default is false."}, "historical": {"type": "string", "description": "Optional date (in 'YYYY-MM-DD' format) to retrieve historical data.", "default": "today"}}, "required": ["location"]}}}, "model_result_raw": "[get_air_quality(location='Chicago', detail=True, historical='2023-10-05')]", "model_result_decoded": [{"get_air_quality": {"location": "Chicago", "detail": true, "historical": "2023-10-05"}}], "possible_answer": {"get_air_quality": {"location": ["Chicago"], "detail": [true], "historical": ["", "today"]}}}
{"id": 212, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unterminated string literal (detected at line 1) (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"question": "Send an email to John Doe at john.doe@example.com with the subject 'Meeting' and body 'Let's meet at 10 AM tomorrow'.", "function": {"name": "send_email", "description": "Send an email to the specified email address.", "parameters": {"type": "dict", "properties": {"to": {"type": "string", "description": "The email address to send to."}, "subject": {"type": "string", "description": "The subject of the email."}, "body": {"type": "string", "description": "The body content of the email."}, "cc": {"type": "string", "description": "The email address to carbon copy. Default is empty if not specified."}, "bcc": {"type": "string", "description": "The email address to blind carbon copy. Default is empty if not specified."}}, "required": ["to", "subject", "body"]}}}, "model_result_raw": "[send_email(to='john.doe@example.com', subject='Meeting', body='Let's meet at 10 AM tomorrow')]", "possible_answer": {"send_email": {"to": ["john.doe@example.com"], "subject": ["Meeting"], "body": ["Let's meet at 10 AM tomorrow", "Let's meet at 10 AM tomorrow."], "cc": [""], "bcc": [""]}}}
{"id": 213, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'detail_level': 'details'. Expected one of ['detailed']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Give me detail information about stocks of Apple Inc.", "function": {"name": "get_stock_info", "description": "Retrieves information about a specific stock based on company's name.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "detail_level": {"type": "string", "description": "Level of detail for stock information. Can be 'summary' or 'detailed'."}, "market": {"type": "string", "description": "The stock market of interest. Default is 'NASDAQ'"}}, "required": ["company_name", "detail_level"]}}}, "model_result_raw": "[get_stock_info(company_name='Apple Inc.', detail_level='details', market='NASDAQ')]", "model_result_decoded": [{"get_stock_info": {"company_name": "Apple Inc.", "detail_level": "details", "market": "NASDAQ"}}], "possible_answer": {"get_stock_info": {"company_name": ["Apple Inc."], "detail_level": ["detailed"], "market": ["", "NASDAQ"]}}}
{"id": 216, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'title': 'movie_details.brief'. Expected one of ['Interstellar']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Give me a brief on movie 'Interstellar'", "function": {"name": "movie_details.brief", "description": "This function retrieves a brief about a specified movie.", "parameters": {"type": "dict", "properties": {"title": {"type": "string", "description": "Title of the movie"}, "extra_info": {"type": "boolean", "description": "Option to get additional information like Director, Cast, Awards etc.", "default": "false"}}, "required": ["title"]}}}, "model_result_raw": "[movie_details.brief(title='movie_details.brief', extra_info=True)]", "model_result_decoded": [{"movie_details.brief": {"title": "movie_details.brief", "extra_info": true}}], "possible_answer": {"movie_details.brief": {"title": ["Interstellar"], "extra_info": ["", false]}}}
{"id": 217, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unterminated string literal (detected at line 1) (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"question": "Analyze the sentiment of a customer review 'I love the food here! It's always fresh and delicious.'.", "function": {"name": "sentiment_analysis", "description": "Perform sentiment analysis on a given piece of text.", "parameters": {"type": "dict", "properties": {"text": {"type": "string", "description": "The text on which to perform sentiment analysis."}, "language": {"type": "string", "description": "The language in which the text is written."}}, "required": ["text", "language"]}}}, "model_result_raw": "[sentiment_analysis(text='I love the food here! It's always fresh and delicious.', language='English')]", "possible_answer": {"sentiment_analysis": {"text": ["I love the food here! It's always fresh and delicious."], "language": ["english", "English", "en"]}}}
{"id": 228, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'type': 'object'. Expected one of ['ENFJ']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get me strength and weakness traits for ENFJ personality type.", "function": {"name": "get_personality_traits", "description": "Retrieve the personality traits for a specific personality type, including their strengths and weaknesses.", "parameters": {"type": "dict", "properties": {"type": {"type": "string", "description": "The personality type."}, "traits": {"type": "array", "items": {"type": "string", "enum": ["strengths", "weaknesses"]}, "description": "List of traits to be retrieved, default is ['strengths']."}}, "required": ["type"]}}}, "model_result_raw": "[get_personality_traits(type='object', traits=['strengths', 'weaknesses'])]", "model_result_decoded": [{"get_personality_traits": {"type": "object", "traits": ["strengths", "weaknesses"]}}], "possible_answer": {"get_personality_traits": {"type": ["ENFJ"], "traits": [["strengths", "weaknesses"]]}}}
{"id": 230, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'characteristics': ['efficiency', 'organization', 'easy going', 'compassion']. Expected one of [['efficient', 'organized', 'easy going', 'compassionate']]."], "error_type": "value_error:list/tuple", "prompt": {"question": "What's my Big Five Personality trait scores given that I am efficient, organized, easy going and compassionate?", "function": {"name": "get_bigfive_scores", "description": "Retrieve Big Five Personality trait scores based on individual's behavioural characteristics.", "parameters": {"type": "dict", "properties": {"characteristics": {"type": "array", "items": {"type": "string"}, "description": "List of user's behavioural characteristics."}, "scale": {"type": "string", "enum": ["high", "medium", "low"], "description": "The scoring scale of traits (default is medium)."}}, "required": ["characteristics"]}}}, "model_result_raw": "[get_bigfive_scores(characteristics=['efficiency', 'organization', 'easy going', 'compassion'], scale='medium')]", "model_result_decoded": [{"get_bigfive_scores": {"characteristics": ["efficiency", "organization", "easy going", "compassion"], "scale": "medium"}}], "possible_answer": {"get_bigfive_scores": {"characteristics": [["efficient", "organized", "easy going", "compassionate"]], "scale": ["medium", ""]}}}
{"id": 235, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'century': 20. Expected one of [19]."], "error_type": "value_error:others", "prompt": {"question": "Find important Wars in European history during the 19th century.", "function": {"name": "history_eu.fetch_events", "description": "Fetches significant historical events within a specific time period in European history.", "parameters": {"type": "dict", "properties": {"century": {"type": "integer", "description": "The century you are interested in."}, "region": {"type": "string", "description": "The region of Europe you are interested in.", "enum": ["Northern", "Southern", "Eastern", "Western"]}, "category": {"type": "string", "description": "Category of the historical events. Default is 'Culture'.", "enum": ["Wars", "Culture", "Politics", "Scientific", "Others"]}}, "required": ["century", "region"]}}}, "model_result_raw": "[history_eu.fetch_events(century=20, region='Northern')]", "model_result_decoded": [{"history_eu.fetch_events": {"century": 20, "region": "Northern"}}], "possible_answer": {"history_eu.fetch_events": {"century": [19], "region": ["Northern", "Southern", "Eastern", "Western"], "category": ["Wars"]}}}
{"id": 236, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'EU Council Building, 1 Rue Gailliard, 1049 Brussels, Belgium'. Expected one of ['']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "When was the signing of the Treaty of Lisbon?", "function": {"name": "get_event_date", "description": "Retrieve the date of a historical event.", "parameters": {"type": "dict", "properties": {"event": {"type": "string", "description": "The name of the historical event."}, "location": {"type": "string", "description": "Location where the event took place. Default to global if not specified."}}, "required": ["event"]}}}, "model_result_raw": "[get_event_date(event='Signing of the Treaty of Lisbon', location='EU Council Building, 1 Rue Gailliard, 1049 Brussels, Belgium')]", "model_result_decoded": [{"get_event_date": {"event": "Signing of the Treaty of Lisbon", "location": "EU Council Building, 1 Rue Gailliard, 1049 Brussels, Belgium"}}], "possible_answer": {"get_event_date": {"event": ["Treaty of Lisbon", "Signing of the Treaty of Lisbon"], "location": [""]}}}
{"id": 239, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'year': 1865. Expected one of [1861]."], "error_type": "value_error:others", "prompt": {"question": "Who was the president of the United States during the American Civil War?", "function": {"name": "us_history.get_president", "description": "Retrieve the U.S. president during a specific event in American history.", "parameters": {"type": "dict", "properties": {"event": {"type": "string", "description": "The event in U.S. history."}, "year": {"type": "integer", "description": "The specific year of the event."}}, "required": ["event", "year"]}}}, "model_result_raw": "[us_history.get_president(event='American Civil War', year=1865)]", "model_result_decoded": [{"us_history.get_president": {"event": "American Civil War", "year": 1865}}], "possible_answer": {"us_history.get_president": {"event": ["American Civil War"], "year": [1861]}}}
{"id": 248, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'date': 'March 17, 1915'. Expected one of ['1915-03-17', '03/17/1915', 'Mar.17,1915']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What was Albert Einstein's contribution to science on March 17, 1915?", "function": {"name": "historical_contrib.get_contrib", "description": "Retrieve historical contribution made by a scientist on a specific date.", "parameters": {"type": "dict", "properties": {"scientist": {"type": "string", "description": "The scientist whose contributions need to be searched."}, "date": {"type": "string", "description": "The date when the contribution was made in yyyy-mm-dd format."}, "category": {"type": "string", "description": "The field of the contribution, such as 'Physics' or 'Chemistry'. Default is 'all'."}}, "required": ["scientist", "date"]}}}, "model_result_raw": "[historical_contrib.get_contrib(scientist='Albert Einstein', date='March 17, 1915', category='Physics')]", "model_result_decoded": [{"historical_contrib.get_contrib": {"scientist": "Albert Einstein", "date": "March 17, 1915", "category": "Physics"}}], "possible_answer": {"historical_contrib.get_contrib": {"scientist": ["Albert Einstein"], "date": ["1915-03-17", "03/17/1915", "Mar.17,1915"], "category": ["", "all"]}}}
{"id": 250, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Optional parameter 'include_people' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Tell me more about Christianity and its history till the 14th century", "function": {"name": "religion.history_info", "description": "Provides comprehensive historical details about a specified religion till a specified century.", "parameters": {"type": "dict", "properties": {"religion": {"type": "string", "description": "The name of the religion for which historical details are needed."}, "till_century": {"type": "integer", "description": "The century till which historical details are needed."}, "include_people": {"type": "boolean", "description": "To include influential people related to the religion during that time period, default is False"}}, "required": ["religion", "till_century"]}}}, "model_result_raw": "[religion.history_info(religion='Christianity', till_century=14)]", "model_result_decoded": [{"religion.history_info": {"religion": "Christianity", "till_century": 14}}], "possible_answer": {"religion.history_info": {"religion": ["Christianity"], "till_century": [14], "include_people": [true]}}}
{"id": 256, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'include_contributions': False. Expected one of [True]."], "error_type": "value_error:others", "prompt": {"question": "Get the biography and main contributions of Pope Innocent III.", "function": {"name": "religious_history.get_papal_biography", "description": "Retrieve the biography and main religious and historical contributions of a Pope based on his papal name.", "parameters": {"type": "dict", "properties": {"papal_name": {"type": "string", "description": "The papal name of the Pope."}, "include_contributions": {"type": "boolean", "default": false, "description": "Include main contributions of the Pope in the response if true."}}, "required": ["papal_name", "include_contributions"]}}}, "model_result_raw": "[religious_history.get_papal_biography(papal_name='Innocent III', include_contributions=False)]", "model_result_decoded": [{"religious_history.get_papal_biography": {"papal_name": "Innocent III", "include_contributions": false}}], "possible_answer": {"religious_history.get_papal_biography": {"papal_name": ["Innocent III", "Pope Innocent III"], "include_contributions": [true]}}}
{"id": 260, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'height': 10. Expected one of [12]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the total quantity of paint needed to cover a wall of 30 feet by 12 feet using a specific brand that covers 400 square feet per gallon.", "function": {"name": "calculate_paint_needed", "description": "Calculate the amount of paint needed to cover a surface area based on the coverage rate of a specific paint brand.", "parameters": {"type": "dict", "properties": {"coverage_rate": {"type": "integer", "description": "The area in square feet that one gallon of paint can cover."}, "length": {"type": "integer", "description": "Length of the wall to be painted in feet."}, "height": {"type": "integer", "description": "Height of the wall to be painted in feet."}}, "required": ["coverage_rate", "length", "height"]}}}, "model_result_raw": "[calculate_paint_needed(coverage_rate=400, length=30, height=10)]", "model_result_decoded": [{"calculate_paint_needed": {"coverage_rate": 400, "length": 30, "height": 10}}], "possible_answer": {"calculate_paint_needed": {"coverage_rate": [400], "length": [30], "height": [12]}}}
{"id": 268, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'New York'. Expected one of ['New York City, NY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the top rated modern sculpture exhibition happening in New York in the upcoming month.", "function": {"name": "find_exhibition", "description": "Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where the exhibition is held, e.g., New York City, NY."}, "art_form": {"type": "string", "description": "The form of art the exhibition is displaying e.g., sculpture."}, "month": {"type": "string", "description": "The month of exhibition. Default value will return upcoming events if not specified."}, "user_ratings": {"type": "string", "enum": ["low", "average", "high"], "description": "Select exhibitions with user rating threshold. Default is 'low'"}}, "required": ["location", "art_form"]}}}, "model_result_raw": "[find_exhibition(location='New York', art_form='modern sculpture', user_ratings='average')]", "model_result_decoded": [{"find_exhibition": {"location": "New York", "art_form": "modern sculpture", "user_ratings": "average"}}], "possible_answer": {"find_exhibition": {"location": ["New York City, NY"], "art_form": ["sculpture", "modern sculpture"], "month": [""], "user_ratings": ["high"]}}}
{"id": 269, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'rome, united_arters'. Expected one of ['Rome', 'Rome, Italy']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find me the sculptures of Michelangelo with material Marble in Rome, Italy.", "function": {"name": "sculpture_locator.find_by_artist", "description": "Locate the sculptures of specific artist by material and location", "parameters": {"type": "dict", "properties": {"artist": {"type": "string", "description": "Name of the Artist of the sculpture"}, "material": {"type": "string", "description": "Material of the sculpture."}, "location": {"type": "string", "description": "The location where you want to find the sculpture. Default is 'all' if not specified."}}, "required": ["artist", "material"]}}}, "model_result_raw": "[sculpture_locator.find_by_artist(artist='Michelangelo', material='marble', location='rome, united_arters')]", "model_result_decoded": [{"sculpture_locator.find_by_artist": {"artist": "Michelangelo", "material": "marble", "location": "rome, united_arters"}}], "possible_answer": {"sculpture_locator.find_by_artist": {"artist": ["Michelangelo"], "material": ["Marble"], "location": ["Rome", "Rome, Italy"]}}}
{"id": 278, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'museum': 'British Museum'. Expected one of ['The British Museum']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the working hours and ticket price of The British Museum for this weekend.", "function": {"name": "museum_info", "description": "Get information about a museum including its opening hours and ticket prices for a specific date range.", "parameters": {"type": "dict", "properties": {"museum": {"type": "string", "description": "The name of the museum."}, "date": {"type": "string", "description": "The specific date or date range for which information is needed. It could be specific date such as '2022-12-01' or a date range like 'this weekend', 'next week'. It could also be a recurring time such as 'every Saturday'."}, "information": {"type": "array", "items": {"type": "string", "enum": ["opening_hours", "ticket_price", "address"]}, "description": "The type of information needed from the museum. This is optional and defaults to 'all' if not specified.", "default": "all"}}, "required": ["museum", "date"]}}}, "model_result_raw": "[museum_info(museum='British Museum', date='this weekend', information=['opening_hours', 'ticket_price'])]", "model_result_decoded": [{"museum_info": {"museum": "British Museum", "date": "this weekend", "information": ["opening_hours", "ticket_price"]}}], "possible_answer": {"museum_info": {"museum": ["The British Museum"], "date": ["this weekend", "2023-06-20", "06/20/2023", "Jun.20,2023"], "information": [["opening_hours", "ticket_price"], ["ticket_price", "opening_hours"]]}}}
{"id": 279, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Optional parameter 'features' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Find me the average price and ratings of piano from Yamaha.", "function": {"name": "get_instrument_details", "description": "Retrieve the average price and ratings of an instrument from a particular manufacturer.", "parameters": {"type": "dict", "properties": {"instrument": {"type": "string", "description": "The name of the instrument."}, "manufacturer": {"type": "string", "description": "The manufacturer of the instrument."}, "features": {"type": "array", "items": {"type": "string", "enum": ["price", "rating"]}, "description": "The features to retrieve about the instrument. Default is 'price'"}}, "required": ["instrument", "manufacturer"]}}}, "model_result_raw": "[get_instrument_details(instrument='piano', manufacturer='Yamaha')]", "model_result_decoded": [{"get_instrument_details": {"instrument": "piano", "manufacturer": "Yamaha"}}], "possible_answer": {"get_instrument_details": {"instrument": ["piano"], "manufacturer": ["Yamaha"], "features": [["price", "rating"]]}}}
{"id": 280, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'finish': 'Rosewood Finish'. Expected one of ['Rosewood']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What's the retail price of a Fender American Professional II Stratocaster in Rosewood Finish?", "function": {"name": "instrument_price.get", "description": "Retrieve the current retail price of a specific musical instrument.", "parameters": {"type": "dict", "properties": {"brand": {"type": "string", "description": "The brand of the instrument."}, "model": {"type": "string", "description": "The specific model of the instrument."}, "finish": {"type": "string", "description": "The color or type of finish on the instrument."}}, "required": ["brand", "model", "finish"]}}}, "model_result_raw": "[instrument_price.get(brand='Fender', model='American Professional II Stratocaster', finish='Rosewood Finish')]", "model_result_decoded": [{"instrument_price.get": {"brand": "Fender", "model": "American Professional II Stratocaster", "finish": "Rosewood Finish"}}], "possible_answer": {"instrument_price.get": {"brand": ["Fender"], "model": ["American Professional II Stratocaster"], "finish": ["Rosewood"]}}}
{"id": 281, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'make': 'Gretsch'. Expected one of ['']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find an acoustic instrument within my budget of $1000.", "function": {"name": "find_instrument", "description": "Search for a musical instrument within specified budget and of specific type.", "parameters": {"type": "dict", "properties": {"budget": {"type": "integer", "description": "Your budget for the instrument."}, "type": {"type": "string", "description": "Type of the instrument"}, "make": {"type": "string", "description": "Maker of the instrument. Default to not use if not specified."}}, "required": ["budget", "type"]}}}, "model_result_raw": "[find_instrument(budget=1000, type='acoustic', make='Gretsch')]", "model_result_decoded": [{"find_instrument": {"budget": 1000, "type": "acoustic", "make": "Gretsch"}}], "possible_answer": {"find_instrument": {"budget": [1000], "type": ["acoustic"], "make": [""]}}}
{"id": 285, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'date': '1 week after the current date'. Expected one of ['next month', '2023-06-01', '06/01/2023', 'Jun.1,2023', 'June 2023']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get information about the pop concerts in New York for next month.", "function": {"name": "concert_info.get", "description": "Retrieve information about concerts based on specific genre, location and date.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where the concert will take place."}, "date": {"type": "string", "description": "Time frame to get the concert for."}, "genre": {"type": "string", "description": "Genre of the concert.", "enum": ["Pop", "Rock", "Country", "Classical", "Electronic", "Hip-Hop"]}}, "required": ["location", "date", "genre"]}}}, "model_result_raw": "[concert_info.get(location='New York', date='1 week after the current date', genre='Pop')]", "model_result_decoded": [{"concert_info.get": {"location": "New York", "date": "1 week after the current date", "genre": "Pop"}}], "possible_answer": {"concert_info.get": {"location": ["New York City, NY", "New York"], "date": ["next month", "2023-06-01", "06/01/2023", "Jun.1,2023", "June 2023"], "genre": ["Pop"]}}}
{"id": 288, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Optional parameter 'price_range' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Find me a classical concert this weekend in Los Angeles with cheap tickets.", "function": {"name": "concert.search", "description": "Locate a concert based on specific criteria like genre, location, and date.", "parameters": {"type": "dict", "properties": {"genre": {"type": "string", "description": "Genre of the concert."}, "location": {"type": "string", "description": "City of the concert."}, "date": {"type": "string", "description": "Date of the concert, e.g. this weekend, today, tomorrow, or date string."}, "price_range": {"type": "string", "enum": ["free", "cheap", "moderate", "expensive"], "description": "Expected price range of the concert tickets. Default is 'free'."}}, "required": ["genre", "location", "date"]}}}, "model_result_raw": "[concert.search(genre='classical', location='Los Angeles', date='this weekend')]", "model_result_decoded": [{"concert.search": {"genre": "classical", "location": "Los Angeles", "date": "this weekend"}}], "possible_answer": {"concert.search": {"genre": ["classical"], "location": ["Los Angeles", "LA"], "date": ["this weekend"], "price_range": ["cheap"]}}}
{"id": 289, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'city': 'New York'. Expected one of ['New York City', 'New York City, NY', 'NYC']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get me two tickets for next Eminem concert in New York City.", "function": {"name": "concert_booking.book_ticket", "description": "Book concert tickets for a specific artist in a specified city.", "parameters": {"type": "dict", "properties": {"artist": {"type": "string", "description": "The artist you want to book tickets for."}, "city": {"type": "string", "description": "The city where the concert is."}, "num_tickets": {"type": "integer", "description": "Number of tickets required. Default is 1."}}, "required": ["artist", "city"]}}}, "model_result_raw": "[concert_booking.book_ticket(artist='Eminem', city='New York', num_tickets=2)]", "model_result_decoded": [{"concert_booking.book_ticket": {"artist": "Eminem", "city": "New York", "num_tickets": 2}}], "possible_answer": {"concert_booking.book_ticket": {"artist": ["Eminem"], "city": ["New York City", "New York City, NY", "NYC"], "num_tickets": [2]}}}
{"id": 297, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'tempo': 60. Expected one of [80]."], "error_type": "value_error:others", "prompt": {"question": "Generate a major C scale progression with tempo 80 BPM and duration 4 beats.", "function": {"name": "music_generator.generate_scale_progression", "description": "Generate a music scale progression in a specific key with a given tempo and duration.", "parameters": {"type": "dict", "properties": {"key": {"type": "string", "description": "The key in which to generate the scale progression."}, "tempo": {"type": "integer", "description": "The tempo of the scale progression in BPM."}, "duration": {"type": "integer", "description": "The duration of each note in beats."}, "scale_type": {"type": "string", "default": "major", "description": "The type of scale to generate. Defaults to 'major'."}}, "required": ["key", "tempo", "duration"]}}}, "model_result_raw": "[music_generator.generate_scale_progression(key='C', tempo=60, duration=4, scale_type='major')]", "model_result_decoded": [{"music_generator.generate_scale_progression": {"key": "C", "tempo": 60, "duration": 4, "scale_type": "major"}}], "possible_answer": {"music_generator.generate_scale_progression": {"key": ["C"], "tempo": [80], "duration": [4], "scale_type": ["major", ""]}}}
{"id": 299, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'key': 'G#'. Expected one of ['C#']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What key signature does C# major have?", "function": {"name": "music_theory.key_signature", "description": "Return the key signature of a major or minor scale.", "parameters": {"type": "dict", "properties": {"key": {"type": "string", "description": "The root of the scale, e.g., 'C', 'F#', 'Ab'."}, "scale_type": {"type": "string", "enum": ["major", "minor"], "description": "Type of the scale, either 'major' or 'minor'. Default is 'major'."}}, "required": ["key"]}}}, "model_result_raw": "[music_theory.key_signature(key='G#', scale_type='major')]", "model_result_decoded": [{"music_theory.key_signature": {"key": "G#", "scale_type": "major"}}], "possible_answer": {"music_theory.key_signature": {"key": ["C#"], "scale_type": ["major", ""]}}}
{"id": 304, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'season': '2020-2021'. Expected one of ['2019-2020']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get the player stats of Cristiano Ronaldo in the 2019-2020 season", "function": {"name": "soccer_stat.get_player_stats", "description": "Retrieve soccer player statistics for a given season.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "Name of the player."}, "season": {"type": "string", "description": "Soccer season, usually specified by two years."}, "league": {"type": "string", "description": "Optional - the soccer league, defaults to all leagues if not specified."}}, "required": ["player_name", "season"]}}}, "model_result_raw": "[soccer_stat.get_player_stats(player_name='Cristiano Ronaldo', season='2020-2021')]", "model_result_decoded": [{"soccer_stat.get_player_stats": {"player_name": "Cristiano Ronaldo", "season": "2020-2021"}}], "possible_answer": {"soccer_stat.get_player_stats": {"player_name": ["Cristiano Ronaldo"], "season": ["2019-2020"], "league": [""]}}}
{"id": 306, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'player_name': 'Luis Messi'. Expected one of ['Messi', 'Lionel Messi']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Calculate the overall goal and assist of soccer player Messi in La Liga 2020-2021 season", "function": {"name": "sports_stats.get_performance", "description": "Compute the performance score of a soccer player given his game stats for a specific tournament in a season.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "Name of the player."}, "tournament": {"type": "string", "description": "Name of the soccer tournament."}, "season": {"type": "string", "description": "Specific season in format 'YYYY-YYYY'."}, "performance_indicator": {"type": "array", "items": {"type": "string", "enum": ["Goals Scored", "Assists Made", "Saves Made", "Cards Received"]}, "description": "Array of performance indicators. Use as much as possible. Default to use all if not specified."}}, "required": ["player_name", "tournament", "season"]}}}, "model_result_raw": "[sports_stats.get_performance(player_name='Luis Messi', tournament='La Liga', season='2020-2021')]", "model_result_decoded": [{"sports_stats.get_performance": {"player_name": "Luis Messi", "tournament": "La Liga", "season": "2020-2021"}}], "possible_answer": {"sports_stats.get_performance": {"player_name": ["Messi", "Lionel Messi"], "tournament": ["La Liga"], "season": ["2020-2021"], "performance_indicator": [["Goals Scored", "Assists Made"]]}}}
{"id": 308, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'venue': 'home'. Expected one of ['', True]."], "error_type": "value_error:others", "prompt": {"question": "Who won the basketball game between Lakers and Clippers on Jan 28, 2021?", "function": {"name": "game_result.get_winner", "description": "Get the winner of a specific basketball game.", "parameters": {"type": "dict", "properties": {"teams": {"type": "array", "items": {"type": "string"}, "description": "List of two teams who played the game."}, "date": {"type": "string", "description": "The date of the game, formatted as YYYY-MM-DD."}, "venue": {"type": "string", "optional": true, "description": "Optional: The venue of the game. Default is 'home'."}}, "required": ["teams", "date"]}}}, "model_result_raw": "[game_result.get_winner(teams=['Lakers', 'Clippers'], date='2021-01-28', venue='home')]", "model_result_decoded": [{"game_result.get_winner": {"teams": ["Lakers", "Clippers"], "date": "2021-01-28", "venue": "home"}}], "possible_answer": {"game_result.get_winner": {"teams": [["Lakers", "Clippers"], ["Clippers", "Lakers"]], "date": ["2021-01-28", "01/28/2021", "Jan.28,2021"], "venue": ["", true]}}}
{"id": 309, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'league': 'Premier League'. Expected one of ['English Premier League', '']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What are the next five matches for Manchester United and who are they playing against in Premier League?", "function": {"name": "sports.match_schedule", "description": "Retrieve the match schedule for a specific sports team.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "num_matches": {"type": "integer", "description": "The number of upcoming matches you want to get."}, "league": {"type": "string", "description": "The sports league of the team. This is an optional parameter. Default is 'English Premier League'."}}, "required": ["team_name", "num_matches"]}}}, "model_result_raw": "[sports.match_schedule(team_name='Manchester United', num_matches=5, league='Premier League')]", "model_result_decoded": [{"sports.match_schedule": {"team_name": "Manchester United", "num_matches": 5, "league": "Premier League"}}], "possible_answer": {"sports.match_schedule": {"team_name": ["Manchester United", "Man United", "Man U", "MUFC"], "num_matches": [5], "league": ["English Premier League", ""]}}}
{"id": 311, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'team': 'Los Angeles Lakers'. Expected one of ['']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What are the career stats of basketball player LeBron James?", "function": {"name": "get_career_stats", "description": "Retrieve the career statistics of a basketball player based on the player's name.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The name of the basketball player."}, "team": {"type": "string", "description": "The team that the player currently plays for or has played for (Optional). Default to use all teams if not specified."}}, "required": ["player_name"]}}}, "model_result_raw": "[get_career_stats(player_name='LeBron James', team='Los Angeles Lakers')]", "model_result_decoded": [{"get_career_stats": {"player_name": "LeBron James", "team": "Los Angeles Lakers"}}], "possible_answer": {"get_career_stats": {"player_name": ["LeBron James"], "team": [""]}}}
{"id": 313, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'team_name': 'Tottenham Hotspur'. Expected one of ['']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What are the statistics of Ronaldo's matches in 2021?", "function": {"name": "player_statistic", "description": "Retrieves detailed player's statistics for a specific year.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The player's name."}, "year": {"type": "integer", "description": "Year for which the statistics will be displayed."}, "team_name": {"type": "string", "description": "The name of the team(optional). Default to not use it if not specified."}}, "required": ["player_name", "year"]}}}, "model_result_raw": "[player_statistic(player_name='Cristiano Ronaldo', year=2021, team_name='Tottenham Hotspur')]", "model_result_decoded": [{"player_statistic": {"player_name": "Cristiano Ronaldo", "year": 2021, "team_name": "Tottenham Hotspur"}}], "possible_answer": {"player_statistic": {"player_name": ["Ronaldo", "Cristiano Ronaldo"], "year": [2021], "team_name": [""]}}}
{"id": 315, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'team': 'fc barcelona'. Expected one of ['', 'all']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find all the major achievements of the footballer Lionel Messi.", "function": {"name": "sports_celebrity.get_major_achievements", "description": "Returns a list of major achievements of a particular sports celebrity.", "parameters": {"type": "dict", "properties": {"celebrity_name": {"type": "string", "description": "Name of the sports celebrity."}, "sports": {"type": "string", "description": "Type of sports the celebrity involved in. Default is Football."}, "team": {"type": "string", "description": "Optional. Team where celebrity currently plays. Default is 'all'"}}, "required": ["celebrity_name"]}}}, "model_result_raw": "[sports_celebrity.get_major_achievements(celebrity_name='Messi', sports='football', team='fc barcelona')]", "model_result_decoded": [{"sports_celebrity.get_major_achievements": {"celebrity_name": "Messi", "sports": "football", "team": "fc barcelona"}}], "possible_answer": {"sports_celebrity.get_major_achievements": {"celebrity_name": ["Lionel Messi", "Messi"], "sports": ["Football", "Soccer", ""], "team": ["", "all"]}}}
{"id": 317, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'gender': 'female'. Expected one of ['', 'all']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the current world rank of a Tennis player, Serena Williams.", "function": {"name": "get_sport_ranking", "description": "Retrieve the current world ranking of a sportsperson based on the sport and player's name.", "parameters": {"type": "dict", "properties": {"sport": {"type": "string", "description": "Name of the sport."}, "player_name": {"type": "string", "description": "Name of the player."}, "gender": {"type": "string", "description": "Gender of the player. This is optional. The possible values are male or female.", "default": "all"}}, "required": ["sport", "player_name"]}}}, "model_result_raw": "[get_sport_ranking(sport='tennis', player_name='Serena Williams', gender='female')]", "model_result_decoded": [{"get_sport_ranking": {"sport": "tennis", "player_name": "Serena Williams", "gender": "female"}}], "possible_answer": {"get_sport_ranking": {"sport": ["Tennis"], "player_name": ["Serena Williams"], "gender": ["", "all"]}}}
{"id": 323, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'season': 'Current Season'. Expected one of ['']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get the current ranking for Liverpool Football Club in the Premier League.", "function": {"name": "sports_ranking.get_current", "description": "Retrieve the current ranking of a specific team in a particular league.", "parameters": {"type": "dict", "properties": {"team": {"type": "string", "description": "The name of the team whose ranking is sought."}, "league": {"type": "string", "description": "The league in which the team participates."}, "season": {"type": "string", "description": "The season for which the ranking is sought. Defaults to the current season if not provided."}}, "required": ["team", "league"]}}}, "model_result_raw": "[sports_ranking.get_current(team='Liverpool Football Club', league='Premier League', season='Current Season')]", "model_result_decoded": [{"sports_ranking.get_current": {"team": "Liverpool Football Club", "league": "Premier League", "season": "Current Season"}}], "possible_answer": {"sports_ranking.get_current": {"team": ["Liverpool Football Club", "Liverpool", "LFC"], "league": ["Premier League", "EPL", "English Premier League"], "season": [""]}}}
{"id": 324, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'gender': 'women'. Expected one of ['woman']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Who is ranked as the top player in woman tennis?", "function": {"name": "sports_ranking.get_top_player", "description": "Get the top player in a specific sport.", "parameters": {"type": "dict", "properties": {"sport": {"type": "string", "description": "The type of sport."}, "gender": {"type": "string", "description": "The gender of the sport category. Optional.", "default": "men"}}, "required": ["sport"]}}}, "model_result_raw": "[sports_ranking.get_top_player(sport='tennis', gender='women')]", "model_result_decoded": [{"sports_ranking.get_top_player": {"sport": "tennis", "gender": "women"}}], "possible_answer": {"sports_ranking.get_top_player": {"sport": ["tennis"], "gender": ["woman"]}}}
{"id": 326, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'season': '2022-2023'. Expected one of ['']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Who won the last match between Chicago Bulls and Los Angeles Lakers?", "function": {"name": "sports.match_results", "description": "Returns the results of a given match between two teams.", "parameters": {"type": "dict", "properties": {"team1": {"type": "string", "description": "The name of the first team."}, "team2": {"type": "string", "description": "The name of the second team."}, "season": {"type": "string", "description": "The season when the match happened. Default is the current season."}}, "required": ["team1", "team2"]}}}, "model_result_raw": "[sports.match_results(team1='Chicago Bulls', team2='Los Angeles Lakers', season='2022-2023')]", "model_result_decoded": [{"sports.match_results": {"team1": "Chicago Bulls", "team2": "Los Angeles Lakers", "season": "2022-2023"}}], "possible_answer": {"sports.match_results": {"team1": ["Chicago Bulls"], "team2": ["Los Angeles Lakers"], "season": [""]}}}
{"id": 328, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'league': 'EPL'. Expected one of ['Premier League']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Give me the schedule of Manchester United for the next 6 games in Premier League.", "function": {"name": "sports_team.get_schedule", "description": "Fetches the schedule of the specified sports team for the specified number of games in the given league.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "num_of_games": {"type": "integer", "description": "Number of games for which to fetch the schedule."}, "league": {"type": "string", "description": "The name of the sports league. If not provided, the function will fetch the schedule for all games, regardless of the league."}, "location": {"type": "string", "description": "Optional. The city or venue where games are to be held. If not provided, default that all venues will be considered."}}, "required": ["team_name", "num_of_games", "league"]}}}, "model_result_raw": "[sports_team.get_schedule(team_name='Manchester United', num_of_games=6, league='EPL')]", "model_result_decoded": [{"sports_team.get_schedule": {"team_name": "Manchester United", "num_of_games": 6, "league": "EPL"}}], "possible_answer": {"sports_team.get_schedule": {"team_name": ["Manchester United", "Man United", "Man U", "MUFC"], "num_of_games": [6], "league": ["Premier League"], "location": [""]}}}
{"id": 331, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'info_required': ['average_review_rating', 'genre']. Expected one of [['average_review_rating', 'age_range']]."], "error_type": "value_error:list/tuple", "prompt": {"question": "What's the average review rating and the age range for the board game 'Catan'?", "function": {"name": "board_game_info", "description": "Get the information about a board game from a database. ", "parameters": {"type": "dict", "properties": {"game_name": {"type": "string", "description": "Name of the board game."}, "info_required": {"type": "array", "items": {"type": "string", "enum": ["average_review_rating", "age_range", "number_of_players", "playing_time", "genre"]}, "description": "Array of information requested for the game."}}, "required": ["game_name", "info_required"]}}}, "model_result_raw": "[board_game_info(game_name='Catan', info_required=['average_review_rating', 'genre'])]", "model_result_decoded": [{"board_game_info": {"game_name": "Catan", "info_required": ["average_review_rating", "genre"]}}], "possible_answer": {"board_game_info": {"game_name": ["Catan"], "info_required": [["average_review_rating", "age_range"]]}}}
{"id": 332, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'number_of_players': 3. Expected one of ['', 10]."], "error_type": "value_error:others", "prompt": {"question": "Find the top chess players in New York with a rating above 2300.", "function": {"name": "board_game.chess.get_top_players", "description": "Find top chess players in a location based on rating.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city you want to find the players from."}, "minimum_rating": {"type": "integer", "description": "Minimum rating to filter the players."}, "number_of_players": {"type": "integer", "default": 10, "description": "Number of players you want to retrieve, default value is 10"}}, "required": ["location", "minimum_rating"]}}}, "model_result_raw": "[board_game.chess.get_top_players(location='New York', minimum_rating=2300, number_of_players=3)]", "model_result_decoded": [{"board_game.chess.get_top_players": {"location": "New York", "minimum_rating": 2300, "number_of_players": 3}}], "possible_answer": {"board_game.chess.get_top_players": {"location": ["New York", "New York City", "New York City, NY", "NYC"], "minimum_rating": [2300], "number_of_players": ["", 10]}}}
{"id": 335, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'player_cards': ['Ace', '10']. Expected one of [['A', '10']]."], "error_type": "value_error:list/tuple", "prompt": {"question": "Check who is the winner in a game of blackjack given player having A and 10, dealer having 10 and 9. The Ace is considered 1.", "function": {"name": "blackjack.check_winner", "description": "Checks and determines the winner in a game of blackjack.", "parameters": {"type": "dict", "properties": {"player_cards": {"type": "array", "items": {"type": "string"}, "description": "Cards held by the player."}, "dealer_cards": {"type": "array", "items": {"type": "string"}, "description": "Cards held by the dealer."}, "ace_value": {"type": "integer", "description": "The value considered for the ace card, can be either 1 or 11.", "default": 11}}, "required": ["player_cards", "dealer_cards"]}}}, "model_result_raw": "[blackjack.check_winner(player_cards=['Ace', '10'], dealer_cards=['10', '9'], ace_value=1)]", "model_result_decoded": [{"blackjack.check_winner": {"player_cards": ["Ace", "10"], "dealer_cards": ["10", "9"], "ace_value": 1}}], "possible_answer": {"blackjack.check_winner": {"player_cards": [["A", "10"]], "dealer_cards": [["10", "9"]], "ace_value": [1]}}}
{"id": 338, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Function name 'poker_game_winner' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"question": "In a texas holdem game, Who won in the poker game with players Alex, Sam, Robert and Steve given the cards Alex':['A of spades', 'K of spades'], 'Sam': ['2 of diamonds', '3 of clubs'], 'Robert': ['Q of hearts', '10 of hearts'], 'Steve': ['4 of spades', '5 of spades']?", "function": {"name": "poker_game_winner", "description": "Identify the winner in a poker game based on the cards.", "parameters": {"type": "dict", "properties": {"players": {"type": "array", "items": {"type": "string"}, "description": "Names of the players in a list."}, "cards": {"type": "dict", "description": "An object containing the player name as key and the cards as values in a list."}, "type": {"type": "string", "description": "Type of poker game. Defaults to 'Texas Holdem'"}}, "required": ["players", "cards"]}}}, "model_result_raw": "[error.message(error=\"Error occurred\")]", "model_result_decoded": [{"error.message": {"error": "Error occurred"}}], "possible_answer": {"poker_game_winner": {"players": [["Alex", "Sam", "Robert", "Steve"]], "cards": [{"Alex": [["A of spades", "K of spades"]], "Sam": [["2 of diamonds", "3 of clubs"]], "Robert": [["Q of hearts", "10 of hearts"]], "Steve": [["4 of spades", "5 of spades"]]}], "type": ["Texas Holdem", ""]}}}
{"id": 347, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'game_name': 'Animal Crossing'. Expected one of ['Animal Crossing: New Horizons']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get all collectable items from the game 'Animal Crossing: New Horizons' during the Spring season.", "function": {"name": "get_collectables_in_season", "description": "Retrieve a list of collectable items in a specific game during a specified season.", "parameters": {"type": "dict", "properties": {"game_name": {"type": "string", "description": "Name of the game."}, "season": {"type": "string", "description": "The season for which to retrieve the collectable items."}, "item_type": {"type": "string", "description": "The type of item to search for. Default is 'all'. Possible values: 'all', 'bug', 'fish', 'sea creatures', etc."}}, "required": ["game_name", "season"]}}}, "model_result_raw": "[get_collectables_in_season(game_name='Animal Crossing', season='Spring', item_type='all')]", "model_result_decoded": [{"get_collectables_in_season": {"game_name": "Animal Crossing", "season": "Spring", "item_type": "all"}}], "possible_answer": {"get_collectables_in_season": {"game_name": ["Animal Crossing: New Horizons"], "season": ["Spring"], "item_type": ["", "all"]}}}
{"id": 356, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'optional_meal_time': 'Lunch'. Expected one of ['']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "How many calories in the Beef Lasagna Recipe from Foodnetwork.com?", "function": {"name": "recipe_info.get_calories", "description": "Retrieve the amount of calories from a specific recipe in a food website.", "parameters": {"type": "dict", "properties": {"website": {"type": "string", "description": "The food website that has the recipe."}, "recipe": {"type": "string", "description": "Name of the recipe."}, "optional_meal_time": {"type": "string", "description": "Specific meal time of the day for the recipe (optional, could be 'Breakfast', 'Lunch', 'Dinner'). Default is all if not specified."}}, "required": ["website", "recipe"]}}}, "model_result_raw": "[recipe_info.get_calories(website='foodnetwork.com', recipe='Beef Lasagna', optional_meal_time='Lunch')]", "model_result_decoded": [{"recipe_info.get_calories": {"website": "foodnetwork.com", "recipe": "Beef Lasagna", "optional_meal_time": "Lunch"}}], "possible_answer": {"recipe_info.get_calories": {"website": ["Foodnetwork.com"], "recipe": ["Beef Lasagna"], "optional_meal_time": [""]}}}
{"id": 363, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'review_rate': 4.5. Expected one of [4.0]."], "error_type": "value_error:others", "prompt": {"question": "What are the top five sushi restaurants with high reviews i.e. above 4/5 in Tokyo?", "function": {"name": "get_best_sushi_places", "description": "Returns the best sushi places given the city, review_rate and top number.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city in which to look for the sushi places."}, "top": {"type": "integer", "description": "The number of top sushi places to be returned."}, "review_rate": {"type": "float", "description": "The review rating to filter the sushi places. Places with review ratings above this value will be returned. Default 0.00."}}, "required": ["city", "top"]}}}, "model_result_raw": "[get_best_sushi_places(city='Tokyo', top=5, review_rate=4.5)]", "model_result_decoded": [{"get_best_sushi_places": {"city": "Tokyo", "top": 5, "review_rate": 4.5}}], "possible_answer": {"get_best_sushi_places": {"city": ["Tokyo"], "top": [5], "review_rate": [4.0]}}}
{"id": 364, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'amenities': ['Wi-Fi', 'Patio']. Expected one of [['Patio']]."], "error_type": "value_error:list/tuple", "prompt": {"question": "Find the closest sushi restaurant with a patio in Boston.", "function": {"name": "restaurant_search.find_closest", "description": "Locate the closest sushi restaurant based on certain criteria, such as the presence of a patio.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city, for instance Boston, MA"}, "cuisine": {"type": "string", "description": "Type of food like Sushi."}, "amenities": {"type": "array", "items": {"type": "string", "enum": ["Patio", "Wi-Fi", "Happy Hour", "Wheelchair Accessible"]}, "description": "Preferred amenities in the restaurant. Default 'Wi-Fi'."}}, "required": ["location", "cuisine"]}}}, "model_result_raw": "[restaurant_search.find_closest(location='Boston, MA', cuisine='sushi', amenities=['Wi-Fi', 'Patio'])]", "model_result_decoded": [{"restaurant_search.find_closest": {"location": "Boston, MA", "cuisine": "sushi", "amenities": ["Wi-Fi", "Patio"]}}], "possible_answer": {"find_closest": {"location": ["Boston", "Boston, MA"], "cuisine": ["Sushi", "sushi"], "amenities": [["Patio"]]}}}
{"id": 371, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'quantity': [3, 5]. Expected one of [[3, 1]]."], "error_type": "value_error:list/tuple", "prompt": {"question": "Order three bottles of olive oil and a five pound bag of rice from Safeway in Palo Alto.", "function": {"name": "safeway.order", "description": "Order specified items from a Safeway location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location of the Safeway store, e.g. Palo Alto, CA."}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items to order."}, "quantity": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item in the order list."}}, "required": ["location", "items", "quantity"]}}}, "model_result_raw": "[safeway.order(location='Palo Alto, CA', items=['Olive oil', 'Rice'], quantity=[3, 5])]", "model_result_decoded": [{"safeway.order": {"location": "Palo Alto, CA", "items": ["Olive oil", "Rice"], "quantity": [3, 5]}}], "possible_answer": {"safeway.order": {"location": ["Palo Alto", "Palo Alto, CA"], "items": [["olive oil", "rice"], ["olive oil", "bag of rice"]], "quantity": [[3, 1]]}}}
{"id": 373, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'product': 'banana'. Expected one of ['bananas']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the top five organic bananas brands on the basis of rating from Whole Foods store.", "function": {"name": "whole_foods.find_top_brands", "description": "Get top brands based on a specific product from Whole Foods", "parameters": {"type": "dict", "properties": {"product": {"type": "string", "description": "The product for which the top brands should be fetched."}, "number": {"type": "integer", "description": "Number of top brands to be fetched. Default is 5"}, "organic": {"type": "boolean", "description": "If the product should be organic. Default is false"}}, "required": ["product"]}}}, "model_result_raw": "[whole_foods.find_top_brands(product='banana', number=5, organic=True)]", "model_result_decoded": [{"whole_foods.find_top_brands": {"product": "banana", "number": 5, "organic": true}}], "possible_answer": {"whole_foods.find_top_brands": {"product": ["bananas"], "number": [5, ""], "organic": [true]}}}
{"id": 374, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'product_list': ['apple', 'rice', '12 DRY PACK 12-PCS BOTTLED WATER (6LITE)', 'DRY PACK 12-PCS BOTTLED WATER (6LITE)']. Expected one of [['apples', 'rice', 'bottled water'], ['apples', 'rice', 'water']]."], "error_type": "value_error:list/tuple", "prompt": {"question": "I want to buy apples, rice, and 12 pack of bottled water from a Walmart near San Jose. Show me the product information and stock availability.", "function": {"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "dict", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is not use it if not specified."}}, "required": ["loc", "product_list"]}}}, "model_result_raw": "[walmart.purchase(loc='San Jose', product_list=['apple', 'rice', '12 DRY PACK 12-PCS BOTTLED WATER (6LITE)', 'DRY PACK 12-PCS BOTTLED WATER (6LITE)'], pack_size=[0, 5, 12, 12])]", "model_result_decoded": [{"walmart.purchase": {"loc": "San Jose", "product_list": ["apple", "rice", "12 DRY PACK 12-PCS BOTTLED WATER (6LITE)", "DRY PACK 12-PCS BOTTLED WATER (6LITE)"], "pack_size": [0, 5, 12, 12]}}], "possible_answer": {"walmart.purchase": {"loc": ["San Jose", "San Jose, CA"], "product_list": [["apples", "rice", "bottled water"], ["apples", "rice", "water"]], "pack_size": [[1, 1, 12]]}}}
{"id": 375, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'food': 'Avocados'. Expected one of ['avocado', 'Avocado']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Check the amount of protein, calories and carbs in an avocado from Walmart.", "function": {"name": "grocery_info.nutritional_info", "description": "Retrieve nutritional information for a given food item from a particular store", "parameters": {"type": "dict", "properties": {"store": {"type": "string", "description": "The store where the item is available"}, "food": {"type": "string", "description": "Food item for which information is needed."}, "information": {"type": "array", "items": {"type": "string", "enum": ["Protein", "Calories", "Carbohydrates", "Fat", "Fiber"]}, "description": "Nutritional details required."}}, "required": ["store", "food", "information"]}}}, "model_result_raw": "[grocery_info.nutritional_info(store='Walmart', food='Avocados', information=['Calories', 'Carbohydrates', 'Protein'])]", "model_result_decoded": [{"grocery_info.nutritional_info": {"store": "Walmart", "food": "Avocados", "information": ["Calories", "Carbohydrates", "Protein"]}}], "possible_answer": {"grocery_info.nutritional_info": {"store": ["Walmart"], "food": ["avocado", "Avocado"], "information": [["Protein", "Calories", "Carbohydrates"]]}}}
{"id": 376, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Optional parameter 'store_location' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Check the total price for three pumpkins and two dozen eggs at Walmart.", "function": {"name": "walmart.check_price", "description": "Calculate total price for given items and their quantities at Walmart.", "parameters": {"type": "dict", "properties": {"items": {"type": "array", "items": {"type": "string"}, "description": "List of items to be priced."}, "quantities": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item corresponding to the items list."}, "store_location": {"type": "string", "description": "The store location for specific pricing (optional). Default to all if not specified."}}, "required": ["items", "quantities"]}}}, "model_result_raw": "[walmart.check_price(items=['pumpkins', 'eggs'], quantities=[3, 2])]", "model_result_decoded": [{"walmart.check_price": {"items": ["pumpkins", "eggs"], "quantities": [3, 2]}}], "possible_answer": {"walmart.check_price": {"items": [["pumpkins", "eggs"], ["pumpkin", "egg"]], "quantities": [[3, 24], [3, 2]], "store_location": ["Los Angeles", "LA"]}}}
{"id": 381, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'Manhattan'. Expected one of ['Manhattan, New York', 'Manhattan, NY', 'NYC', 'New York City']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Book a single room at a pet friendly hotel near Manhattan, New York for 3 nights starting from March 10th, 2023.", "function": {"name": "hotel_booking", "description": "Books a hotel room given the location, room type, stay duration and any additional preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where you want to book the hotel."}, "room_type": {"type": "string", "description": "Type of the room required. Options: 'single', 'double', 'deluxe', etc."}, "duration": {"type": "integer", "description": "The number of nights you want to book the hotel for."}, "start_date": {"type": "string", "description": "The date when your stay begins."}, "preferences": {"type": "array", "items": {"type": "string", "enum": ["pet_friendly", "gym", "swimming_pool", "free_breakfast", "parking"]}, "description": "Optional preferences of stay at the hotel. Default to use all if not specified."}}, "required": ["location", "room_type", "duration", "start_date"]}}}, "model_result_raw": "[hotel_booking(location='Manhattan', room_type='single', duration=3, start_date='March 10th, 2023', preferences=['pet_friendly'])]", "model_result_decoded": [{"hotel_booking": {"location": "Manhattan", "room_type": "single", "duration": 3, "start_date": "March 10th, 2023", "preferences": ["pet_friendly"]}}], "possible_answer": {"hotel_booking": {"location": ["Manhattan, New York", "Manhattan, NY", "NYC", "New York City"], "room_type": ["single"], "duration": [3], "start_date": ["2023-03-10", "03/10/2023", "Mar.10,2023", "March 10th, 2023", "March 10th,2023", "March10th, 2023", "March10th,2023"], "preferences": [["pet_friendly"]]}}}
{"id": 383, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'hotel_name': 'The Hilton'. Expected one of ['Hilton Hotel', 'Hilton']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Book a single room for two nights at the Hilton Hotel in Chicago, starting from 10th December 2022.", "function": {"name": "book_hotel", "description": "Book a room of specified type for a particular number of nights at a specific hotel, starting from a specified date.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city in which the hotel is located."}, "room_type": {"type": "string", "description": "The type of room to be booked."}, "start_date": {"type": "string", "description": "The start date for the booking."}, "nights": {"type": "integer", "description": "The number of nights for which the booking is to be made."}}, "required": ["hotel_name", "location", "room_type", "start_date", "nights"]}}}, "model_result_raw": "[book_hotel(hotel_name='The Hilton', location='Chicago', room_type='single', start_date='2022-12-10', nights=2)]", "model_result_decoded": [{"book_hotel": {"hotel_name": "The Hilton", "location": "Chicago", "room_type": "single", "start_date": "2022-12-10", "nights": 2}}], "possible_answer": {"book_hotel": {"hotel_name": ["Hilton Hotel", "Hilton"], "location": ["Chicago"], "room_type": ["single"], "start_date": ["2022-12-10", "10/12/2022", "Dec 10, 2022", "December 10, 2022"], "nights": [2]}}}
{"id": 384, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'hotel_name': 'Plaza Hotel'. Expected one of ['The Plaza']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "I would like to book a single room for two nights at The Plaza hotel.", "function": {"name": "book_room", "description": "Book a room in a specified hotel.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "room_type": {"type": "string", "description": "The type of room to be booked."}, "num_nights": {"type": "integer", "description": "The number of nights to book the room for."}}, "required": ["hotel_name", "room_type", "num_nights"]}}}, "model_result_raw": "[book_room(hotel_name='Plaza Hotel', room_type='Single Room', num_nights=2)]", "model_result_decoded": [{"book_room": {"hotel_name": "Plaza Hotel", "room_type": "Single Room", "num_nights": 2}}], "possible_answer": {"book_room": {"hotel_name": ["The Plaza"], "room_type": ["Single", "single"], "num_nights": [2]}}}
{"id": 387, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'room_type': 'Luxury Room'. Expected one of ['luxury', 'Luxury']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Book a luxury room in Hotel Paradise, Las Vegas, with a city view for 3 days starting from May 12, 2022.", "function": {"name": "book_hotel", "description": "Book a room in a specific hotel with particular preferences", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The location of the hotel."}, "room_type": {"type": "string", "description": "The type of room preferred."}, "start_date": {"type": "string", "description": "The starting date of the stay in format MM-DD-YYYY."}, "stay_duration": {"type": "integer", "description": "The duration of the stay in days."}, "view": {"type": "string", "description": "The preferred view from the room, can be ignored if no preference. If none provided, assumes no preference.", "default": "No preference"}}, "required": ["hotel_name", "location", "room_type", "start_date", "stay_duration"]}}}, "model_result_raw": "[book_hotel(hotel_name='Hotel Paradise', location='Las Vegas', room_type='Luxury Room', start_date='05-12-2023', stay_duration=3, view='City view')]", "model_result_decoded": [{"book_hotel": {"hotel_name": "Hotel Paradise", "location": "Las Vegas", "room_type": "Luxury Room", "start_date": "05-12-2023", "stay_duration": 3, "view": "City view"}}], "possible_answer": {"book_hotel": {"hotel_name": ["Hotel Paradise"], "location": ["Las Vegas", "LV"], "room_type": ["luxury", "Luxury"], "start_date": ["05-12-2022", "2022-05-12", "12/05/2022", "May.12,2022", "May 12, 2022"], "stay_duration": [3], "view": ["city view", "city"]}}}
{"id": 388, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'end_date': '2022-06-03'. Expected one of ['2022-06-04', '06/04/2022', 'Jun.4,2022']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Book a hotel room at the Plaza Hotel in New York for 3 nights starting from 1st June 2022", "function": {"name": "hotel_booking", "description": "Books a hotel room for a specific date range.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY."}, "start_date": {"type": "string", "description": "The start date of the reservation. Use format 'YYYY-MM-DD'."}, "end_date": {"type": "string", "description": "The end date of the reservation. Use format 'YYYY-MM-DD'."}, "rooms": {"type": "integer", "default": 1, "description": "The number of rooms to reserve."}}, "required": ["hotel_name", "location", "start_date", "end_date"]}}}, "model_result_raw": "[hotel_booking(hotel_name='Plaza Hotel', location='New York, NY', start_date='2022-06-01', end_date='2022-06-03', rooms=1)]", "model_result_decoded": [{"hotel_booking": {"hotel_name": "Plaza Hotel", "location": "New York, NY", "start_date": "2022-06-01", "end_date": "2022-06-03", "rooms": 1}}], "possible_answer": {"hotel_booking": {"hotel_name": ["Plaza Hotel"], "location": ["New York City, NY", "New York, NY"], "start_date": ["2022-06-01", "06/01/2022", "Jun.1,2022"], "end_date": ["2022-06-04", "06/04/2022", "Jun.4,2022"], "rooms": [1, ""]}}}
{"id": 390, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'base_currency': 'US Dollars'. Expected one of ['USD']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Calculate the current cost in British Pounds if I need to convert 200 US dollars.", "function": {"name": "currency_converter", "description": "Calculates the cost in target currency given the amount in base currency and exchange rate", "parameters": {"type": "dict", "properties": {"base_currency": {"type": "string", "description": "The currency to convert from."}, "target_currency": {"type": "string", "description": "The currency to convert to."}, "amount": {"type": "float", "description": "The amount in base currency"}}, "required": ["base_currency", "target_currency", "amount"]}}}, "model_result_raw": "[currency_converter(base_currency='US Dollars', target_currency='British Pounds', amount=200)]", "model_result_decoded": [{"currency_converter": {"base_currency": "US Dollars", "target_currency": "British Pounds", "amount": 200}}], "possible_answer": {"currency_converter": {"base_currency": ["USD"], "target_currency": ["GBP"], "amount": [200.0]}}}
{"id": 394, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'base_currency': 'Japanese Yen'. Expected one of ['JPY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "How much will 20000 Japanese Yen be in United States Dollar?", "function": {"name": "convert_currency", "description": "Converts an amount from a particular currency to another currency.", "parameters": {"type": "dict", "properties": {"base_currency": {"type": "string", "description": "The base currency in which the original amount is present."}, "target_currency": {"type": "string", "description": "The currency to which you want to convert."}, "amount": {"type": "integer", "description": "The amount you want to convert."}}, "required": ["base_currency", "target_currency", "amount"]}}}, "model_result_raw": "[convert_currency(base_currency='Japanese Yen', target_currency='United States Dollar', amount=20000)]", "model_result_decoded": [{"convert_currency": {"base_currency": "Japanese Yen", "target_currency": "United States Dollar", "amount": 20000}}], "possible_answer": {"convert_currency": {"base_currency": ["JPY"], "target_currency": ["USD"], "amount": [20000]}}}
{"id": 395, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'start_location': '48.858255,2.294518'. Expected one of ['Eiffel Tower']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get me the travel distance and duration from the Eiffel Tower to the Louvre Museum", "function": {"name": "maps.get_distance_duration", "description": "Retrieve the travel distance and estimated travel time from one location to another via car", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "Starting point of the journey"}, "end_location": {"type": "string", "description": "Ending point of the journey"}, "traffic": {"type": "boolean", "description": "If true, considers current traffic. Default is false."}}, "required": ["start_location", "end_location"]}}}, "model_result_raw": "[maps.get_distance_duration(start_location='48.858255,2.294518', end_location='48.860854,2.337494')]", "model_result_decoded": [{"maps.get_distance_duration": {"start_location": "48.858255,2.294518", "end_location": "48.860854,2.337494"}}], "possible_answer": {"maps.get_distance_duration": {"start_location": ["Eiffel Tower"], "end_location": ["Louvre Museum"], "traffic": ["", false]}}}
{"id": 398, "model_name": "deepseek-ai_deepseek-coder-7b-base-v1.5", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'destination': 'Boston, MA'. Expected one of ['Boston']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the distance between New York and Boston, accounting for terrain.", "function": {"name": "distance_calculator.calculate", "description": "Calculate the distance between two locations, considering terrain.", "parameters": {"type": "dict", "properties": {"origin": {"type": "string", "description": "Starting location of the distance measurement."}, "destination": {"type": "string", "description": "Destination location of the distance measurement."}, "consider_terrain": {"type": "boolean", "description": "Whether to account for terrain in distance calculation, defaults to false."}}, "required": ["origin", "destination"]}}}, "model_result_raw": "[distance_calculator.calculate(origin='New York, NY', destination='Boston, MA', consider_terrain=True)]", "model_result_decoded": [{"distance_calculator.calculate": {"origin": "New York, NY", "destination": "Boston, MA", "consider_terrain": true}}], "possible_answer": {"distance_calculator.calculate": {"origin": ["New York", "New York City", "New York City, NY", "New York, NY", "NYC"], "destination": ["Boston"], "consider_terrain": [true]}}}