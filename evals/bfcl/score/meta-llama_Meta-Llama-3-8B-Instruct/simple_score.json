{"accuracy": 0.8425, "correct_count": 337, "total_count": 400}
{"id": 14, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'function': 'y=x^2'. Expected one of ['x^2', 'x**2']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Calculate the area under the curve y=x^2 from x=1 to x=3.", "function": {"name": "calculate_area_under_curve", "description": "Calculate the area under a mathematical function within a given interval.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The mathematical function as a string."}, "interval": {"type": "array", "items": {"type": "float"}, "description": "An array that defines the interval to calculate the area under the curve from the start to the end point."}, "method": {"type": "string", "description": "The numerical method to approximate the area under the curve. The default value is 'trapezoidal'."}}, "required": ["function", "interval"]}}}, "model_result_raw": "[calculate_area_under_curve(function='y=x^2', interval=[1.0, 3.0])]", "model_result_decoded": [{"calculate_area_under_curve": {"function": "y=x^2", "interval": [1.0, 3.0]}}], "possible_answer": {"calculate_area_under_curve": {"function": ["x^2", "x**2"], "interval": [[1.0, 3.0]], "method": ["", "trapezoidal"]}}}
{"id": 15, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'x_value': 2.5. Expected one of ['', 0.0]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the derivative of the function 3x^2 + 2x - 1.", "function": {"name": "calculate_derivative", "description": "Calculate the derivative of a polynomial function.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The polynomial function."}, "x_value": {"type": "float", "description": "The x-value at which the derivative is calculated. Optional, default to 0.00."}}, "required": ["function"]}}}, "model_result_raw": "[calculate_derivative(function='3x^2 + 2x - 1', x_value=2.5)]", "model_result_decoded": [{"calculate_derivative": {"function": "3x^2 + 2x - 1", "x_value": 2.5}}], "possible_answer": {"calculate_derivative": {"function": ["3x^2 + 2x - 1", "3*x**2+2*x-1"], "x_value": ["", 0.0]}}}
{"id": 36, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'operating_hours': 11. Expected one of [23]."], "error_type": "value_error:others", "prompt": {"question": "Find an all vegan restaurant in New York that opens until at least 11 PM.", "function": {"name": "vegan_restaurant.find_nearby", "description": "Locate nearby vegan restaurants based on specific criteria like operating hours.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. New York, NY, you should format it as City, State."}, "operating_hours": {"type": "integer", "description": "Preferred latest closing time of the restaurant. E.g. if 11 is given, then restaurants that close at or after 11 PM will be considered. This is in 24 hour format. Default is 24."}}, "required": ["location"]}}}, "model_result_raw": "[vegan_restaurant.find_nearby(location='New York, NY', operating_hours=11)]", "model_result_decoded": [{"vegan_restaurant.find_nearby": {"location": "New York, NY", "operating_hours": 11}}], "possible_answer": {"vegan_restaurant.find_nearby": {"location": ["New York, NY"], "operating_hours": [23]}}}
{"id": 39, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'constant': 8.99e-09. Expected one of ['', 8990000000.0]."], "error_type": "value_error:others", "prompt": {"question": "What is the electrostatic potential between two charged bodies of 1e-9 and 2e-9 of distance 0.05?", "function": {"name": "calculate_electrostatic_potential", "description": "Calculate the electrostatic potential between two charged bodies using the principle of Coulomb's Law.", "parameters": {"type": "dict", "properties": {"charge1": {"type": "float", "description": "The quantity of charge on the first body."}, "charge2": {"type": "float", "description": "The quantity of charge on the second body."}, "distance": {"type": "float", "description": "The distance between the two bodies."}, "constant": {"type": "float", "description": "The value of the electrostatic constant. Default is 8.99e9."}}, "required": ["charge1", "charge2", "distance"]}}}, "model_result_raw": "[calculate_electrostatic_potential(charge1=1e-09, charge2=2e-09, distance=0.05, constant=8.99e-09)]", "model_result_decoded": [{"calculate_electrostatic_potential": {"charge1": 1e-09, "charge2": 2e-09, "distance": 0.05, "constant": 8.99e-09}}], "possible_answer": {"calculate_electrostatic_potential": {"charge1": [1e-09], "charge2": [2e-09], "distance": [0.05], "constant": ["", 8990000000.0]}}}
{"id": 49, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'unit': 'kg/m3'. Expected one of ['', 'kg/m\u00b3']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What is the density of a substance with a mass of 45 kg and a volume of 15 m\u00b3?", "function": {"name": "calculate_density", "description": "Calculate the density of a substance based on its mass and volume.", "parameters": {"type": "dict", "properties": {"mass": {"type": "integer", "description": "The mass of the substance in kilograms."}, "volume": {"type": "integer", "description": "The volume of the substance in cubic meters."}, "unit": {"type": "string", "description": "The unit of density. Default is kg/m\u00b3"}}, "required": ["mass", "volume"]}}}, "model_result_raw": "[calculate_density(mass=45, volume=15, unit='kg/m3')]", "model_result_decoded": [{"calculate_density": {"mass": 45, "volume": 15, "unit": "kg/m3"}}], "possible_answer": {"calculate_density": {"mass": [45], "volume": [15], "unit": ["", "kg/m\u00b3"]}}}
{"id": 83, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'numbers'. Expected outer type array with inner type <class 'float'>. Parameter value: [12, 15, 18, 20, 21, 26, 30]."], "error_type": "type_error:nested", "prompt": {"question": "Calculate the average of list of integers [12, 15, 18, 20, 21, 26, 30].", "function": {"name": "calculate_average", "description": "Calculates the average of a list of numbers.", "parameters": {"type": "dict", "properties": {"numbers": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to calculate the average of."}}, "required": ["numbers"]}}}, "model_result_raw": "[calculate_average(numbers=[12, 15, 18, 20, 21, 26, 30])]", "model_result_decoded": [{"calculate_average": {"numbers": [12, 15, 18, 20, 21, 26, 30]}}], "possible_answer": {"calculate_average": {"numbers": [[12.0, 15.0, 18.0, 20.0, 21.0, 26.0, 30.0]]}}}
{"id": 88, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'list'. Expected outer type array with inner type <class 'float'>. Parameter value: [5, 3, 4, 1, 2]."], "error_type": "type_error:nested", "prompt": {"question": "Sort the list [5, 3, 4, 1, 2] in ascending order.", "function": {"name": "array_sort", "description": "Sorts a given list in ascending or descending order.", "parameters": {"type": "dict", "properties": {"list": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to be sorted."}, "order": {"type": "string", "enum": ["ascending", "descending"], "description": "Order of sorting."}}, "required": ["list", "order"]}}}, "model_result_raw": "[array_sort(list=[5, 3, 4, 1, 2], order='ascending')]", "model_result_decoded": [{"array_sort": {"list": [5, 3, 4, 1, 2], "order": "ascending"}}], "possible_answer": {"array_sort": {"list": [[5.0, 3.0, 4.0, 1.0, 2.0]], "order": ["ascending"]}}}
{"id": 91, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Optional parameter 'data_field' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Retrieve Personal Info and Job History data of a specific employee whose ID is 345 in company 'ABC Ltd.'", "function": {"name": "employee.fetch_data", "description": "Fetches the detailed data for a specific employee in a given company.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "employee_id": {"type": "integer", "description": "The unique ID of the employee."}, "data_field": {"type": "array", "items": {"type": "string", "enum": ["Personal Info", "Job History", "Payroll", "Attendance"]}, "description": "Fields of data to be fetched for the employee (Optional). Default is ['Personal Info']"}}, "required": ["company_name", "employee_id"]}}}, "model_result_raw": "[employee.fetch_data(company_name='ABC Ltd', employee_id=345)]", "model_result_decoded": [{"employee.fetch_data": {"company_name": "ABC Ltd", "employee_id": 345}}], "possible_answer": {"employee.fetch_data": {"company_name": ["ABC Ltd."], "employee_id": [345], "data_field": [["Personal Info", "Job History"]]}}}
{"id": 92, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'condition': 'opens_sundays'. Expected one of ['open on Sundays', 'opens on Sundays']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get the highest rated sushi restaurant in Boston, that opens on Sundays.", "function": {"name": "get_restaurant", "description": "Retrieve highest rated restaurant given cuisine, location, and a condition.", "parameters": {"type": "dict", "properties": {"cuisine": {"type": "string", "description": "Cuisine of the restaurant."}, "location": {"type": "string", "description": "City where restaurant is located."}, "condition": {"type": "string", "description": "Condition to be met by the restaurant (e.g., operating days, amenities, etc.)"}}, "required": ["cuisine", "location", "condition"]}}}, "model_result_raw": "[get_restaurant(cuisine='sushi', location='Boston', condition='opens_sundays')]", "model_result_decoded": [{"get_restaurant": {"cuisine": "sushi", "location": "Boston", "condition": "opens_sundays"}}], "possible_answer": {"get_restaurant": {"cuisine": ["sushi"], "location": ["Boston"], "condition": ["open on Sundays", "opens on Sundays"]}}}
{"id": 100, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'end_range'. Expected type float, got int. Parameter value: 2."], "error_type": "type_error:simple", "prompt": {"question": "Plot a sine wave from 0 to 2 pi with a frequency of 5 Hz.", "function": {"name": "plot_sine_wave", "description": "Plot a sine wave for a given frequency in a given range.", "parameters": {"type": "dict", "properties": {"start_range": {"type": "integer", "description": "Start of the range in radians."}, "end_range": {"type": "float", "description": "End of the range in radians."}, "frequency": {"type": "integer", "description": "Frequency of the sine wave in Hz."}, "amplitude": {"type": "integer", "description": "Amplitude of the sine wave. Default is 1."}, "phase_shift": {"type": "integer", "description": "Phase shift of the sine wave in radians. Default is 0."}}, "required": ["start_range", "end_range", "frequency"]}}}, "model_result_raw": "[plot_sine_wave(start_range=0, end_range=2, frequency=5)]", "model_result_decoded": [{"plot_sine_wave": {"start_range": 0, "end_range": 2, "frequency": 5}}], "possible_answer": {"plot_sine_wave": {"start_range": [0], "end_range": [6.283185307179586], "frequency": [5], "amplitude": [1, ""], "phase_shift": [0, ""]}}}
{"id": 104, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'polynomial'. Expected outer type array with inner type <class 'float'>. Parameter value: [3, 2, -4]."], "error_type": "type_error:nested", "prompt": {"question": "Calculate the area under the curve y=3x^2 + 2x - 4, between x = -1 and x = 2.", "function": {"name": "mathematics.calculate_area_under_curve", "description": "Calculate the area under the curve for a given polynomial function within a specified interval.", "parameters": {"type": "dict", "properties": {"polynomial": {"type": "array", "items": {"type": "float"}, "description": "The coefficients of the polynomial, in decreasing order of exponent, where the first element is the coefficient for x^n, the second element is the coefficient for x^(n-1), and so on. The last element is the constant term."}, "limits": {"type": "array", "items": {"type": "float"}, "description": "A list of two numbers specifying the lower and upper limit for the integration interval."}}, "required": ["polynomial", "limits"]}}}, "model_result_raw": "[mathematics.calculate_area_under_curve(polynomial=[3, 2, -4], limits=[-1, 2])]", "model_result_decoded": [{"mathematics.calculate_area_under_curve": {"polynomial": [3, 2, -4], "limits": [-1, 2]}}], "possible_answer": {"mathematics.calculate_area_under_curve": {"polynomial": [[3.0, 2.0, -4.0]], "limits": [[-1.0, 2.0]]}}}
{"id": 121, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Optional parameter 'equal_variance' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Run a two sample T-test to compare the average of Group A [3, 4, 5, 6, 4] and Group B [7, 8, 9, 8, 7] assuming equal variance.", "function": {"name": "run_two_sample_ttest", "description": "Runs a two sample t-test for two given data groups.", "parameters": {"type": "dict", "properties": {"group1": {"type": "array", "items": {"type": "integer"}, "description": "First group of data points."}, "group2": {"type": "array", "items": {"type": "integer"}, "description": "Second group of data points."}, "equal_variance": {"type": "boolean", "description": "Assumption about whether the two samples have equal variance.", "default": true}}, "required": ["group1", "group2"]}}}, "model_result_raw": "[run_two_sample_ttest(group1=[3, 4, 5, 6, 4], group2=[7, 8, 9, 8, 7])]", "model_result_decoded": [{"run_two_sample_ttest": {"group1": [3, 4, 5, 6, 4], "group2": [7, 8, 9, 8, 7]}}], "possible_answer": {"run_two_sample_ttest": {"group1": [[3, 4, 5, 6, 4]], "group2": [[7, 8, 9, 8, 7]], "equal_variance": [true]}}}
{"id": 123, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'table': [10, 20, 30, 40]. Expected one of [[[10, 20], [30, 40]]]."], "error_type": "value_error:list/tuple", "prompt": {"question": "Perform a Chi-Squared test for independence on a 2x2 contingency table [ [10, 20], [30, 40] ]", "function": {"name": "chi_squared_test", "description": "Performs a Chi-Squared test for independence on a 2x2 contingency table.", "parameters": {"type": "dict", "properties": {"table": {"type": "array", "items": {"type": "integer"}, "description": "A 2x2 contingency table presented in array form."}, "alpha": {"type": "float", "description": "Significance level for the Chi-Squared test. Default is 0.05."}}, "required": ["table"]}}}, "model_result_raw": "[chi_squared_test(table=[10, 20, 30, 40], alpha=0.05)]", "model_result_decoded": [{"chi_squared_test": {"table": [10, 20, 30, 40], "alpha": 0.05}}], "possible_answer": {"chi_squared_test": {"table": [[[10, 20], [30, 40]]], "alpha": [0.05, ""]}}}
{"id": 128, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'discount_rate'. Expected type float, got int. Parameter value: 10."], "error_type": "type_error:simple", "prompt": {"question": "Find the Net Present Value (NPV) of an investment, given cash_flows=[200,300,400,500], a discount rate of 10%, and an initial investment of $2000.", "function": {"name": "calculate_NPV", "description": "Calculate the NPV (Net Present Value) of an investment, considering a series of future cash flows, discount rate, and an initial investment.", "parameters": {"type": "dict", "properties": {"cash_flows": {"type": "array", "items": {"type": "integer"}, "description": "Series of future cash flows."}, "discount_rate": {"type": "float", "description": "The discount rate to use."}, "initial_investment": {"type": "integer", "description": "The initial investment. Default is 0 if not specified."}}, "required": ["cash_flows", "discount_rate"]}}}, "model_result_raw": "[calculate_NPV(cash_flows=[200, 300, 400, 500], discount_rate=10, initial_investment=2000)]", "model_result_decoded": [{"calculate_NPV": {"cash_flows": [200, 300, 400, 500], "discount_rate": 10, "initial_investment": 2000}}], "possible_answer": {"calculate_NPV": {"cash_flows": [[200, 300, 400, 500]], "discount_rate": [0.1], "initial_investment": [2000]}}}
{"id": 129, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'total_payout': 50. Expected one of [50000000]."], "error_type": "value_error:others", "prompt": {"question": "What's the quarterly dividend per share of a company with 100 million outstanding shares and total dividend payout of 50 million USD?", "function": {"name": "finance.calculate_quarterly_dividend_per_share", "description": "Calculate quarterly dividend per share for a company given total dividend payout and outstanding shares", "parameters": {"type": "dict", "properties": {"total_payout": {"type": "integer", "description": "The total amount of dividends paid out in USD"}, "outstanding_shares": {"type": "integer", "description": "Total number of outstanding shares"}}, "required": ["total_payout", "outstanding_shares"], "optional": []}}}, "model_result_raw": "[finance.calculate_quarterly_dividend_per_share(total_payout=50, outstanding_shares=100)]", "model_result_decoded": [{"finance.calculate_quarterly_dividend_per_share": {"total_payout": 50, "outstanding_shares": 100}}], "possible_answer": {"finance.calculate_quarterly_dividend_per_share": {"total_payout": [50000000], "outstanding_shares": [100000000]}}}
{"id": 137, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'annual_rate'. Expected type float, got int. Parameter value: 5."], "error_type": "type_error:simple", "prompt": {"question": "Find the compound interest for an investment of $10000 with an annual interest rate of 5% compounded monthly for 5 years.", "function": {"name": "compound_interest", "description": "Calculate compound interest for a certain time period.", "parameters": {"type": "dict", "properties": {"principal": {"type": "integer", "description": "The initial amount of money that was invested or loaned out."}, "annual_rate": {"type": "float", "description": "The interest rate for a year as a percentage."}, "compounding_freq": {"type": "string", "enum": ["monthly", "quarterly", "annually"], "description": "The number of times that interest is compounded per unit period."}, "time_in_years": {"type": "integer", "description": "The time the money is invested for in years."}}, "required": ["principal", "annual_rate", "compounding_freq", "time_in_years"]}}}, "model_result_raw": "[compound_interest(principal=10000, annual_rate=5, compounding_freq='monthly', time_in_years=5)]", "model_result_decoded": [{"compound_interest": {"principal": 10000, "annual_rate": 5, "compounding_freq": "monthly", "time_in_years": 5}}], "possible_answer": {"compound_interest": {"principal": [10000], "annual_rate": [0.05], "compounding_freq": ["monthly"], "time_in_years": [5]}}}
{"id": 140, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'yearly_yield': 5.0. Expected one of [0.05]."], "error_type": "value_error:others", "prompt": {"question": "What is the estimated return on a mutual fund, given that it has a yearly yield of 5%, an investment amount of $2000 and a time period of 3 years?", "function": {"name": "estimate_mutual_fund_return", "description": "Calculate the estimated return on a mutual fund given the yearly yield, the investment amount and the time period.", "parameters": {"type": "dict", "properties": {"yearly_yield": {"type": "float", "description": "The yearly yield of the mutual fund as a percentage."}, "investment_amount": {"type": "integer", "description": "The initial investment amount in the mutual fund."}, "years": {"type": "integer", "description": "The time period for which the investment is made in years."}}, "required": ["yearly_yield", "investment_amount", "years"]}}}, "model_result_raw": "[estimate_mutual_fund_return(yearly_yield=5.0, investment_amount=2000, years=3)]", "model_result_decoded": [{"estimate_mutual_fund_return": {"yearly_yield": 5.0, "investment_amount": 2000, "years": 3}}], "possible_answer": {"estimate_mutual_fund_return": {"yearly_yield": [0.05], "investment_amount": [2000], "years": [3]}}}
{"id": 152, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Optional parameter 'top_n' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Find the highest grossing banks in the U.S for year 2020.", "function": {"name": "highest_grossing_banks", "description": "Retrieve the highest grossing banks in a specified country and year.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country to get the data from."}, "year": {"type": "integer", "description": "The year to get the data from."}, "top_n": {"type": "integer", "description": "Top n banks in terms of grossing. Default is 5"}}, "required": ["country", "year"]}}}, "model_result_raw": "[highest_grossing_banks(country='United States', year=2020)]", "model_result_decoded": [{"highest_grossing_banks": {"country": "United States", "year": 2020}}], "possible_answer": {"highest_grossing_banks": {"country": ["U.S", "United States", "USA", "U.S."], "year": [2020], "top_n": [1]}}}
{"id": 157, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'details': False. Expected one of [True]."], "error_type": "value_error:others", "prompt": {"question": "Look up details of a felony crime record for case number CA123456 in San Diego County", "function": {"name": "crime_record.get_record", "description": "Retrieve detailed felony crime records using a specific case number and location.", "parameters": {"type": "dict", "properties": {"case_number": {"type": "string", "description": "The case number related to the crime."}, "county": {"type": "string", "description": "The county in which the crime occurred."}, "details": {"type": "boolean", "description": "To get a detailed report, set as true. Defaults to false."}}, "required": ["case_number", "county"]}}}, "model_result_raw": "[crime_record.get_record(case_number='CA123456', county='San Diego', details=False)]", "model_result_decoded": [{"crime_record.get_record": {"case_number": "CA123456", "county": "San Diego", "details": false}}], "possible_answer": {"crime_record.get_record": {"case_number": ["CA123456"], "county": ["San Diego"], "details": [true]}}}
{"id": 159, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'New York'. Expected one of ['New York, NY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the information of criminal cases of Mr. X in New York between 2012 and 2015.", "function": {"name": "get_criminal_records", "description": "Retrieve the criminal records of a specific person in a specific area during a certain time period.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the person."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY"}, "from_year": {"type": "integer", "description": "The start year of the time frame."}, "to_year": {"type": "integer", "description": "The end year of the time frame."}}, "required": ["name", "location", "from_year", "to_year"]}}}, "model_result_raw": "[get_criminal_records(name='Mr. X', location='New York', from_year=2012, to_year=2015)]", "model_result_decoded": [{"get_criminal_records": {"name": "Mr. X", "location": "New York", "from_year": 2012, "to_year": 2015}}], "possible_answer": {"get_criminal_records": {"name": ["Mr. X"], "location": ["New York, NY"], "from_year": [2012], "to_year": [2015]}}}
{"id": 167, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'city': 'Chicago'. Expected one of ['Chicago, IL.', 'Chicago, IL']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find a lawyer specializing in divorce cases and charge fee less than 400 dollars per hour in Chicago.", "function": {"name": "lawyer.find_nearby", "description": "Locate nearby lawyers based on specific criteria like specialty, fee per hour and city.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city and state, e.g. Chicago, IL."}, "specialty": {"type": "array", "items": {"type": "string", "enum": ["Civil", "Divorce", "Immigration", "Business", "Criminal"]}, "description": "Specialization of the lawyer."}, "fee": {"type": "integer", "description": "Hourly fee charged by lawyer"}}, "required": ["city", "specialty", "fee"]}}}, "model_result_raw": "[lawyer.find_nearby(city='Chicago', specialty=['Divorce'], fee=300)]", "model_result_decoded": [{"lawyer.find_nearby": {"city": "Chicago", "specialty": ["Divorce"], "fee": 300}}], "possible_answer": {"lawyer.find_nearby": {"city": ["Chicago, IL.", "Chicago, IL"], "specialty": [["Divorce"]], "fee": [400]}}}
{"id": 173, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'case_id': 'R_v_Adams'. Expected one of ['R vs Adams', 'R_vs_Adams']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "How to obtain the detailed case information of the R vs Adams legal case?", "function": {"name": "legal_case.fetch", "description": "Fetch detailed legal case information from database.", "parameters": {"type": "dict", "properties": {"case_id": {"type": "string", "description": "The ID of the legal case."}, "details": {"type": "boolean", "description": "True if need the detail info. "}}, "required": ["case_id", "details"]}}}, "model_result_raw": "[legal_case.fetch(case_id='R_v_Adams', details=True)]", "model_result_decoded": [{"legal_case.fetch": {"case_id": "R_v_Adams", "details": true}}], "possible_answer": {"legal_case.fetch": {"case_id": ["R vs Adams", "R_vs_Adams"], "details": [true]}}}
{"id": 178, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'status': 'open'. Expected one of ['all', '']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find all Patent lawsuit cases of Facebook in 2018.", "function": {"name": "get_lawsuit_cases", "description": "Retrieve all lawsuit cases related to a specific company during a particular year.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "year": {"type": "integer", "description": "The specific year to search for lawsuit cases."}, "status": {"type": "string", "enum": ["open", "closed", "all"], "description": "The status of the lawsuit cases to retrieve. If not specified, defaults to 'all'."}}, "required": ["company_name", "year"]}}}, "model_result_raw": "[get_lawsuit_cases(company_name='Facebook', year=2018, status='open')]", "model_result_decoded": [{"get_lawsuit_cases": {"company_name": "Facebook", "year": 2018, "status": "open"}}], "possible_answer": {"get_lawsuit_cases": {"company_name": ["Facebook"], "year": [2018], "status": ["all", ""]}}}
{"id": 183, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'year': 2020. Expected one of ['']."], "error_type": "value_error:others", "prompt": {"question": "Retrieve all the lawsuit details for case number XYZ123", "function": {"name": "lawsuit_info", "description": "Retrieves details of a lawsuit given a case number", "parameters": {"type": "dict", "properties": {"case_number": {"type": "string", "description": "The unique identifier of the lawsuit case"}, "year": {"type": "integer", "description": "The year in which the lawsuit case was initiated. Default is latest year if not specified.", "optional": true}, "location": {"type": "string", "description": "The location or court jurisdiction where the case was filed. Default is 'all'.", "optional": true}}, "required": ["case_number"]}}}, "model_result_raw": "[lawsuit_info(case_number='XYZ123', year=2020, location='')]", "model_result_decoded": [{"lawsuit_info": {"case_number": "XYZ123", "year": 2020, "location": ""}}], "possible_answer": {"lawsuit_info": {"case_number": ["XYZ123"], "year": [""], "location": ["", "all"]}}}
{"id": 184, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'county': 'Santa Clara'. Expected one of ['Santa Clara County']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Search for current lawsuits filed against Apple in Santa Clara County.", "function": {"name": "lawsuit_search", "description": "Retrieve all lawsuits involving a particular entity from specified jurisdiction.", "parameters": {"type": "dict", "properties": {"entity": {"type": "string", "description": "The entity involved in lawsuits."}, "county": {"type": "string", "description": "The jurisdiction for the lawsuit search for example Alameda county."}, "state": {"type": "string", "description": "The state for the lawsuit search. Default is California."}}, "required": ["entity", "county"]}}}, "model_result_raw": "[lawsuit_search(entity='Apple', county='Santa Clara')]", "model_result_decoded": [{"lawsuit_search": {"entity": "Apple", "county": "Santa Clara"}}], "possible_answer": {"lawsuit_search": {"entity": ["Apple"], "county": ["Santa Clara County"], "state": ["California", ""]}}}
{"id": 198, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'time': '2023-11-13T12:00:00'. Expected one of ['12pm', '12:00']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the air quality index in San Diego at 12pm.", "function": {"name": "get_air_quality_index", "description": "Retrieve the air quality index at a specified location and time.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location to get the air quality index for."}, "time": {"type": "string", "description": "The specific time to check the air quality. Default is the current time."}}, "required": ["location", "time"]}}}, "model_result_raw": "[get_air_quality_index(location='San Diego', time='2023-11-13T12:00:00')]", "model_result_decoded": [{"get_air_quality_index": {"location": "San Diego", "time": "2023-11-13T12:00:00"}}], "possible_answer": {"get_air_quality_index": {"location": ["San Diego"], "time": ["12pm", "12:00"]}}}
{"id": 201, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'fuel_efficiency'. Expected type float, got int. Parameter value: 25."], "error_type": "type_error:simple", "prompt": {"question": "How much CO2 is produced annually by a gas-fueled car that travels 12,000 miles per year, with fuel efficiency of 25% ?", "function": {"name": "calculate_emissions", "description": "Calculates the annual carbon dioxide emissions produced by a vehicle based on the distance traveled, the fuel type and the fuel efficiency of the vehicle.", "parameters": {"type": "dict", "properties": {"distance": {"type": "integer", "description": "The distance travelled in miles."}, "fuel_type": {"type": "string", "description": "Type of fuel used by the vehicle."}, "fuel_efficiency": {"type": "float", "description": "The vehicle's fuel efficiency in miles per gallon."}, "efficiency_reduction": {"type": "integer", "description": "The percentage decrease in fuel efficiency per year (optional). Default is 0"}}, "required": ["distance", "fuel_type", "fuel_efficiency"]}}}, "model_result_raw": "[calculate_emissions(distance=12000, fuel_type='gas', fuel_efficiency=25)]", "model_result_decoded": [{"calculate_emissions": {"distance": 12000, "fuel_type": "gas", "fuel_efficiency": 25}}], "possible_answer": {"calculate_emissions": {"distance": [12000], "fuel_type": ["gas"], "fuel_efficiency": ["", 20.0], "efficiency_reduction": [0, ""]}}}
{"id": 202, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'year': 2023. Expected one of ['', 2024]."], "error_type": "value_error:others", "prompt": {"question": "Estimate the population of pandas in the wild in China.", "function": {"name": "estimate_population", "description": "Estimate the population of a particular species in a given country.", "parameters": {"type": "dict", "properties": {"species": {"type": "string", "description": "The species for which population needs to be estimated."}, "country": {"type": "string", "description": "The country where the species lives."}, "year": {"type": "integer", "description": "The year for which population estimate is sought. Default is the current year."}}, "required": ["species", "country"]}}}, "model_result_raw": "[estimate_population(species='pandas', country='China', year=2023)]", "model_result_decoded": [{"estimate_population": {"species": "pandas", "country": "China", "year": 2023}}], "possible_answer": {"estimate_population": {"species": ["panda", "pandas"], "country": ["China", "CN"], "year": ["", 2024]}}}
{"id": 203, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'energy_type': 'solar'. Expected one of ['renewable']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "How many greenhouse gas emissions would I save if I switched to renewable energy sources for 3 months in California?", "function": {"name": "calculate_emission_savings", "description": "Calculate potential greenhouse gas emissions saved by switching to renewable energy sources.", "parameters": {"type": "dict", "properties": {"energy_type": {"type": "string", "description": "Type of the renewable energy source."}, "usage_duration": {"type": "integer", "description": "Usage duration in months."}, "region": {"type": "string", "description": "The region where you use energy. Default is 'Texas'."}}, "required": ["energy_type", "usage_duration"]}}}, "model_result_raw": "[calculate_emission_savings(energy_type='solar', usage_duration=3, region='California')]", "model_result_decoded": [{"calculate_emission_savings": {"energy_type": "solar", "usage_duration": 3, "region": "California"}}], "possible_answer": {"calculate_emission_savings": {"energy_type": ["renewable"], "usage_duration": [3], "region": ["California", "CA"]}}}
{"id": 204, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'historical': '2022-01-01'. Expected one of ['', 'today']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Can you find me the latest information about air quality index and pollution data for Chicago?", "function": {"name": "get_air_quality", "description": "Retrieve real-time air quality and pollution data for a specific location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the air quality data for."}, "detail": {"type": "boolean", "description": "If true, additional data like PM2.5, PM10, ozone levels, and pollution sources will be retrieved. Default is false."}, "historical": {"type": "string", "description": "Optional date (in 'YYYY-MM-DD' format) to retrieve historical data.", "default": "today"}}, "required": ["location"]}}}, "model_result_raw": "[get_air_quality(location='Chicago', detail=True, historical='2022-01-01')]", "model_result_decoded": [{"get_air_quality": {"location": "Chicago", "detail": true, "historical": "2022-01-01"}}], "possible_answer": {"get_air_quality": {"location": ["Chicago"], "detail": [true], "historical": ["", "today"]}}}
{"id": 212, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unterminated string literal (detected at line 1) (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"question": "Send an email to John Doe at john.doe@example.com with the subject 'Meeting' and body 'Let's meet at 10 AM tomorrow'.", "function": {"name": "send_email", "description": "Send an email to the specified email address.", "parameters": {"type": "dict", "properties": {"to": {"type": "string", "description": "The email address to send to."}, "subject": {"type": "string", "description": "The subject of the email."}, "body": {"type": "string", "description": "The body content of the email."}, "cc": {"type": "string", "description": "The email address to carbon copy. Default is empty if not specified."}, "bcc": {"type": "string", "description": "The email address to blind carbon copy. Default is empty if not specified."}}, "required": ["to", "subject", "body"]}}}, "model_result_raw": "[send_email(to='john.doe@example.com', subject='Meeting', body='Let's meet at 10 AM tomorrow.')]", "possible_answer": {"send_email": {"to": ["john.doe@example.com"], "subject": ["Meeting"], "body": ["Let's meet at 10 AM tomorrow", "Let's meet at 10 AM tomorrow."], "cc": [""], "bcc": [""]}}}
{"id": 214, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Optional parameter 'direct_flight' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Book a direct flight from San Francisco to London for 2022-04-27 afternoon", "function": {"name": "flight.book", "description": "Book a direct flight for a specific date and time from departure location to destination location.", "parameters": {"type": "dict", "properties": {"departure_location": {"type": "string", "description": "The location you are departing from."}, "destination_location": {"type": "string", "description": "The location you are flying to."}, "date": {"type": "string", "description": "The date of the flight. Accepts standard date format e.g., 2022-04-28."}, "time": {"type": "string", "description": "Preferred time of flight. Default is 'morning'."}, "direct_flight": {"type": "boolean", "description": "If set to true, only direct flights will be searched. Default is false."}}, "required": ["departure_location", "destination_location", "date"]}}}, "model_result_raw": "[flight.book(departure_location='San Francisco', destination_location='London', date='2022-04-27', time='afternoon')]", "model_result_decoded": [{"flight.book": {"departure_location": "San Francisco", "destination_location": "London", "date": "2022-04-27", "time": "afternoon"}}], "possible_answer": {"flight.book": {"departure_location": ["San Francisco", "SF"], "destination_location": ["London"], "date": ["2022-04-27", "04/27/2022", "Apr 27, 2022"], "time": ["afternoon", ""], "direct_flight": [true]}}}
{"id": 215, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'genre': 'rock concert'. Expected one of ['Rock', 'rock']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Search for upcoming month rock concerts in New York.", "function": {"name": "event_finder.find_upcoming", "description": "Find upcoming events of a specific genre in a given location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state where the search will take place, e.g. New York, NY."}, "genre": {"type": "string", "description": "The genre of events."}, "days_ahead": {"type": "integer", "description": "The number of days from now to include in the search.", "default": 7}}, "required": ["location", "genre"]}}}, "model_result_raw": "[event_finder.find_upcoming(location='New York', genre='rock concert', days_ahead=30)]", "model_result_decoded": [{"event_finder.find_upcoming": {"location": "New York", "genre": "rock concert", "days_ahead": 30}}], "possible_answer": {"event_finder.find_upcoming": {"location": ["New York", "New York, NY", "NYC"], "genre": ["Rock", "rock"], "days_ahead": [30]}}}
{"id": 216, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'extra_info': True. Expected one of ['', False]."], "error_type": "value_error:others", "prompt": {"question": "Give me a brief on movie 'Interstellar'", "function": {"name": "movie_details.brief", "description": "This function retrieves a brief about a specified movie.", "parameters": {"type": "dict", "properties": {"title": {"type": "string", "description": "Title of the movie"}, "extra_info": {"type": "boolean", "description": "Option to get additional information like Director, Cast, Awards etc.", "default": "false"}}, "required": ["title"]}}}, "model_result_raw": "[movie_details.brief(title='Interstellar', extra_info=True)]", "model_result_decoded": [{"movie_details.brief": {"title": "Interstellar", "extra_info": true}}], "possible_answer": {"movie_details.brief": {"title": ["Interstellar"], "extra_info": ["", false]}}}
{"id": 217, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unterminated string literal (detected at line 1) (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"question": "Analyze the sentiment of a customer review 'I love the food here! It's always fresh and delicious.'.", "function": {"name": "sentiment_analysis", "description": "Perform sentiment analysis on a given piece of text.", "parameters": {"type": "dict", "properties": {"text": {"type": "string", "description": "The text on which to perform sentiment analysis."}, "language": {"type": "string", "description": "The language in which the text is written."}}, "required": ["text", "language"]}}}, "model_result_raw": "[sentiment_analysis(text='I love the food here! It's always fresh and delicious.', language='en')]", "possible_answer": {"sentiment_analysis": {"text": ["I love the food here! It's always fresh and delicious."], "language": ["english", "English", "en"]}}}
{"id": 226, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'demographic': 'age_18_24'. Expected one of ['', 'all']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What is the percentage of population preferring digital reading over physical books?", "function": {"name": "psych_research.get_preference", "description": "Gathers research data on public preference between two options, based on societal category.", "parameters": {"type": "dict", "properties": {"category": {"type": "string", "description": "The societal category the preference data is about. E.g. reading, transportation, food"}, "option_one": {"type": "string", "description": "The first option people could prefer."}, "option_two": {"type": "string", "description": "The second option people could prefer."}, "demographic": {"type": "string", "description": "Specific demographic of society to narrow down the research.", "default": "all"}}, "required": ["category", "option_one", "option_two"]}}}, "model_result_raw": "[psych_research.get_preference(category='reading', option_one='digital reading', option_two='physical books', demographic='age_18_24')]", "model_result_decoded": [{"psych_research.get_preference": {"category": "reading", "option_one": "digital reading", "option_two": "physical books", "demographic": "age_18_24"}}], "possible_answer": {"psych_research.get_preference": {"category": ["reading"], "option_one": ["digital reading", "digital"], "option_two": ["physical book", "physical", "physical books"], "demographic": ["", "all"]}}}
{"id": 239, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'year': 1863. Expected one of [1861]."], "error_type": "value_error:others", "prompt": {"question": "Who was the president of the United States during the American Civil War?", "function": {"name": "us_history.get_president", "description": "Retrieve the U.S. president during a specific event in American history.", "parameters": {"type": "dict", "properties": {"event": {"type": "string", "description": "The event in U.S. history."}, "year": {"type": "integer", "description": "The specific year of the event."}}, "required": ["event", "year"]}}}, "model_result_raw": "[us_history.get_president(event='American Civil War', year=1863)]", "model_result_decoded": [{"us_history.get_president": {"event": "American Civil War", "year": 1863}}], "possible_answer": {"us_history.get_president": {"event": ["American Civil War"], "year": [1861]}}}
{"id": 243, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'discovery': '&#x2013;&#x2013;&#x2013;The theory of evolution &#x2013;&#x2013;&#x2013;'. Expected one of ['Theory of Evolution', 'theory of evolution']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Who is the scientist that first proposed the theory of evolution?", "function": {"name": "get_scientist_for_discovery", "description": "Retrieve the scientist's name who is credited for a specific scientific discovery or theory.", "parameters": {"type": "dict", "properties": {"discovery": {"type": "string", "description": "The scientific discovery or theory."}}, "required": ["discovery"]}}}, "model_result_raw": "[get_scientist_for_discovery(discovery='&#x2013;&#x2013;&#x2013;The theory of evolution &#x2013;&#x2013;&#x2013;')]", "model_result_decoded": [{"get_scientist_for_discovery": {"discovery": "&#x2013;&#x2013;&#x2013;The theory of evolution &#x2013;&#x2013;&#x2013;"}}], "possible_answer": {"get_scientist_for_discovery": {"discovery": ["Theory of Evolution", "theory of evolution"]}}}
{"id": 245, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'work_title': 'Philosophi\u00e6 Naturalis Principia Mathematica'. Expected one of ['Law of Universal Gravitation', 'Universal Law of Gravitation', 'The law of universal gravitation']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What year was the law of universal gravitation published by Isaac Newton?", "function": {"name": "publication_year.find", "description": "Fetches the year a particular scientific work was published.", "parameters": {"type": "dict", "properties": {"author": {"type": "string", "description": "Name of the author of the work."}, "work_title": {"type": "string", "description": "Title of the scientific work."}, "location": {"type": "string", "description": "Place of the publication, if known. Default to 'all'."}}, "required": ["author", "work_title"]}}}, "model_result_raw": "[publication_year.find(author='Isaac Newton', work_title='Philosophi\u00e6 Naturalis Principia Mathematica')]", "model_result_decoded": [{"publication_year.find": {"author": "Isaac Newton", "work_title": "Philosophi\u00e6 Naturalis Principia Mathematica"}}], "possible_answer": {"publication_year.find": {"author": ["Isaac Newton"], "work_title": ["Law of Universal Gravitation", "Universal Law of Gravitation", "The law of universal gravitation"], "location": ["", "all"]}}}
{"id": 248, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'category': 'Physics'. Expected one of ['', 'all']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What was Albert Einstein's contribution to science on March 17, 1915?", "function": {"name": "historical_contrib.get_contrib", "description": "Retrieve historical contribution made by a scientist on a specific date.", "parameters": {"type": "dict", "properties": {"scientist": {"type": "string", "description": "The scientist whose contributions need to be searched."}, "date": {"type": "string", "description": "The date when the contribution was made in yyyy-mm-dd format."}, "category": {"type": "string", "description": "The field of the contribution, such as 'Physics' or 'Chemistry'. Default is 'all'."}}, "required": ["scientist", "date"]}}}, "model_result_raw": "[historical_contrib.get_contrib(scientist='Albert Einstein', date='1915-03-17', category='Physics')]", "model_result_decoded": [{"historical_contrib.get_contrib": {"scientist": "Albert Einstein", "date": "1915-03-17", "category": "Physics"}}], "possible_answer": {"historical_contrib.get_contrib": {"scientist": ["Albert Einstein"], "date": ["1915-03-17", "03/17/1915", "Mar.17,1915"], "category": ["", "all"]}}}
{"id": 265, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Optional parameter 'detail' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Find the size of the sculpture with title 'David' by Michelangelo.", "function": {"name": "sculpture.get_details", "description": "Retrieve details of a sculpture based on the artist and the title of the sculpture.", "parameters": {"type": "dict", "properties": {"artist": {"type": "string", "description": "The artist who made the sculpture."}, "title": {"type": "string", "description": "The title of the sculpture."}, "detail": {"type": "string", "description": "The specific detail wanted about the sculpture. Default is 'general information'."}}, "required": ["artist", "title"]}}}, "model_result_raw": "[sculpture.get_details(artist='Michelangelo', title='David')]", "model_result_decoded": [{"sculpture.get_details": {"artist": "Michelangelo", "title": "David"}}], "possible_answer": {"sculpture.get_details": {"artist": ["Michelangelo"], "title": ["David"], "detail": ["size"]}}}
{"id": 268, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'New York'. Expected one of ['New York City, NY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the top rated modern sculpture exhibition happening in New York in the upcoming month.", "function": {"name": "find_exhibition", "description": "Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where the exhibition is held, e.g., New York City, NY."}, "art_form": {"type": "string", "description": "The form of art the exhibition is displaying e.g., sculpture."}, "month": {"type": "string", "description": "The month of exhibition. Default value will return upcoming events if not specified."}, "user_ratings": {"type": "string", "enum": ["low", "average", "high"], "description": "Select exhibitions with user rating threshold. Default is 'low'"}}, "required": ["location", "art_form"]}}}, "model_result_raw": "[find_exhibition(location='New York', art_form='sulpture', month='upcoming', user_ratings='high')]", "model_result_decoded": [{"find_exhibition": {"location": "New York", "art_form": "sulpture", "month": "upcoming", "user_ratings": "high"}}], "possible_answer": {"find_exhibition": {"location": ["New York City, NY"], "art_form": ["sculpture", "modern sculpture"], "month": [""], "user_ratings": ["high"]}}}
{"id": 274, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'day': 'Sunday'. Expected one of ['', 'Monday']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find out the open hours for the Louvre Museum in Paris.", "function": {"name": "museum.get_hours", "description": "Retrieve the open hours for a museum based on its name and location.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the museum."}, "location": {"type": "string", "description": "The city where the museum is located."}, "day": {"type": "string", "description": "Optional: Day of the week for specific open hours. Default 'Monday'."}}, "required": ["name", "location"]}}}, "model_result_raw": "[museum.get_hours(name='Louvre Museum', location='Paris', day='Sunday')]", "model_result_decoded": [{"museum.get_hours": {"name": "Louvre Museum", "location": "Paris", "day": "Sunday"}}], "possible_answer": {"museum.get_hours": {"name": ["Louvre Museum"], "location": ["Paris", "Paris, France"], "day": ["", "Monday"]}}}
{"id": 277, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'day': 'Tuesday'. Expected one of ['', 'Monday']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get the working hours of Louvre Museum in Paris.", "function": {"name": "museum_working_hours.get", "description": "Get the working hours of a museum in a specific location.", "parameters": {"type": "dict", "properties": {"museum": {"type": "string", "description": "The name of the museum."}, "location": {"type": "string", "description": "The location of the museum."}, "day": {"type": "string", "description": "Specific day of the week. Default is 'Monday'"}}, "required": ["museum", "location"]}}}, "model_result_raw": "[museum_working_hours.get(museum='Louvre Museum', location='Paris', day='Tuesday')]", "model_result_decoded": [{"museum_working_hours.get": {"museum": "Louvre Museum", "location": "Paris", "day": "Tuesday"}}], "possible_answer": {"museum_working_hours.get": {"museum": ["Louvre Museum", "Louvre"], "location": ["Paris", "Paris, France"], "day": ["", "Monday"]}}}
{"id": 278, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'information': []. Expected one of [['opening_hours', 'ticket_price'], ['ticket_price', 'opening_hours']]."], "error_type": "value_error:list/tuple", "prompt": {"question": "Find the working hours and ticket price of The British Museum for this weekend.", "function": {"name": "museum_info", "description": "Get information about a museum including its opening hours and ticket prices for a specific date range.", "parameters": {"type": "dict", "properties": {"museum": {"type": "string", "description": "The name of the museum."}, "date": {"type": "string", "description": "The specific date or date range for which information is needed. It could be specific date such as '2022-12-01' or a date range like 'this weekend', 'next week'. It could also be a recurring time such as 'every Saturday'."}, "information": {"type": "array", "items": {"type": "string", "enum": ["opening_hours", "ticket_price", "address"]}, "description": "The type of information needed from the museum. This is optional and defaults to 'all' if not specified.", "default": "all"}}, "required": ["museum", "date"]}}}, "model_result_raw": "[museum_info(museum='The British Museum', date='this weekend', information=[])]", "model_result_decoded": [{"museum_info": {"museum": "The British Museum", "date": "this weekend", "information": []}}], "possible_answer": {"museum_info": {"museum": ["The British Museum"], "date": ["this weekend", "2023-06-20", "06/20/2023", "Jun.20,2023"], "information": [["opening_hours", "ticket_price"], ["ticket_price", "opening_hours"]]}}}
{"id": 285, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'date': '2023-02'. Expected one of ['next month', '2023-06-01', '06/01/2023', 'Jun.1,2023', 'June 2023']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get information about the pop concerts in New York for next month.", "function": {"name": "concert_info.get", "description": "Retrieve information about concerts based on specific genre, location and date.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where the concert will take place."}, "date": {"type": "string", "description": "Time frame to get the concert for."}, "genre": {"type": "string", "description": "Genre of the concert.", "enum": ["Pop", "Rock", "Country", "Classical", "Electronic", "Hip-Hop"]}}, "required": ["location", "date", "genre"]}}}, "model_result_raw": "[concert_info.get(location='New York', date='2023-02', genre='Pop')]", "model_result_decoded": [{"concert_info.get": {"location": "New York", "date": "2023-02", "genre": "Pop"}}], "possible_answer": {"concert_info.get": {"location": ["New York City, NY", "New York"], "date": ["next month", "2023-06-01", "06/01/2023", "Jun.1,2023", "June 2023"], "genre": ["Pop"]}}}
{"id": 310, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'team': 'Tampa Bay Buccaneers'. Expected one of ['']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find me the record of Tom Brady in the 2020 NFL season.", "function": {"name": "nfl_data.player_record", "description": "Retrieve the record of an NFL player in a specified season.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The name of the NFL player."}, "season_year": {"type": "integer", "description": "The year of the NFL season."}, "team": {"type": "string", "description": "The NFL team that the player played for in that season. Default is all teams if not specified."}}, "required": ["player_name", "season_year"]}}}, "model_result_raw": "[nfl_data.player_record(player_name='Tom Brady', season_year=2020, team='Tampa Bay Buccaneers')]", "model_result_decoded": [{"nfl_data.player_record": {"player_name": "Tom Brady", "season_year": 2020, "team": "Tampa Bay Buccaneers"}}], "possible_answer": {"nfl_data.player_record": {"player_name": ["Tom Brady"], "season_year": [2020], "team": [""]}}}
{"id": 316, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'top': 4. Expected one of [1, '']."], "error_type": "value_error:others", "prompt": {"question": "Get the NBA team's ranking with the best defence in the 2021 season.", "function": {"name": "get_defense_ranking", "description": "Retrieve the defence ranking of NBA teams in a specified season.", "parameters": {"type": "dict", "properties": {"season": {"type": "integer", "description": "The NBA season to get defence ranking from."}, "top": {"type": "integer", "default": 1, "description": "Number of top teams in defence ranking to fetch."}}, "required": ["season"]}}}, "model_result_raw": "[get_defense_ranking(season=2021, top=4)]", "model_result_decoded": [{"get_defense_ranking": {"season": 2021, "top": 4}}], "possible_answer": {"get_defense_ranking": {"season": [2021], "top": [1, ""]}}}
{"id": 324, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'gender': 'women'. Expected one of ['woman']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Who is ranked as the top player in woman tennis?", "function": {"name": "sports_ranking.get_top_player", "description": "Get the top player in a specific sport.", "parameters": {"type": "dict", "properties": {"sport": {"type": "string", "description": "The type of sport."}, "gender": {"type": "string", "description": "The gender of the sport category. Optional.", "default": "men"}}, "required": ["sport"]}}}, "model_result_raw": "[sports_ranking.get_top_player(sport='tennis', gender='women')]", "model_result_decoded": [{"sports_ranking.get_top_player": {"sport": "tennis", "gender": "women"}}], "possible_answer": {"sports_ranking.get_top_player": {"sport": ["tennis"], "gender": ["woman"]}}}
{"id": 326, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'season': '2020-2021'. Expected one of ['']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Who won the last match between Chicago Bulls and Los Angeles Lakers?", "function": {"name": "sports.match_results", "description": "Returns the results of a given match between two teams.", "parameters": {"type": "dict", "properties": {"team1": {"type": "string", "description": "The name of the first team."}, "team2": {"type": "string", "description": "The name of the second team."}, "season": {"type": "string", "description": "The season when the match happened. Default is the current season."}}, "required": ["team1", "team2"]}}}, "model_result_raw": "[sports.match_results(team1='Chicago Bulls', team2='Los Angeles Lakers', season='2020-2021')]", "model_result_decoded": [{"sports.match_results": {"team1": "Chicago Bulls", "team2": "Los Angeles Lakers", "season": "2020-2021"}}], "possible_answer": {"sports.match_results": {"team1": ["Chicago Bulls"], "team2": ["Los Angeles Lakers"], "season": [""]}}}
{"id": 329, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'language': 'en'. Expected one of ['', 'English']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the rating and player count of the board game 'Ticket to Ride'.", "function": {"name": "boardgame.get_info", "description": "Retrieve detailed information of a board game.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "Name of the board game."}, "parameters": {"type": "array", "items": {"type": "string", "enum": ["player count", "playing time", "age", "mechanics", "rating"]}, "description": "Game characteristics interested."}, "language": {"type": "string", "description": "The preferred language for the game information, default is English"}}, "required": ["name", "parameters"]}}}, "model_result_raw": "[boardgame.get_info(name='Ticket to Ride', parameters=['rating', 'player count'], language='en')]", "model_result_decoded": [{"boardgame.get_info": {"name": "Ticket to Ride", "parameters": ["rating", "player count"], "language": "en"}}], "possible_answer": {"boardgame.get_info": {"name": ["Ticket to Ride"], "parameters": [["rating", "player count"], ["player count", "rating"]], "language": ["", "English"]}}}
{"id": 338, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'poker_game_winner' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"question": "In a texas holdem game, Who won in the poker game with players Alex, Sam, Robert and Steve given the cards Alex':['A of spades', 'K of spades'], 'Sam': ['2 of diamonds', '3 of clubs'], 'Robert': ['Q of hearts', '10 of hearts'], 'Steve': ['4 of spades', '5 of spades']?", "function": {"name": "poker_game_winner", "description": "Identify the winner in a poker game based on the cards.", "parameters": {"type": "dict", "properties": {"players": {"type": "array", "items": {"type": "string"}, "description": "Names of the players in a list."}, "cards": {"type": "dict", "description": "An object containing the player name as key and the cards as values in a list."}, "type": {"type": "string", "description": "Type of poker game. Defaults to 'Texas Holdem'"}}, "required": ["players", "cards"]}}}, "model_result_raw": "[error.message(error=\"Error occurred\")]", "model_result_decoded": [{"error.message": {"error": "Error occurred"}}], "possible_answer": {"poker_game_winner": {"players": [["Alex", "Sam", "Robert", "Steve"]], "cards": [{"Alex": [["A of spades", "K of spades"]], "Sam": [["2 of diamonds", "3 of clubs"]], "Robert": [["Q of hearts", "10 of hearts"]], "Steve": [["4 of spades", "5 of spades"]]}], "type": ["Texas Holdem", ""]}}}
{"id": 352, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'rating': 4.7. Expected one of [4.5]."], "error_type": "value_error:others", "prompt": {"question": "Find me a multiplayer game with rating above 4.5 and compatible with Windows 10.", "function": {"name": "multiplayer_game_finder", "description": "Locate multiplayer games that match specific criteria such as rating, platform compatibility, genre, etc.", "parameters": {"type": "dict", "properties": {"platform": {"type": "string", "description": "The platform you want the game to be compatible with, e.g. Windows 10, PS5."}, "rating": {"type": "float", "description": "Desired minimum game rating on a 5.0 scale."}, "genre": {"type": "string", "description": "Desired game genre, e.g. Action, Adventure, Racing. Default is 'Action'.", "enum": ["Action", "Adventure", "Racing", "Strategy", "Simulation"]}}, "required": ["platform", "rating"]}}}, "model_result_raw": "[multiplayer_game_finder(platform='Windows 10', rating=4.7)]", "model_result_decoded": [{"multiplayer_game_finder": {"platform": "Windows 10", "rating": 4.7}}], "possible_answer": {"multiplayer_game_finder": {"platform": ["Windows 10"], "rating": [4.5], "genre": ["", "Action"]}}}
{"id": 355, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'cooking_time': 20. Expected one of [30]."], "error_type": "value_error:others", "prompt": {"question": "Find a vegan soup recipe that takes under 30 minutes to make.", "function": {"name": "get_vegan_recipe", "description": "Retrieve a vegan soup recipe based on the provided cooking time.", "parameters": {"type": "dict", "properties": {"dish_type": {"type": "string", "description": "The type of dish, e.g. soup, dessert, etc.", "enum": ["soup", "main dish", "dessert", "salad"]}, "cooking_time": {"type": "integer", "description": "The maximum cooking time for the recipe in minutes."}, "ingredient_preference": {"type": "array", "items": {"type": "string"}, "description": "Preferred ingredients to be included in the recipe, if any. Default to not use it if not provided."}}, "required": ["dish_type", "cooking_time"]}}}, "model_result_raw": "[get_vegan_recipe(dish_type='soup', cooking_time=20, ingredient_preference=[])]", "model_result_decoded": [{"get_vegan_recipe": {"dish_type": "soup", "cooking_time": 20, "ingredient_preference": []}}], "possible_answer": {"get_vegan_recipe": {"dish_type": ["soup"], "cooking_time": [30], "ingredient_preference": [""]}}}
{"id": 360, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'ingredients': ['pasta']. Expected one of [['pasta', 'cheese']]."], "error_type": "value_error:list/tuple", "prompt": {"question": "Give me a recipe for a vegetarian pasta with cheese for 2 servings.", "function": {"name": "recipe_search", "description": "Search for a recipe given dietary restriction, ingredients, and number of servings.", "parameters": {"type": "dict", "properties": {"dietary_restriction": {"type": "string", "description": "The dietary restriction, e.g., 'Vegetarian'."}, "ingredients": {"type": "array", "items": {"type": "string"}, "description": "The list of ingredients."}, "servings": {"type": "integer", "description": "The number of servings the recipe should make"}}, "required": ["dietary_restriction", "ingredients", "servings"]}}}, "model_result_raw": "[recipe_search(dietary_restriction='Vegetarian', ingredients=['pasta'], servings=2)]", "model_result_decoded": [{"recipe_search": {"dietary_restriction": "Vegetarian", "ingredients": ["pasta"], "servings": 2}}], "possible_answer": {"recipe_search": {"dietary_restriction": ["Vegetarian"], "ingredients": [["pasta", "cheese"]], "servings": [2]}}}
{"id": 371, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'quantity': [3, 5]. Expected one of [[3, 1]]."], "error_type": "value_error:list/tuple", "prompt": {"question": "Order three bottles of olive oil and a five pound bag of rice from Safeway in Palo Alto.", "function": {"name": "safeway.order", "description": "Order specified items from a Safeway location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location of the Safeway store, e.g. Palo Alto, CA."}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items to order."}, "quantity": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item in the order list."}}, "required": ["location", "items", "quantity"]}}}, "model_result_raw": "[safeway.order(location='Palo Alto, CA', items=['olive oil', 'rice'], quantity=[3, 5])]", "model_result_decoded": [{"safeway.order": {"location": "Palo Alto, CA", "items": ["olive oil", "rice"], "quantity": [3, 5]}}], "possible_answer": {"safeway.order": {"location": ["Palo Alto", "Palo Alto, CA"], "items": [["olive oil", "rice"], ["olive oil", "bag of rice"]], "quantity": [[3, 1]]}}}
{"id": 372, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'Whole Foods in Los Angeles'. Expected one of ['Los Angeles', 'LA']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Check the price of tomatoes and lettuce at the Whole Foods in Los Angeles.", "function": {"name": "whole_foods.check_price", "description": "Check the price of items at a specific Whole Foods location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "Location of the Whole Foods store."}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items for which the price needs to be checked."}}, "required": ["location", "items"]}}}, "model_result_raw": "[whole_foods.check_price(location='Whole Foods in Los Angeles', items=['tomatoes', 'lettuce'])]", "model_result_decoded": [{"whole_foods.check_price": {"location": "Whole Foods in Los Angeles", "items": ["tomatoes", "lettuce"]}}], "possible_answer": {"whole_foods.check_price": {"location": ["Los Angeles", "LA"], "items": [["tomatoes", "lettuce"]]}}}
{"id": 373, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'product': 'organic_bananas'. Expected one of ['bananas']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the top five organic bananas brands on the basis of rating from Whole Foods store.", "function": {"name": "whole_foods.find_top_brands", "description": "Get top brands based on a specific product from Whole Foods", "parameters": {"type": "dict", "properties": {"product": {"type": "string", "description": "The product for which the top brands should be fetched."}, "number": {"type": "integer", "description": "Number of top brands to be fetched. Default is 5"}, "organic": {"type": "boolean", "description": "If the product should be organic. Default is false"}}, "required": ["product"]}}}, "model_result_raw": "[whole_foods.find_top_brands(product='organic_bananas', number=5, organic=True)]", "model_result_decoded": [{"whole_foods.find_top_brands": {"product": "organic_bananas", "number": 5, "organic": true}}], "possible_answer": {"whole_foods.find_top_brands": {"product": ["bananas"], "number": [5, ""], "organic": [true]}}}
{"id": 374, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'product_list': ['Apples', 'Rice', '12 pack of Bottled Water']. Expected one of [['apples', 'rice', 'bottled water'], ['apples', 'rice', 'water']]."], "error_type": "value_error:list/tuple", "prompt": {"question": "I want to buy apples, rice, and 12 pack of bottled water from a Walmart near San Jose. Show me the product information and stock availability.", "function": {"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "dict", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is not use it if not specified."}}, "required": ["loc", "product_list"]}}}, "model_result_raw": "[walmart.purchase(loc='San Jose, CA', product_list=['Apples', 'Rice', '12 pack of Bottled Water'], pack_size=[1, 1, 12])]", "model_result_decoded": [{"walmart.purchase": {"loc": "San Jose, CA", "product_list": ["Apples", "Rice", "12 pack of Bottled Water"], "pack_size": [1, 1, 12]}}], "possible_answer": {"walmart.purchase": {"loc": ["San Jose", "San Jose, CA"], "product_list": [["apples", "rice", "bottled water"], ["apples", "rice", "water"]], "pack_size": [[1, 1, 12]]}}}
{"id": 376, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Optional parameter 'store_location' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Check the total price for three pumpkins and two dozen eggs at Walmart.", "function": {"name": "walmart.check_price", "description": "Calculate total price for given items and their quantities at Walmart.", "parameters": {"type": "dict", "properties": {"items": {"type": "array", "items": {"type": "string"}, "description": "List of items to be priced."}, "quantities": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item corresponding to the items list."}, "store_location": {"type": "string", "description": "The store location for specific pricing (optional). Default to all if not specified."}}, "required": ["items", "quantities"]}}}, "model_result_raw": "[walmart.check_price(items=['pumpkins', 'eggs'], quantities=[3, 24])]", "model_result_decoded": [{"walmart.check_price": {"items": ["pumpkins", "eggs"], "quantities": [3, 24]}}], "possible_answer": {"walmart.check_price": {"items": [["pumpkins", "eggs"], ["pumpkin", "egg"]], "quantities": [[3, 24], [3, 2]], "store_location": ["Los Angeles", "LA"]}}}
{"id": 383, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'hotel_name': 'Hilton Chicago'. Expected one of ['Hilton Hotel', 'Hilton']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Book a single room for two nights at the Hilton Hotel in Chicago, starting from 10th December 2022.", "function": {"name": "book_hotel", "description": "Book a room of specified type for a particular number of nights at a specific hotel, starting from a specified date.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city in which the hotel is located."}, "room_type": {"type": "string", "description": "The type of room to be booked."}, "start_date": {"type": "string", "description": "The start date for the booking."}, "nights": {"type": "integer", "description": "The number of nights for which the booking is to be made."}}, "required": ["hotel_name", "location", "room_type", "start_date", "nights"]}}}, "model_result_raw": "[book_hotel(hotel_name='Hilton Chicago', location='Chicago', room_type='single room', start_date='10th December 2022', nights=2)]", "model_result_decoded": [{"book_hotel": {"hotel_name": "Hilton Chicago", "location": "Chicago", "room_type": "single room", "start_date": "10th December 2022", "nights": 2}}], "possible_answer": {"book_hotel": {"hotel_name": ["Hilton Hotel", "Hilton"], "location": ["Chicago"], "room_type": ["single"], "start_date": ["2022-12-10", "10/12/2022", "Dec 10, 2022", "December 10, 2022"], "nights": [2]}}}
{"id": 388, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'hotel_name': 'The Plaza Hotel'. Expected one of ['Plaza Hotel']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Book a hotel room at the Plaza Hotel in New York for 3 nights starting from 1st June 2022", "function": {"name": "hotel_booking", "description": "Books a hotel room for a specific date range.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY."}, "start_date": {"type": "string", "description": "The start date of the reservation. Use format 'YYYY-MM-DD'."}, "end_date": {"type": "string", "description": "The end date of the reservation. Use format 'YYYY-MM-DD'."}, "rooms": {"type": "integer", "default": 1, "description": "The number of rooms to reserve."}}, "required": ["hotel_name", "location", "start_date", "end_date"]}}}, "model_result_raw": "[hotel_booking(hotel_name='The Plaza Hotel', location='New York, NY', start_date='2022-06-01', end_date='2022-06-04', rooms=1)]", "model_result_decoded": [{"hotel_booking": {"hotel_name": "The Plaza Hotel", "location": "New York, NY", "start_date": "2022-06-01", "end_date": "2022-06-04", "rooms": 1}}], "possible_answer": {"hotel_booking": {"hotel_name": ["Plaza Hotel"], "location": ["New York City, NY", "New York, NY"], "start_date": ["2022-06-01", "06/01/2022", "Jun.1,2022"], "end_date": ["2022-06-04", "06/04/2022", "Jun.4,2022"], "rooms": [1, ""]}}}
{"id": 390, "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'amount'. Expected type float, got int. Parameter value: 200."], "error_type": "type_error:simple", "prompt": {"question": "Calculate the current cost in British Pounds if I need to convert 200 US dollars.", "function": {"name": "currency_converter", "description": "Calculates the cost in target currency given the amount in base currency and exchange rate", "parameters": {"type": "dict", "properties": {"base_currency": {"type": "string", "description": "The currency to convert from."}, "target_currency": {"type": "string", "description": "The currency to convert to."}, "amount": {"type": "float", "description": "The amount in base currency"}}, "required": ["base_currency", "target_currency", "amount"]}}}, "model_result_raw": "[currency_converter(base_currency='USD', target_currency='GBP', amount=200)]", "model_result_decoded": [{"currency_converter": {"base_currency": "USD", "target_currency": "GBP", "amount": 200}}], "possible_answer": {"currency_converter": {"base_currency": ["USD"], "target_currency": ["GBP"], "amount": [200.0]}}}