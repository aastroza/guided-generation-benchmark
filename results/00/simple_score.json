{"accuracy": 0.335, "correct_count": 134, "total_count": 400}
{"id": 4, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'b': 3. Expected one of [-3]."], "error_type": "value_error:others", "prompt": {"question": "Find the roots of a quadratic equation with coefficients a=1, b=-3, c=2.", "function": {"name": "algebra.quadratic_roots", "description": "Find the roots of a quadratic equation ax^2 + bx + c = 0.", "parameters": {"type": "dict", "properties": {"a": {"type": "integer", "description": "Coefficient of x^2."}, "b": {"type": "integer", "description": "Coefficient of x."}, "c": {"type": "integer", "description": "Constant term."}}, "required": ["a", "b", "c"]}}}, "model_result_raw": "[algebra.quadratic_roots(a=1, b=3, c=2)]", "model_result_decoded": [{"algebra.quadratic_roots": {"a": 1, "b": 3, "c": 2}}], "possible_answer": {"algebra.quadratic_roots": {"a": [1], "b": [-3], "c": [2]}}}
{"id": 6, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'b': 3. Expected one of [-11]."], "error_type": "value_error:others", "prompt": {"question": "Find the roots of a quadratic equation given coefficients a = 3, b = -11, and c = -4.", "function": {"name": "solve_quadratic", "description": "Solve a quadratic equation given coefficients a, b, and c. If optional 'root_type' is 'real', the function will only return real roots. If not specified, function may return complex roots.", "parameters": {"type": "dict", "properties": {"a": {"type": "integer", "description": "The coefficient of the squared term in the quadratic equation."}, "b": {"type": "integer", "description": "The coefficient of the linear term in the quadratic equation."}, "c": {"type": "integer", "description": "The constant term in the quadratic equation."}, "root_type": {"type": "string", "description": "The type of roots to return: 'real' for real roots, 'all' for both real and complex roots. Default value is 'real'."}}, "required": ["a", "b", "c"]}}}, "model_result_raw": "[solve_quadratic(a=3, b=3, c=1)]", "model_result_decoded": [{"solve_quadratic": {"a": 3, "b": 3, "c": 1}}], "possible_answer": {"solve_quadratic": {"a": [3], "b": [-11], "c": [-4], "root_type": ["", "real"]}}}
{"id": 8, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Optional parameter 'unit' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "What is the circumference of a circle with a radius of 4 inches?", "function": {"name": "calculate_circumference", "description": "Calculates the circumference of a circle with a given radius.", "parameters": {"type": "dict", "properties": {"radius": {"type": "integer", "description": "The radius of the circle in the unit given."}, "unit": {"type": "string", "description": "The unit of measurement for the radius. Default is 'cm'."}}, "required": ["radius"]}}}, "model_result_raw": "[calculate_circumference(radius=4)]", "model_result_decoded": [{"calculate_circumference": {"radius": 4}}], "possible_answer": {"calculate_circumference": {"radius": [4], "unit": ["inches", "in"]}}}
{"id": 14, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'function': 'integrate'. Expected one of ['x^2', 'x**2']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Calculate the area under the curve y=x^2 from x=1 to x=3.", "function": {"name": "calculate_area_under_curve", "description": "Calculate the area under a mathematical function within a given interval.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The mathematical function as a string."}, "interval": {"type": "array", "items": {"type": "float"}, "description": "An array that defines the interval to calculate the area under the curve from the start to the end point."}, "method": {"type": "string", "description": "The numerical method to approximate the area under the curve. The default value is 'trapezoidal'."}}, "required": ["function", "interval"]}}}, "model_result_raw": "[calculate_area_under_curve(function='integrate', interval=[1, 3])]", "model_result_decoded": [{"calculate_area_under_curve": {"function": "integrate", "interval": [1, 3]}}], "possible_answer": {"calculate_area_under_curve": {"function": ["x^2", "x**2"], "interval": [[1.0, 3.0]], "method": ["", "trapezoidal"]}}}
{"id": 15, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'function': 'find_derivative(a::<i32>) -> f64'. Expected one of ['3x^2 + 2x - 1', '3*x**2+2*x-1']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Calculate the derivative of the function 3x^2 + 2x - 1.", "function": {"name": "calculate_derivative", "description": "Calculate the derivative of a polynomial function.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The polynomial function."}, "x_value": {"type": "float", "description": "The x-value at which the derivative is calculated. Optional, default to 0.00."}}, "required": ["function"]}}}, "model_result_raw": "[calculate_derivative(function='find_derivative(a::<i32>) -> f64', x_value=3)]", "model_result_decoded": [{"calculate_derivative": {"function": "find_derivative(a::<i32>) -> f64", "x_value": 3}}], "possible_answer": {"calculate_derivative": {"function": ["3x^2 + 2x - 1", "3*x**2+2*x-1"], "x_value": ["", 0.0]}}}
{"id": 16, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'function': 'simpsonIntegration'. Expected one of ['x^3', 'x**3']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Calculate the area under the curve from x = -2 to x = 3 for the function y = x^3 using simpson method.", "function": {"name": "integrate", "description": "Calculate the area under a curve for a specified function between two x values.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The function to integrate, represented as a string. For example, 'x^3'"}, "start_x": {"type": "integer", "description": "The starting x-value to integrate over."}, "end_x": {"type": "integer", "description": "The ending x-value to integrate over."}, "method": {"type": "string", "description": "The method of numerical integration to use. Choices are 'trapezoid' or 'simpson'. Default is 'trapezoid'."}}, "required": ["function", "start_x", "end_x"]}}}, "model_result_raw": "[integrate(function='simpsonIntegration', start_x=2, end_x=4, method='rectangular')]", "model_result_decoded": [{"integrate": {"function": "simpsonIntegration", "start_x": 2, "end_x": 4, "method": "rectangular"}}], "possible_answer": {"integrate": {"function": ["x^3", "x**3"], "start_x": [-2], "end_x": [3], "method": ["simpson"]}}}
{"id": 17, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'function': 'derivative_of_x(x)'. Expected one of ['2*x^2', '2x^2', '2**x^2']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Calculate the derivative of the function 2x^2 at x = 1.", "function": {"name": "calculus.derivative", "description": "Compute the derivative of a function at a specific value.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The function to calculate the derivative of."}, "value": {"type": "integer", "description": "The value where the derivative needs to be calculated at."}, "function_variable": {"type": "string", "description": "The variable present in the function, for instance x or y, etc. Default is 'x'."}}, "required": ["function", "value"]}}}, "model_result_raw": "[calculus.derivative(function='derivative_of_x(x)', value=2, function_variable='x')]", "model_result_decoded": [{"calculus.derivative": {"function": "derivative_of_x(x)", "value": 2, "function_variable": "x"}}], "possible_answer": {"calculus.derivative": {"function": ["2*x^2", "2x^2", "2**x^2"], "value": [1], "function_variable": ["x", ""]}}}
{"id": 18, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'formatted': False. Expected one of [True, '']."], "error_type": "value_error:others", "prompt": {"question": "Find the prime factors of 450", "function": {"name": "get_prime_factors", "description": "Function to retrieve prime factors of a number.", "parameters": {"type": "dict", "properties": {"number": {"type": "integer", "description": "Number for which prime factors need to be calculated"}, "formatted": {"type": "boolean", "description": "Return formatted string if true, array if false. Default is true."}}, "required": ["number", "formatted"]}}}, "model_result_raw": "[get_prime_factors(number=450, formatted=False)]", "model_result_decoded": [{"get_prime_factors": {"number": 450, "formatted": false}}], "possible_answer": {"get_prime_factors": {"number": [450], "formatted": [true, ""]}}}
{"id": 27, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'unit': 'kilometer'. Expected one of ['', 'km/h']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Calculate the velocity of a car that travels a distance of 50 kilometers for a duration of 2 hours?", "function": {"name": "calculate_velocity", "description": "Calculate the velocity for a certain distance travelled within a specific duration.", "parameters": {"type": "dict", "properties": {"distance": {"type": "integer", "description": "The distance travelled by the object, typically in kilometers."}, "duration": {"type": "integer", "description": "The duration of the journey, typically in hours."}, "unit": {"type": "string", "description": "Optional parameter. The unit to return the velocity in. If not provided, the default is km/h."}}, "required": ["distance", "duration"]}}}, "model_result_raw": "[calculate_velocity(distance=50, duration=2, unit='kilometer')]", "model_result_decoded": [{"calculate_velocity": {"distance": 50, "duration": 2, "unit": "kilometer"}}], "possible_answer": {"calculate_velocity": {"distance": [50], "duration": [2], "unit": ["", "km/h"]}}}
{"id": 31, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'acceleration': 0. Expected one of [4]."], "error_type": "value_error:others", "prompt": {"question": "What is the final velocity of a vehicle that started from rest and accelerated at 4 m/s^2 for a distance of 300 meters?", "function": {"name": "kinematics.final_velocity_from_distance", "description": "Calculate the final velocity of an object given the acceleration and distance travelled, assuming initial velocity is 0.", "parameters": {"type": "dict", "properties": {"acceleration": {"type": "integer", "description": "Acceleration of the object, m/s^2."}, "distance": {"type": "integer", "description": "Distance traveled by the object, m."}, "initial_velocity": {"type": "float", "description": "Initial velocity of the object. Default is 0, m/s"}}, "required": ["acceleration", "distance"]}}}, "model_result_raw": "[kinematics.final_velocity_from_distance(acceleration=0, distance=0, initial_velocity=0)]", "model_result_decoded": [{"kinematics.final_velocity_from_distance": {"acceleration": 0, "distance": 0, "initial_velocity": 0}}], "possible_answer": {"kinematics.final_velocity_from_distance": {"acceleration": [4], "distance": [300], "initial_velocity": ["", 0.0]}}}
{"id": 33, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'gravity': 9.81. Expected one of [9.8, '']."], "error_type": "value_error:others", "prompt": {"question": "Calculate the final speed of an object dropped from 100 m without air resistance.", "function": {"name": "calculate_final_speed", "description": "Calculate the final speed of an object dropped from a certain height without air resistance.", "parameters": {"type": "dict", "properties": {"initial_velocity": {"type": "integer", "description": "The initial velocity of the object."}, "height": {"type": "integer", "description": "The height from which the object is dropped."}, "gravity": {"type": "float", "description": "The gravitational acceleration. Default is 9.8 m/s^2."}}, "required": ["initial_velocity", "height"]}}}, "model_result_raw": "[calculate_final_speed(initial_velocity=0, height=100, gravity=9.81)]", "model_result_decoded": [{"calculate_final_speed": {"initial_velocity": 0, "height": 100, "gravity": 9.81}}], "possible_answer": {"calculate_final_speed": {"initial_velocity": [0], "height": [100], "gravity": [9.8, ""]}}}
{"id": 35, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'destination': ''. Expected one of ['Tokyo']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Create an itinerary for a 7 days trip to Tokyo with daily budgets not exceeding $100 and prefer exploring nature.", "function": {"name": "travel_itinerary_generator", "description": "Generate a travel itinerary based on specific destination, duration and daily budget, with preferred exploration type.", "parameters": {"type": "dict", "properties": {"destination": {"type": "string", "description": "Destination city of the trip."}, "days": {"type": "integer", "description": "Number of days for the trip."}, "daily_budget": {"type": "integer", "description": "The maximum daily budget for the trip."}, "exploration_type": {"type": "string", "enum": ["nature", "urban", "history", "culture"], "description": "The preferred exploration type.", "default": "urban"}}, "required": ["destination", "days", "daily_budget"]}}}, "model_result_raw": "[travel_itinerary_generator(destination='', days=7, daily_budget=100, exploration_type='nature')]", "model_result_decoded": [{"travel_itinerary_generator": {"destination": "", "days": 7, "daily_budget": 100, "exploration_type": "nature"}}], "possible_answer": {"travel_itinerary_generator": {"destination": ["Tokyo"], "days": [7], "daily_budget": [100], "exploration_type": ["nature"]}}}
{"id": 36, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'New York'. Expected one of ['New York, NY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find an all vegan restaurant in New York that opens until at least 11 PM.", "function": {"name": "vegan_restaurant.find_nearby", "description": "Locate nearby vegan restaurants based on specific criteria like operating hours.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. New York, NY, you should format it as City, State."}, "operating_hours": {"type": "integer", "description": "Preferred latest closing time of the restaurant. E.g. if 11 is given, then restaurants that close at or after 11 PM will be considered. This is in 24 hour format. Default is 24."}}, "required": ["location"]}}}, "model_result_raw": "[vegan_restaurant.find_nearby(location='New York', operating_hours=8)]", "model_result_decoded": [{"vegan_restaurant.find_nearby": {"location": "New York", "operating_hours": 8}}], "possible_answer": {"vegan_restaurant.find_nearby": {"location": ["New York, NY"], "operating_hours": [23]}}}
{"id": 37, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax. Perhaps you forgot a comma? (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"question": "Find the shortest driving distance between New York City and Washington D.C.", "function": {"name": "get_shortest_driving_distance", "description": "Calculate the shortest driving distance between two locations.", "parameters": {"type": "dict", "properties": {"origin": {"type": "string", "description": "Starting point of the journey. You should format it as city name like Boston."}, "destination": {"type": "string", "description": "End point of the journey. You should format it as city name like Boston."}, "unit": {"type": "string", "description": "Preferred unit of distance (optional, default is 'km')."}}, "required": ["origin", "destination"]}}}, "model_result_raw": "[get_shortest_driving_distance(origin=': 'New York City', ', destination=': 'Washington D.C.'')]", "possible_answer": {"get_shortest_driving_distance": {"origin": ["New York City"], "destination": ["Washington D.C."], "unit": ["km", ""]}}}
{"id": 39, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'constant': 8987551792.3. Expected one of ['', 8990000000.0]."], "error_type": "value_error:others", "prompt": {"question": "What is the electrostatic potential between two charged bodies of 1e-9 and 2e-9 of distance 0.05?", "function": {"name": "calculate_electrostatic_potential", "description": "Calculate the electrostatic potential between two charged bodies using the principle of Coulomb's Law.", "parameters": {"type": "dict", "properties": {"charge1": {"type": "float", "description": "The quantity of charge on the first body."}, "charge2": {"type": "float", "description": "The quantity of charge on the second body."}, "distance": {"type": "float", "description": "The distance between the two bodies."}, "constant": {"type": "float", "description": "The value of the electrostatic constant. Default is 8.99e9."}}, "required": ["charge1", "charge2", "distance"]}}}, "model_result_raw": "[calculate_electrostatic_potential(charge1=1e-09, charge2=2e-09, distance=0.05, constant=8987551792.3)]", "model_result_decoded": [{"calculate_electrostatic_potential": {"charge1": 1e-09, "charge2": 2e-09, "distance": 0.05, "constant": 8987551792.3}}], "possible_answer": {"calculate_electrostatic_potential": {"charge1": [1e-09], "charge2": [2e-09], "distance": [0.05], "constant": ["", 8990000000.0]}}}
{"id": 42, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'charge1': 1. Expected one of [5]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the electromagnetic force between two charges of 5C and 7C placed 3 meters apart.", "function": {"name": "electromagnetic_force", "description": "Calculate the electromagnetic force between two charges placed at a certain distance.", "parameters": {"type": "dict", "properties": {"charge1": {"type": "integer", "description": "The magnitude of the first charge in coulombs."}, "charge2": {"type": "integer", "description": "The magnitude of the second charge in coulombs."}, "distance": {"type": "integer", "description": "The distance between the two charges in meters."}, "medium_permittivity": {"type": "float", "description": "The relative permittivity of the medium in which the charges are present. Default is 8.854e-12 (Vacuum Permittivity)."}}, "required": ["charge1", "charge2", "distance"]}}}, "model_result_raw": "[electromagnetic_force(charge1=1, charge2=2, distance=3)]", "model_result_decoded": [{"electromagnetic_force": {"charge1": 1, "charge2": 2, "distance": 3}}], "possible_answer": {"electromagnetic_force": {"charge1": [5], "charge2": [7], "distance": [3], "medium_permittivity": ["", 8.854e-12]}}}
{"id": 43, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'inductance'. Expected type float, got int. Parameter value: 50."], "error_type": "type_error:simple", "prompt": {"question": "Calculate the resonant frequency of an LC circuit given capacitance of 100\u00b5F and inductance of 50mH.", "function": {"name": "calculate_resonant_frequency", "description": "Calculate the resonant frequency of an LC (inductor-capacitor) circuit.", "parameters": {"type": "dict", "properties": {"inductance": {"type": "float", "description": "The inductance (L) in henries (H)."}, "capacitance": {"type": "float", "description": "The capacitance (C) in farads (F)."}, "round_off": {"type": "integer", "description": "Rounding off the result to a certain decimal places, default is 2."}}, "required": ["inductance", "capacitance"]}}}, "model_result_raw": "[calculate_resonant_frequency(inductance=50, capacitance=100000)]", "model_result_decoded": [{"calculate_resonant_frequency": {"inductance": 50, "capacitance": 100000}}], "possible_answer": {"calculate_resonant_frequency": {"inductance": [0.05], "capacitance": [0.0001], "round_off": ["", 2]}}}
{"id": 46, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'phase_transition': 'liquid_to_steam'. Expected one of ['vaporization']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Calculate the energy (in Joules) absorbed or released during the phase change of 100g of water from liquid to steam at its boiling point.", "function": {"name": "thermo.calculate_energy", "description": "Calculate the energy required or released during a phase change using mass, the phase transition temperature and the specific latent heat.", "parameters": {"type": "dict", "properties": {"mass": {"type": "integer", "description": "Mass of the substance in grams."}, "phase_transition": {"type": "string", "description": "Phase transition. Can be 'melting', 'freezing', 'vaporization', 'condensation'."}, "substance": {"type": "string", "description": "The substance which is undergoing phase change, default is 'water'"}}, "required": ["mass", "phase_transition"]}}}, "model_result_raw": "[thermo.calculate_energy(mass=100, phase_transition='liquid_to_steam', substance='Water')]", "model_result_decoded": [{"thermo.calculate_energy": {"mass": 100, "phase_transition": "liquid_to_steam", "substance": "Water"}}], "possible_answer": {"thermo.calculate_energy": {"mass": [100], "phase_transition": ["vaporization"], "substance": ["water", ""]}}}
{"id": 49, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'mass': 1. Expected one of [45]."], "error_type": "value_error:others", "prompt": {"question": "What is the density of a substance with a mass of 45 kg and a volume of 15 m\u00b3?", "function": {"name": "calculate_density", "description": "Calculate the density of a substance based on its mass and volume.", "parameters": {"type": "dict", "properties": {"mass": {"type": "integer", "description": "The mass of the substance in kilograms."}, "volume": {"type": "integer", "description": "The volume of the substance in cubic meters."}, "unit": {"type": "string", "description": "The unit of density. Default is kg/m\u00b3"}}, "required": ["mass", "volume"]}}}, "model_result_raw": "[calculate_density(mass=1, volume=1)]", "model_result_decoded": [{"calculate_density": {"mass": 1, "volume": 1}}], "possible_answer": {"calculate_density": {"mass": [45], "volume": [15], "unit": ["", "kg/m\u00b3"]}}}
{"id": 50, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Optional parameter 'atm_pressure' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Calculate the absolute pressure in pascals given atmospheric pressure of 1 atm and a gauge pressure of 2 atm.", "function": {"name": "calc_absolute_pressure", "description": "Calculates the absolute pressure from gauge and atmospheric pressures.", "parameters": {"type": "dict", "properties": {"atm_pressure": {"type": "integer", "description": "The atmospheric pressure in atmospheres (atm). Default is 1 atm if not provided."}, "gauge_pressure": {"type": "integer", "description": "The gauge pressure in atmospheres (atm). Must be provided."}}, "required": ["gauge_pressure"]}}}, "model_result_raw": "[calc_absolute_pressure(gauge_pressure=2)]", "model_result_decoded": [{"calc_absolute_pressure": {"gauge_pressure": 2}}], "possible_answer": {"calc_absolute_pressure": {"atm_pressure": [1], "gauge_pressure": [2]}}}
{"id": 51, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'substance': ''. Expected one of ['ice']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What is the change in entropy in Joules per Kelvin of a 1kg ice block at 0\u00b0C if it is heated to 100\u00b0C under 1 atmosphere of pressure?", "function": {"name": "entropy_change.calculate", "description": "Calculate the change in entropy for a mass of a specific substance under set initial and final conditions.", "parameters": {"type": "dict", "properties": {"substance": {"type": "string", "description": "The substance for which the change in entropy is calculated."}, "mass": {"type": "integer", "description": "The mass of the substance in kg."}, "initial_temperature": {"type": "integer", "description": "The initial temperature of the substance in degree Celsius."}, "final_temperature": {"type": "integer", "description": "The final temperature of the substance in degree Celsius."}, "pressure": {"type": "integer", "default": 1, "description": "The pressure the substance is under in atmospheres."}}, "required": ["substance", "mass", "initial_temperature", "final_temperature"]}}}, "model_result_raw": "[entropy_change.calculate(substance='', mass=1, initial_temperature=0, final_temperature=100, pressure=1)]", "model_result_decoded": [{"entropy_change.calculate": {"substance": "", "mass": 1, "initial_temperature": 0, "final_temperature": 100, "pressure": 1}}], "possible_answer": {"entropy_change.calculate": {"substance": ["ice"], "mass": [1], "initial_temperature": [0], "final_temperature": [100], "pressure": ["", 1]}}}
{"id": 54, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'DNA_id': ''. Expected one of ['DNA123']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Retrieve the sequence of DNA molecule with id `DNA123`.", "function": {"name": "fetch_DNA_sequence", "description": "Retrieve the sequence of a DNA molecule with the given id from a public database.", "parameters": {"type": "dict", "properties": {"DNA_id": {"type": "string", "description": "Unique ID of the DNA molecule in the database."}, "format": {"type": "string", "description": "Optional parameter to get sequence in specific format (default to 'fasta')."}, "upstream": {"type": "integer", "description": "Optional parameter to include certain number of base pairs upstream the DNA sequence (default to 0)."}}, "required": ["DNA_id"]}}}, "model_result_raw": "[fetch_DNA_sequence(DNA_id='')]", "model_result_decoded": [{"fetch_DNA_sequence": {"DNA_id": ""}}], "possible_answer": {"fetch_DNA_sequence": {"DNA_id": ["DNA123"], "format": ["", "fasta"], "upstream": ["", 0]}}}
{"id": 55, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'species': 'human'. Expected one of ['Homo sapiens', '']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Identify the protein sequence of a given human gene 'BRCA1'.", "function": {"name": "get_protein_sequence", "description": "Retrieve the protein sequence encoded by a human gene.", "parameters": {"type": "dict", "properties": {"gene": {"type": "string", "description": "The human gene of interest."}, "species": {"type": "string", "description": "The species for which the gene is to be analyzed.", "default": "Homo sapiens"}}, "required": ["gene"]}}}, "model_result_raw": "[get_protein_sequence(gene='BRCA1', species='human')]", "model_result_decoded": [{"get_protein_sequence": {"gene": "BRCA1", "species": "human"}}], "possible_answer": {"get_protein_sequence": {"gene": ["BRCA1"], "species": ["Homo sapiens", ""]}}}
{"id": 56, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'cell_type': ''. Expected one of ['human']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find me detailed information about the structure of human cell", "function": {"name": "biology.get_cell_info", "description": "Retrieve information about the structure and functioning of a specified type of cell", "parameters": {"type": "dict", "properties": {"cell_type": {"type": "string", "description": "Type of cell you want information about"}, "detailed": {"type": "boolean", "description": "Indicate if you want a detailed description of the cell", "default": "false"}}, "required": ["cell_type"]}}}, "model_result_raw": "[biology.get_cell_info(cell_type='')]", "model_result_decoded": [{"biology.get_cell_info": {"cell_type": ""}}], "possible_answer": {"biology.get_cell_info": {"cell_type": ["human"], "detailed": [true]}}}
{"id": 57, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'cell_compartment': ''. Expected one of ['plasma membrane']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What are the names of proteins found in the plasma membrane?", "function": {"name": "cellbio.get_proteins", "description": "Get the list of proteins in a specific cell compartment.", "parameters": {"type": "dict", "properties": {"cell_compartment": {"type": "string", "description": "The specific cell compartment."}, "include_description": {"type": "boolean", "description": "Set true if you want a brief description of each protein.", "default": "false"}}, "required": ["cell_compartment"]}}}, "model_result_raw": "[cellbio.get_proteins(cell_compartment='')]", "model_result_decoded": [{"cellbio.get_proteins": {"cell_compartment": ""}}], "possible_answer": {"cellbio.get_proteins": {"cell_compartment": ["plasma membrane"], "include_description": ["", true, false]}}}
{"id": 59, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'molecule': ':str'. Expected one of ['ATP synthase']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What is the function of ATP synthase in mitochondria?", "function": {"name": "cell_biology.function_lookup", "description": "Look up the function of a given molecule in a specified organelle.", "parameters": {"type": "dict", "properties": {"molecule": {"type": "string", "description": "The molecule of interest."}, "organelle": {"type": "string", "description": "The organelle of interest."}, "specific_function": {"type": "boolean", "description": "If set to true, a specific function of the molecule within the organelle will be provided, if such information exists."}}, "required": ["molecule", "organelle", "specific_function"]}}}, "model_result_raw": "[cell_biology.function_lookup(molecule=':str', organelle=':str', specific_function=False)]", "model_result_decoded": [{"cell_biology.function_lookup": {"molecule": ":str", "organelle": ":str", "specific_function": false}}], "possible_answer": {"cell_biology.function_lookup": {"molecule": ["ATP synthase"], "organelle": ["mitochondria"], "specific_function": [true]}}}
{"id": 61, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'snp_id': ''. Expected one of ['rs6034464']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the type of gene mutation based on SNP (Single Nucleotide Polymorphism) ID rs6034464.", "function": {"name": "mutation_type.find", "description": "Finds the type of a genetic mutation based on its SNP (Single Nucleotide Polymorphism) ID.", "parameters": {"type": "dict", "properties": {"snp_id": {"type": "string", "description": "The ID of the Single Nucleotide Polymorphism (SNP) mutation."}, "species": {"type": "string", "description": "Species in which the SNP occurs, default is 'Homo sapiens' (Humans)."}}, "required": ["snp_id"]}}}, "model_result_raw": "[mutation_type.find(snp_id='')]", "model_result_decoded": [{"mutation_type.find": {"snp_id": ""}}], "possible_answer": {"mutation_type.find": {"snp_id": ["rs6034464"], "species": ["Homo sapiens", ""]}}}
{"id": 62, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'height': 510. Expected one of [70]."], "error_type": "value_error:others", "prompt": {"question": "Predict whether a person with weight 150lbs and height 5ft 10in who is lightly active will get type 2 diabetes.", "function": {"name": "diabetes_prediction", "description": "Predict the likelihood of diabetes type 2 based on a person's weight and height.", "parameters": {"type": "dict", "properties": {"weight": {"type": "integer", "description": "Weight of the person in lbs."}, "height": {"type": "integer", "description": "Height of the person in inches."}, "activity_level": {"type": "string", "enum": ["sedentary", "lightly active", "moderately active", "very active", "extra active"], "description": "Physical activity level of the person."}}, "required": ["weight", "height", "activity_level"]}}}, "model_result_raw": "[diabetes_prediction(weight=150, height=510, activity_level='lightly active')]", "model_result_decoded": [{"diabetes_prediction": {"weight": 150, "height": 510, "activity_level": "lightly active"}}], "possible_answer": {"diabetes_prediction": {"weight": [150], "height": [70], "activity_level": ["lightly active"]}}}
{"id": 64, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'species1': ''. Expected one of ['Human', 'human']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find out how genetically similar a human and a chimp are in percentage.", "function": {"name": "genetics.calculate_similarity", "description": "Calculates the genetic similarity between two species based on their DNA sequences.", "parameters": {"type": "dict", "properties": {"species1": {"type": "string", "description": "The first species to compare."}, "species2": {"type": "string", "description": "The second species to compare."}, "format": {"type": "string", "description": "The format of the result (percentage or fraction). Default is percentage."}}, "required": ["species1", "species2"]}}}, "model_result_raw": "[genetics.calculate_similarity(species1='', species2='')]", "model_result_decoded": [{"genetics.calculate_similarity": {"species1": "", "species2": ""}}], "possible_answer": {"genetics.calculate_similarity": {"species1": ["Human", "human"], "species2": ["Chimp", "chimp", "Chimpanzee", "chimpanzee"], "format": ["percentage", ""]}}}
{"id": 66, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'country': ''. Expected one of ['Brazil']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Calculate the Population Density for Brazil in 2022 if the population is 213 million and the land area is 8.5 million square kilometers.", "function": {"name": "calculate_density", "description": "Calculate the population density of a specific country in a specific year.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country for which the density needs to be calculated."}, "year": {"type": "string", "description": "The year in which the density is to be calculated."}, "population": {"type": "integer", "description": "The population of the country."}, "land_area": {"type": "integer", "description": "The land area of the country in square kilometers."}}, "required": ["country", "year", "population", "land_area"]}}}, "model_result_raw": "[calculate_density(country='', year='', population=213000000, land_area=8500000)]", "model_result_decoded": [{"calculate_density": {"country": "", "year": "", "population": 213000000, "land_area": 8500000}}], "possible_answer": {"calculate_density": {"country": ["Brazil"], "year": ["2022"], "population": [213000000], "land_area": [8500000]}}}
{"id": 67, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': ''. Expected one of ['Amazon rainforest']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get me data on average precipitation in the Amazon rainforest for the last six months.", "function": {"name": "ecology_data.precipitation_stats", "description": "Retrieve precipitation data for a specified location and time period.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The name of the location, e.g., 'Amazon rainforest'."}, "time_frame": {"type": "string", "enum": ["six_months", "year", "five_years"], "description": "The time period for which data is required."}}, "required": ["location", "time_frame"]}}}, "model_result_raw": "[ecology_data.precipitation_stats(location='', time_frame='six_months')]", "model_result_decoded": [{"ecology_data.precipitation_stats": {"location": "", "time_frame": "six_months"}}], "possible_answer": {"ecology_data.precipitation_stats": {"location": ["Amazon rainforest"], "time_frame": ["six_months"]}}}
{"id": 68, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'color': ':'. Expected one of ['green']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Identify a small green bird in forest.", "function": {"name": "identify_bird", "description": "Identify a bird species based on certain characteristics.", "parameters": {"type": "dict", "properties": {"color": {"type": "string", "description": "Color of the bird."}, "habitat": {"type": "string", "description": "Habitat of the bird."}, "size": {"type": "string", "enum": ["small", "medium", "large"], "description": "Size of the bird. Default is 'small'"}}, "required": ["color", "habitat"]}}}, "model_result_raw": "[identify_bird(color=':', habitat='', size='small')]", "model_result_decoded": [{"identify_bird": {"color": ":", "habitat": "", "size": "small"}}], "possible_answer": {"identify_bird": {"color": ["green"], "habitat": ["forest"], "size": ["small"]}}}
{"id": 69, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Optional parameter 'include_human_impact' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Predict the growth of forest in Yellowstone National Park for the next 5 years including human impact.", "function": {"name": "forest_growth_forecast", "description": "Predicts the forest growth over the next N years based on current trends.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location where you want to predict forest growth."}, "years": {"type": "integer", "description": "The number of years for the forecast."}, "include_human_impact": {"type": "boolean", "description": "Whether or not to include the impact of human activities in the forecast. If not provided, defaults to false."}}, "required": ["location", "years"]}}}, "model_result_raw": "[forest_growth_forecast(location='Yellowstone National Park', years=5)]", "model_result_decoded": [{"forest_growth_forecast": {"location": "Yellowstone National Park", "years": 5}}], "possible_answer": {"forest_growth_forecast": {"location": ["Yellowstone National Park"], "years": [5], "include_human_impact": [true]}}}
{"id": 74, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'country': ''. Expected one of ['United States', 'USA']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What's the projected population growth in United States in the next 20 years?", "function": {"name": "population_projections", "description": "Calculates the projected population growth based on the current growth rate.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country for which to calculate the population projection."}, "years": {"type": "integer", "description": "Number of years for the projection."}, "growth_rate": {"type": "float", "description": "Optional parameter to specify the growth rate, in percentage. Default is 1.2."}}, "required": ["country", "years"]}}}, "model_result_raw": "[population_projections(country='', years=20)]", "model_result_decoded": [{"population_projections": {"country": "", "years": 20}}], "possible_answer": {"population_projections": {"country": ["United States", "USA"], "years": [20], "growth_rate": ["", 1.2]}}}
{"id": 75, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'generation_time': 1. Expected one of [20, '']."], "error_type": "value_error:others", "prompt": {"question": "Calculate the evolution rate of a bacteria population, start with 5000 bacteria, each bacteria duplicates every hour for 6 hours.", "function": {"name": "calculate_bacteria_evolution_rate", "description": "Calculate the evolution rate of bacteria given the starting number, duplication frequency and total duration.", "parameters": {"type": "dict", "properties": {"start_population": {"type": "integer", "description": "The starting population of bacteria."}, "duplication_frequency": {"type": "integer", "description": "The frequency of bacteria duplication per hour."}, "duration": {"type": "integer", "description": "Total duration in hours."}, "generation_time": {"type": "integer", "description": "The average generation time of the bacteria in minutes. Default is 20 minutes"}}, "required": ["start_population", "duplication_frequency", "duration"]}}}, "model_result_raw": "[calculate_bacteria_evolution_rate(start_population=5000, duplication_frequency=1, duration=6, generation_time=1)]", "model_result_decoded": [{"calculate_bacteria_evolution_rate": {"start_population": 5000, "duplication_frequency": 1, "duration": 6, "generation_time": 1}}], "possible_answer": {"calculate_bacteria_evolution_rate": {"start_population": [5000], "duplication_frequency": [1], "duration": [6], "generation_time": [20, ""]}}}
{"id": 77, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'species': ''. Expected one of ['Homo Sapiens', 'homo sapiens', 'Homo sapiens']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get me the predictions of the evolutionary rate for Homo Sapiens for next 50 years using Darwin model", "function": {"name": "prediction.evolution", "description": "Predict the evolutionary rate for a specific species for a given timeframe.", "parameters": {"type": "dict", "properties": {"species": {"type": "string", "description": "The species that the evolution rate will be predicted for."}, "years": {"type": "integer", "description": "Number of years for the prediction."}, "model": {"type": "string", "description": "The model used to make the prediction, options: 'Darwin', 'Lamarck', default is 'Darwin'."}}, "required": ["species", "years"]}}}, "model_result_raw": "[prediction.evolution(species='', years=10)]", "model_result_decoded": [{"prediction.evolution": {"species": "", "years": 10}}], "possible_answer": {"prediction.evolution": {"species": ["Homo Sapiens", "homo sapiens", "Homo sapiens"], "years": [50], "model": ["Darwin"]}}}
{"id": 78, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': ''. Expected one of ['Los Angeles, CA']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find a nearby restaurant that serves vegan food in Los Angeles.", "function": {"name": "restaurant.find_nearby", "description": "Locate nearby restaurants based on specific dietary preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Los Angeles, CA"}, "dietary_preference": {"type": "array", "items": {"type": "string", "enum": ["Vegan", "Vegetarian", "Gluten-free", "Dairy-free", "Nut-free"]}, "description": "Dietary preference. Default is empty list."}}, "required": ["location"]}}}, "model_result_raw": "[restaurant.find_nearby(location='')]", "model_result_decoded": [{"restaurant.find_nearby": {"location": ""}}], "possible_answer": {"restaurant.find_nearby": {"location": ["Los Angeles, CA"], "dietary_preference": [["Vegan"]]}}}
{"id": 79, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': ''. Expected one of ['Austin']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get the average temperature in Austin for the next 3 days in Celsius.", "function": {"name": "average_temperature", "description": "Retrieves the average temperature for a specific location over the defined timeframe.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city to get the average temperature for. It should format as city name such as Boston."}, "days": {"type": "integer", "description": "The number of days to get the average temperature for."}, "temp_unit": {"type": "string", "description": "The temperature unit ('Celsius' or 'Fahrenheit'). Default is 'Fahrenheit'."}}, "required": ["location", "days"]}}}, "model_result_raw": "[average_temperature(location='', days=3, temp_unit='celsius')]", "model_result_decoded": [{"average_temperature": {"location": "", "days": 3, "temp_unit": "celsius"}}], "possible_answer": {"average_temperature": {"location": ["Austin"], "days": [3], "temp_unit": ["Celsius"]}}}
{"id": 81, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': ':str'. Expected one of ['Manhattan, New York City', 'Manhattan', 'Manhattan, New York']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "I want to find 5 restaurants nearby my location, Manhattan, offering Thai food and a vegan menu.", "function": {"name": "find_restaurants", "description": "Locate nearby restaurants based on location and food preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The specific location or area. The location should be in the format of District, City."}, "food_type": {"type": "string", "description": "The type of food preferred."}, "number": {"type": "integer", "description": "Number of results to return."}, "dietary_requirements": {"type": "array", "items": {"type": "string"}, "description": "Special dietary requirements, e.g. vegan, gluten-free. Default is empty list."}}, "required": ["location", "food_type", "number"]}}}, "model_result_raw": "[find_restaurants(location=':str', food_type=':str', number=1, dietary_requirements=['vegan'])]", "model_result_decoded": [{"find_restaurants": {"location": ":str", "food_type": ":str", "number": 1, "dietary_requirements": ["vegan"]}}], "possible_answer": {"find_restaurants": {"location": ["Manhattan, New York City", "Manhattan", "Manhattan, New York"], "food_type": ["Thai"], "number": [5], "dietary_requirements": [["vegan"], ["Vegan"]]}}}
{"id": 82, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'start_location': 'San Francisco, CA'. Expected one of ['San Francisco', 'SF']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the fastest route from San Francisco to Los Angeles with toll roads avoided.", "function": {"name": "map_routing.fastest_route", "description": "Finds the fastest route from one location to another, with an option to avoid toll roads.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "The starting location for the journey."}, "end_location": {"type": "string", "description": "The destination for the journey."}, "avoid_tolls": {"type": "boolean", "description": "Option to avoid toll roads during the journey. Default is false."}}, "required": ["start_location", "end_location"]}}}, "model_result_raw": "[map_routing.fastest_route(start_location='San Francisco, CA', end_location='Los Angeles, CA', avoid_tolls=True)]", "model_result_decoded": [{"map_routing.fastest_route": {"start_location": "San Francisco, CA", "end_location": "Los Angeles, CA", "avoid_tolls": true}}], "possible_answer": {"map_routing.fastest_route": {"start_location": ["San Francisco", "SF"], "end_location": ["Los Angeles", "LA"], "avoid_tolls": [true]}}}
{"id": 83, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'numbers'. Expected outer type array with inner type <class 'float'>. Parameter value: [12, 15, 18, 20, 21, 26, 30]."], "error_type": "type_error:nested", "prompt": {"question": "Calculate the average of list of integers [12, 15, 18, 20, 21, 26, 30].", "function": {"name": "calculate_average", "description": "Calculates the average of a list of numbers.", "parameters": {"type": "dict", "properties": {"numbers": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to calculate the average of."}}, "required": ["numbers"]}}}, "model_result_raw": "[calculate_average(numbers=[12, 15, 18, 20, 21, 26, 30])]", "model_result_decoded": [{"calculate_average": {"numbers": [12, 15, 18, 20, 21, 26, 30]}}], "possible_answer": {"calculate_average": {"numbers": [[12.0, 15.0, 18.0, 20.0, 21.0, 26.0, 30.0]]}}}
{"id": 84, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'coord1': [33.4484, 112.074]. Expected one of [[[33.4484, -112.074], [33.4484, 112.074]]]."], "error_type": "value_error:list/tuple", "prompt": {"question": "Calculate the distance between two GPS coordinates (33.4484 N, 112.0740 W) and (34.0522 N, 118.2437 W) in miles.", "function": {"name": "calculate_distance", "description": "Calculate the distance between two GPS coordinates.", "parameters": {"type": "dict", "properties": {"coord1": {"type": "tuple", "description": "The first coordinate as (latitude, longitude).", "items": {"type": "float"}}, "coord2": {"type": "tuple", "description": "The second coordinate as (latitude, longitude).", "items": {"type": "float"}}, "unit": {"type": "string", "description": "The unit of distance. Options: 'miles', 'kilometers'."}}, "required": ["coord1", "coord2", "unit"]}}}, "model_result_raw": "[calculate_distance(coord1=[33.4484, 112.074], coord2=[34.0522, 118.2437], unit='')]", "model_result_decoded": [{"calculate_distance": {"coord1": [33.4484, 112.074], "coord2": [34.0522, 118.2437], "unit": ""}}], "possible_answer": {"calculate_distance": {"coord1": [[[33.4484, -112.074], [33.4484, 112.074]]], "coord2": [[34.0522, -118.2437], [34.0522, 118.2437]], "unit": ["miles"]}}}
{"id": 86, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax. Perhaps you forgot a comma? (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"question": "What's the approximate distance between Boston, MA, and Washington, D.C. in mile?", "function": {"name": "geo_distance.calculate", "description": "Calculate the geographic distance between two given locations.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "The starting location for the distance calculation. Specify the location in the format of City, State."}, "end_location": {"type": "string", "description": "The destination location for the distance calculation. Specify the location in the format of City, State."}, "units": {"type": "string", "description": "Optional. The desired units for the resulting distance ('miles' or 'kilometers'). Defaults to 'miles'."}}, "required": ["start_location", "end_location"]}}}, "model_result_raw": "[geo_distance.calculate(start_location=': 'Boston, MA', ', end_location=': 'Washington, D.C.'')]", "possible_answer": {"geo_distance.calculate": {"start_location": ["Boston, MA"], "end_location": ["Washington, D.C."], "units": ["miles", ""]}}}
{"id": 87, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'start_city': ''. Expected one of ['New York']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the shortest distance between two cities, New York and Los Angeles, through the train and you can transfer.", "function": {"name": "city_distance.find_shortest", "description": "Calculates the shortest distance between two cities via available public transportation.", "parameters": {"type": "dict", "properties": {"start_city": {"type": "string", "description": "The city you are starting from. The parameter is in the format of city name."}, "end_city": {"type": "string", "description": "The city you are heading to.The parameter is in the format of city name."}, "transportation": {"type": "string", "description": "Preferred mode of public transportation. Default is 'bus'."}, "allow_transfer": {"type": "boolean", "description": "Allows transfer between different transportation if true. Default is false."}}, "required": ["start_city", "end_city"]}}}, "model_result_raw": "[city_distance.find_shortest(start_city='', end_city='')]", "model_result_decoded": [{"city_distance.find_shortest": {"start_city": "", "end_city": ""}}], "possible_answer": {"city_distance.find_shortest": {"start_city": ["New York"], "end_city": ["Los Angeles"], "transportation": ["train"], "allow_transfer": [true]}}}
{"id": 88, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'list': []. Expected one of [[5.0, 3.0, 4.0, 1.0, 2.0]]."], "error_type": "value_error:list/tuple", "prompt": {"question": "Sort the list [5, 3, 4, 1, 2] in ascending order.", "function": {"name": "array_sort", "description": "Sorts a given list in ascending or descending order.", "parameters": {"type": "dict", "properties": {"list": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to be sorted."}, "order": {"type": "string", "enum": ["ascending", "descending"], "description": "Order of sorting."}}, "required": ["list", "order"]}}}, "model_result_raw": "[array_sort(list=[], order='ascending')]", "model_result_decoded": [{"array_sort": {"list": [], "order": "ascending"}}], "possible_answer": {"array_sort": {"list": [[5.0, 3.0, 4.0, 1.0, 2.0]], "order": ["ascending"]}}}
{"id": 90, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'database_name': ''. Expected one of ['StudentDB']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Fetch all records for students studying Science in 'Bluebird High School' from the StudentDB.", "function": {"name": "db_fetch_records", "description": "Fetch records from a specified database table based on certain conditions.", "parameters": {"type": "dict", "properties": {"database_name": {"type": "string", "description": "The name of the database."}, "table_name": {"type": "string", "description": "The name of the table from which records need to be fetched."}, "conditions": {"type": "dict", "properties": {"department": {"type": "string", "description": "The name of the department of students."}, "school": {"type": "string", "description": "The name of the school students are enrolled in."}}, "description": "The conditions based on which records are to be fetched."}, "fetch_limit": {"type": "integer", "description": "Limits the number of records to be fetched. Default is 0, which means no limit."}}, "required": ["database_name", "table_name", "conditions"]}}}, "model_result_raw": "[db_fetch_records(database_name='', table_name='StudentDB', conditions={'school': ''})]", "model_result_decoded": [{"db_fetch_records": {"database_name": "", "table_name": "StudentDB", "conditions": {"school": ""}}}], "possible_answer": {"db_fetch_records": {"database_name": ["StudentDB"], "table_name": ["students"], "conditions": [{"department": ["Science"], "school": ["Bluebird High School", "Bluebird HS"]}], "fetch_limit": ["", 0]}}}
{"id": 91, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Optional parameter 'data_field' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Retrieve Personal Info and Job History data of a specific employee whose ID is 345 in company 'ABC Ltd.'", "function": {"name": "employee.fetch_data", "description": "Fetches the detailed data for a specific employee in a given company.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "employee_id": {"type": "integer", "description": "The unique ID of the employee."}, "data_field": {"type": "array", "items": {"type": "string", "enum": ["Personal Info", "Job History", "Payroll", "Attendance"]}, "description": "Fields of data to be fetched for the employee (Optional). Default is ['Personal Info']"}}, "required": ["company_name", "employee_id"]}}}, "model_result_raw": "[employee.fetch_data(company_name='ABC Ltd.', employee_id=345)]", "model_result_decoded": [{"employee.fetch_data": {"company_name": "ABC Ltd.", "employee_id": 345}}], "possible_answer": {"employee.fetch_data": {"company_name": ["ABC Ltd."], "employee_id": [345], "data_field": [["Personal Info", "Job History"]]}}}
{"id": 92, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'cuisine': '`str`'. Expected one of ['sushi']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get the highest rated sushi restaurant in Boston, that opens on Sundays.", "function": {"name": "get_restaurant", "description": "Retrieve highest rated restaurant given cuisine, location, and a condition.", "parameters": {"type": "dict", "properties": {"cuisine": {"type": "string", "description": "Cuisine of the restaurant."}, "location": {"type": "string", "description": "City where restaurant is located."}, "condition": {"type": "string", "description": "Condition to be met by the restaurant (e.g., operating days, amenities, etc.)"}}, "required": ["cuisine", "location", "condition"]}}}, "model_result_raw": "[get_restaurant(cuisine='`str`', location='`str`', condition='`Condition`')]", "model_result_decoded": [{"get_restaurant": {"cuisine": "`str`", "location": "`str`", "condition": "`Condition`"}}], "possible_answer": {"get_restaurant": {"cuisine": ["sushi"], "location": ["Boston"], "condition": ["open on Sundays"]}}}
{"id": 94, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': ''. Expected one of ['LA']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Fetch me the list of IMAX movie releases in theaters near LA for the next week.", "function": {"name": "get_theater_movie_releases", "description": "Retrieve the list of movie releases in specific theaters for a specified period. in the format of city shorten name like SF.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location of the theaters."}, "timeframe": {"type": "integer", "description": "The number of days for which releases are required from current date."}, "format": {"type": "string", "description": "Format of movies - could be 'IMAX', '2D', '3D', '4DX' etc. Default is 'all'"}}, "required": ["location", "timeframe"]}}}, "model_result_raw": "[get_theater_movie_releases(location='', timeframe=5)]", "model_result_decoded": [{"get_theater_movie_releases": {"location": "", "timeframe": 5}}], "possible_answer": {"get_theater_movie_releases": {"location": ["LA"], "timeframe": [7], "format": ["IMAX"]}}}
{"id": 97, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'table': 'user_tb'. Expected one of ['user']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find records in database in user table where age is greater than 25 and job is 'engineer'.", "function": {"name": "database.query", "description": "Query the database based on certain conditions.", "parameters": {"type": "dict", "properties": {"table": {"type": "string", "description": "Name of the table to query."}, "conditions": {"type": "array", "items": {"type": "dict", "properties": {"field": {"type": "string", "description": "The field to apply the condition."}, "operation": {"type": "string", "description": "The operation to be performed."}, "value": {"type": "string", "description": "The value to be compared."}}, "required": ["field", "operation", "value"]}, "description": "Conditions for the query."}}, "required": ["table", "conditions"]}}}, "model_result_raw": "[database.query(table='user_tb', conditions=[{'field': 'age', 'operation': 'gt', 'value': '>,25'}, {'field': 'job', 'operation': 'eq', 'value': '`engineer`'}])]", "model_result_decoded": [{"database.query": {"table": "user_tb", "conditions": [{"field": "age", "operation": "gt", "value": ">,25"}, {"field": "job", "operation": "eq", "value": "`engineer`"}]}}], "possible_answer": {"database.query": {"table": ["user"], "conditions": [[{"field": ["age"], "operation": [">"], "value": ["25"]}, {"field": ["job"], "operation": ["="], "value": ["engineer"]}]]}}}
{"id": 99, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'hours': 8. Expected one of [6]."], "error_type": "value_error:others", "prompt": {"question": "What will be the angle between the hour and minute hands of a clock at 6:30 PM?", "function": {"name": "calculate_clock_angle", "description": "Calculate the angle between the hour and minute hands of a clock at a given time.", "parameters": {"type": "dict", "properties": {"hours": {"type": "integer", "description": "The hour on the clock face."}, "minutes": {"type": "integer", "description": "The minutes on the clock face."}, "round_to": {"type": "integer", "description": "The number of decimal places to round the result to, default is 2."}}, "required": ["hours", "minutes"]}}}, "model_result_raw": "[calculate_clock_angle(hours=8, minutes=30)]", "model_result_decoded": [{"calculate_clock_angle": {"hours": 8, "minutes": 30}}], "possible_answer": {"calculate_clock_angle": {"hours": [6], "minutes": [30], "round_to": ["", 2]}}}
{"id": 100, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'start_range': 1. Expected one of [0]."], "error_type": "value_error:others", "prompt": {"question": "data/gorilla_openfunctions_v1_test_simple.json", "function": {"name": "plot_sine_wave", "description": "Plot a sine wave for a given frequency in a given range.", "parameters": {"type": "dict", "properties": {"start_range": {"type": "integer", "description": "Start of the range in radians."}, "end_range": {"type": "float", "description": "End of the range in radians."}, "frequency": {"type": "integer", "description": "Frequency of the sine wave in Hz."}, "amplitude": {"type": "integer", "description": "Amplitude of the sine wave. Default is 1."}, "phase_shift": {"type": "integer", "description": "Phase shift of the sine wave in radians. Default is 0."}}, "required": ["start_range", "end_range", "frequency"]}}}, "model_result_raw": "[plot_sine_wave(start_range=1, end_range=4, frequency=3)]", "model_result_decoded": [{"plot_sine_wave": {"start_range": 1, "end_range": 4, "frequency": 3}}], "possible_answer": {"plot_sine_wave": {"start_range": [0], "end_range": [6.283185307179586], "frequency": [5], "amplitude": [1, ""], "phase_shift": [0, ""]}}}
{"id": 102, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'to_unit': 'km_per_hour'. Expected one of ['km/h']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Calculate the speed of an object in km/h if it traveled 450 meters in 20 seconds.", "function": {"name": "calculate_speed", "description": "Calculate the speed of an object based on the distance travelled and the time taken.", "parameters": {"type": "dict", "properties": {"distance": {"type": "integer", "description": "The distance the object travelled in meters."}, "time": {"type": "integer", "description": "The time it took for the object to travel in seconds."}, "to_unit": {"type": "string", "description": "The unit in which the speed should be calculated, default is m/s."}}, "required": ["distance", "time"]}}}, "model_result_raw": "[calculate_speed(distance=450, time=20, to_unit='km_per_hour')]", "model_result_decoded": [{"calculate_speed": {"distance": 450, "time": 20, "to_unit": "km_per_hour"}}], "possible_answer": {"calculate_speed": {"distance": [450], "time": [20], "to_unit": ["km/h"]}}}
{"id": 103, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unterminated string literal (detected at line 1) (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"question": "What's the distance in milesfrom the Earth to the Moon?", "function": {"name": "calculate_distance", "description": "Calculate the distance between two celestial bodies.", "parameters": {"type": "dict", "properties": {"body1": {"type": "string", "description": "The first celestial body."}, "body2": {"type": "string", "description": "The second celestial body."}, "unit": {"type": "string", "description": "The unit of measurement, default is 'km'."}}, "required": ["body1", "body2"]}}}, "model_result_raw": "[calculate_distance(body1='function distance(earth, moon){\nreturn earth.distanceTo(moon)\n}', body2='function distance(obj1, obj2){return obj1.distanceFrom(obj2)\n}')]", "possible_answer": {"calculate_distance": {"body1": ["Earth"], "body2": ["Moon"], "unit": ["mi"]}}}
{"id": 104, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'polynomial'. Expected outer type array with inner type <class 'float'>. Parameter value: [3, 2, -4]."], "error_type": "type_error:nested", "prompt": {"question": "Calculate the area under the curve y=3x^2 + 2x - 4, between x = -1 and x = 2.", "function": {"name": "mathematics.calculate_area_under_curve", "description": "Calculate the area under the curve for a given polynomial function within a specified interval.", "parameters": {"type": "dict", "properties": {"polynomial": {"type": "array", "items": {"type": "float"}, "description": "The coefficients of the polynomial, in decreasing order of exponent, where the first element is the coefficient for x^n, the second element is the coefficient for x^(n-1), and so on. The last element is the constant term."}, "limits": {"type": "array", "items": {"type": "float"}, "description": "A list of two numbers specifying the lower and upper limit for the integration interval."}}, "required": ["polynomial", "limits"]}}}, "model_result_raw": "[mathematics.calculate_area_under_curve(polynomial=[3, 2, -4], limits=[-1, 2])]", "model_result_decoded": [{"mathematics.calculate_area_under_curve": {"polynomial": [3, 2, -4], "limits": [-1, 2]}}], "possible_answer": {"mathematics.calculate_area_under_curve": {"polynomial": [[3.0, 2.0, -4.0]], "limits": [[-1.0, 2.0]]}}}
{"id": 106, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'base': 1. Expected one of [3]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the power of 3 raised to the power 4.", "function": {"name": "math.power", "description": "Calculate the power of one number raised to another.", "parameters": {"type": "dict", "properties": {"base": {"type": "integer", "description": "The base number."}, "exponent": {"type": "integer", "description": "The exponent."}, "mod": {"type": "integer", "description": "The modulus. Default is 1. Calculates pow(base, exponent) % mod when provided."}}, "required": ["base", "exponent"]}}}, "model_result_raw": "[math.power(base=1, exponent=2)]", "model_result_decoded": [{"math.power": {"base": 1, "exponent": 2}}], "possible_answer": {"math.power": {"base": [3], "exponent": [4], "mod": ["", 1]}}}
{"id": 107, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'dataset': ''. Expected one of ['your_dataset_name']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Train a random forest classifier on dataset your_dataset_name with maximum depth of trees as 5, and number of estimators as 100.", "function": {"name": "train_random_forest_classifier", "description": "Train a Random Forest classifier with the specified parameters.", "parameters": {"type": "dict", "properties": {"dataset": {"type": "string", "description": "The dataset to train the classifier on."}, "max_depth": {"type": "integer", "description": "The maximum depth of the trees in the forest."}, "n_estimators": {"type": "integer", "description": "The number of trees in the forest."}}, "required": ["dataset", "max_depth", "n_estimators"]}}}, "model_result_raw": "[train_random_forest_classifier(dataset='', max_depth=5, n_estimators=100)]", "model_result_decoded": [{"train_random_forest_classifier": {"dataset": "", "max_depth": 5, "n_estimators": 100}}], "possible_answer": {"train_random_forest_classifier": {"dataset": ["your_dataset_name"], "max_depth": [5], "n_estimators": [100]}}}
{"id": 113, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'total_outcomes': 10. Expected one of [52]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the probability of drawing a king from a deck of cards.", "function": {"name": "calculate_probability", "description": "Calculate the probability of an event.", "parameters": {"type": "dict", "properties": {"total_outcomes": {"type": "integer", "description": "Total number of possible outcomes."}, "favorable_outcomes": {"type": "integer", "description": "Number of outcomes considered as 'successful'."}, "round_to": {"type": "integer", "description": "Number of decimal places to round the result to.", "default": 2}}, "required": ["total_outcomes", "favorable_outcomes"]}}}, "model_result_raw": "[calculate_probability(total_outcomes=10, favorable_outcomes=1, round_to=2)]", "model_result_decoded": [{"calculate_probability": {"total_outcomes": 10, "favorable_outcomes": 1, "round_to": 2}}], "possible_answer": {"calculate_probability": {"total_outcomes": [52], "favorable_outcomes": [4], "round_to": ["", 2]}}}
{"id": 117, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'total_outcomes': 1. Expected one of [52]."], "error_type": "value_error:others", "prompt": {"question": "What's the probability of drawing a king from a well shuffled standard deck of 52 cards?", "function": {"name": "probabilities.calculate_single", "description": "Calculate the probability of an event.", "parameters": {"type": "dict", "properties": {"total_outcomes": {"type": "integer", "description": "The total number of outcomes."}, "event_outcomes": {"type": "integer", "description": "The number of outcomes where the event occurs."}, "round": {"type": "integer", "description": "Round the answer to a specified number of decimal places. Defaults to 2."}}, "required": ["total_outcomes", "event_outcomes"]}}}, "model_result_raw": "[probabilities.calculate_single(total_outcomes=1, event_outcomes=1, round=1000000)]", "model_result_decoded": [{"probabilities.calculate_single": {"total_outcomes": 1, "event_outcomes": 1, "round": 1000000}}], "possible_answer": {"probabilities.calculate_single": {"total_outcomes": [52], "event_outcomes": [4], "round": [2, ""]}}}
{"id": 118, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'success_outcomes': 1. Expected one of [13]."], "error_type": "value_error:others", "prompt": {"question": "What are the odds of pulling a heart suit from a well-shuffled standard deck of 52 cards? Format it as ratio.", "function": {"name": "probability_of_event", "description": "Calculates the probability of an event.", "parameters": {"type": "dict", "properties": {"success_outcomes": {"type": "integer", "description": "The number of successful outcomes."}, "total_outcomes": {"type": "integer", "description": "The total number of possible outcomes."}, "format_as_ratio": {"type": "boolean", "description": "When true, formats the output as a ratio instead of a decimal. Default is false."}}, "required": ["success_outcomes", "total_outcomes"]}}}, "model_result_raw": "[probability_of_event(success_outcomes=1, total_outcomes=4)]", "model_result_decoded": [{"probability_of_event": {"success_outcomes": 1, "total_outcomes": 4}}], "possible_answer": {"probability_of_event": {"success_outcomes": [13], "total_outcomes": [52], "format_as_ratio": [true]}}}
{"id": 119, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Unexpected parameter: 'array_1'."], "error_type": "simple_function_checker:unexpected_param", "prompt": {"question": "Perform a two-sample t-test on my experiment data of Control [10, 15, 12, 14, 11] and Treated [18, 16, 17, 20, 22] group with alpha equals to 0.05", "function": {"name": "stats.t_test", "description": "Perform a two-sample t-test for two given arrays.", "parameters": {"type": "dict", "properties": {"array_1": {"type": "array", "items": {"type": "integer"}, "description": "First array of data."}, "array_2": {"type": "array", "items": {"type": "integer"}, "description": "Second array of data."}, "alpha": {"type": "float", "description": "Significance level for hypothesis testing."}}, "required": ["array_1", "array_2", "alpha"]}}}, "model_result_raw": "[stats.t_test(array_1=[10, 15, 12, 14, 11], array_2=[18, 16, 17, 20, 22], alpha=0.05)]", "model_result_decoded": [{"stats.t_test": {"array_1": [10, 15, 12, 14, 11], "array_2": [18, 16, 17, 20, 22], "alpha": 0.05}}], "possible_answer": {"stats.t_test": {"array": [[10, 15, 12, 14, 11]], "array_2": [[18, 16, 17, 20, 22]], "alpha": [0.05]}}}
{"id": 120, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Optional parameter 'significance_level' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Perform a hypothesis test for two independent samples with scores of Sample1: [22,33,42,12,34] and Sample2: [23,45,44,14,38] at a significance level of 0.05.", "function": {"name": "hypothesis_testing.ttest_ind", "description": "Conducts a hypothesis test for two independent samples.", "parameters": {"type": "dict", "properties": {"sample1": {"type": "array", "items": {"type": "integer"}, "description": "First set of observations (array of numbers)."}, "sample2": {"type": "array", "items": {"type": "integer"}, "description": "Second set of observations (array of numbers)."}, "significance_level": {"type": "float", "description": "Significance level of the test (default: 0.05)"}}, "required": ["sample1", "sample2"]}}}, "model_result_raw": "[hypothesis_testing.ttest_ind(sample1=[22, 33, 42, 12, 34], sample2=[23, 45, 44, 14, 38])]", "model_result_decoded": [{"hypothesis_testing.ttest_ind": {"sample1": [22, 33, 42, 12, 34], "sample2": [23, 45, 44, 14, 38]}}], "possible_answer": {"hypothesis_testing.ttest_ind": {"sample1": [[22, 33, 42, 12, 34]], "sample2": [[23, 45, 44, 14, 38]], "significance_level": [0.05]}}}
{"id": 121, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Optional parameter 'equal_variance' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Run a two sample T-test to compare the average of Group A [3, 4, 5, 6, 4] and Group B [7, 8, 9, 8, 7] assuming equal variance.", "function": {"name": "run_two_sample_ttest", "description": "Runs a two sample t-test for two given data groups.", "parameters": {"type": "dict", "properties": {"group1": {"type": "array", "items": {"type": "integer"}, "description": "First group of data points."}, "group2": {"type": "array", "items": {"type": "integer"}, "description": "Second group of data points."}, "equal_variance": {"type": "boolean", "description": "Assumption about whether the two samples have equal variance.", "default": true}}, "required": ["group1", "group2"]}}}, "model_result_raw": "[run_two_sample_ttest(group1=[3, 4, 5, 6, 4], group2=[7, 8, 9, 8, 7])]", "model_result_decoded": [{"run_two_sample_ttest": {"group1": [3, 4, 5, 6, 4], "group2": [7, 8, 9, 8, 7]}}], "possible_answer": {"run_two_sample_ttest": {"group1": [[3, 4, 5, 6, 4]], "group2": [[7, 8, 9, 8, 7]], "equal_variance": [true]}}}
{"id": 123, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'table': []. Expected one of [[[10, 20], [30, 40]]]."], "error_type": "value_error:list/tuple", "prompt": {"question": "Perform a Chi-Squared test for independence on a 2x2 contingency table [ [10, 20], [30, 40] ]", "function": {"name": "chi_squared_test", "description": "Performs a Chi-Squared test for independence on a 2x2 contingency table.", "parameters": {"type": "dict", "properties": {"table": {"type": "array", "items": {"type": "integer"}, "description": "A 2x2 contingency table presented in array form."}, "alpha": {"type": "float", "description": "Significance level for the Chi-Squared test. Default is 0.05."}}, "required": ["table"]}}}, "model_result_raw": "[chi_squared_test(table=[], alpha=0.05)]", "model_result_decoded": [{"chi_squared_test": {"table": [], "alpha": 0.05}}], "possible_answer": {"chi_squared_test": {"table": [[[10, 20], [30, 40]]], "alpha": [0.05, ""]}}}
{"id": 127, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'dataset_path': ''. Expected one of ['C:/data/cars.csv']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What is the coefficient of determination (R-squared) for a model using engine size and fuel economy variables to predict car_price with a dataset in path C:/data/cars.csv?", "function": {"name": "linear_regression.get_r_squared", "description": "Calculate the coefficient of determination of a regression model.", "parameters": {"type": "dict", "properties": {"dataset_path": {"type": "string", "description": "Path to the CSV dataset file."}, "independent_variables": {"type": "array", "items": {"type": "string"}, "description": "The independent variables to use in the regression model."}, "dependent_variable": {"type": "string", "description": "The dependent variable to predict in the regression model."}}, "required": ["dataset_path", "independent_variables", "dependent_variable"]}}}, "model_result_raw": "[linear_regression.get_r_squared(dataset_path='', independent_variables=['engine_size', 'fuel_economy'], dependent_variable='car_price')]", "model_result_decoded": [{"linear_regression.get_r_squared": {"dataset_path": "", "independent_variables": ["engine_size", "fuel_economy"], "dependent_variable": "car_price"}}], "possible_answer": {"linear_regression.get_r_squared": {"dataset_path": ["C:/data/cars.csv"], "independent_variables": [["engine_size", "fuel_economy"]], "dependent_variable": ["car_price"]}}}
{"id": 128, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'discount_rate'. Expected type float, got int. Parameter value: 10."], "error_type": "type_error:simple", "prompt": {"question": "Find the Net Present Value (NPV) of an investment, given cash_flows=[200,300,400,500], a discount rate of 10%, and an initial investment of $2000.", "function": {"name": "calculate_NPV", "description": "Calculate the NPV (Net Present Value) of an investment, considering a series of future cash flows, discount rate, and an initial investment.", "parameters": {"type": "dict", "properties": {"cash_flows": {"type": "array", "items": {"type": "integer"}, "description": "Series of future cash flows."}, "discount_rate": {"type": "float", "description": "The discount rate to use."}, "initial_investment": {"type": "integer", "description": "The initial investment. Default is 0 if not specified."}}, "required": ["cash_flows", "discount_rate"]}}}, "model_result_raw": "[calculate_NPV(cash_flows=[200, 300, 400, 500], discount_rate=10, initial_investment=2000)]", "model_result_decoded": [{"calculate_NPV": {"cash_flows": [200, 300, 400, 500], "discount_rate": 10, "initial_investment": 2000}}], "possible_answer": {"calculate_NPV": {"cash_flows": [[200, 300, 400, 500]], "discount_rate": [0.1], "initial_investment": [2000]}}}
{"id": 131, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'cash_flows': []. Expected one of [[-50000, 10000, 15000, 20000, 25000, 30000]]."], "error_type": "value_error:list/tuple", "prompt": {"question": "What's the NPV (Net Present Value) of a series of cash flows: [-50000, 10000, 15000, 20000, 25000, 30000] discounted at 8% annually?", "function": {"name": "finance_calculator.npv", "description": "Calculate the Net Present Value (NPV) for a series of cash flows discounted at a certain interest rate.", "parameters": {"type": "dict", "properties": {"cash_flows": {"type": "array", "items": {"type": "integer"}, "description": "A list of cash flows."}, "discount_rate": {"type": "float", "description": "The annual interest rate used to discount the cash flows."}, "years": {"type": "array", "items": {"type": "integer"}, "description": "A list of years when the cash flow occurs. Default is empty array."}}, "required": ["cash_flows", "discount_rate"]}}}, "model_result_raw": "[finance_calculator.npv(cash_flows=[], discount_rate=0.08)]", "model_result_decoded": [{"finance_calculator.npv": {"cash_flows": [], "discount_rate": 0.08}}], "possible_answer": {"finance_calculator.npv": {"cash_flows": [[-50000, 10000, 15000, 20000, 25000, 30000]], "discount_rate": [0.08], "years": ["", []]}}}
{"id": 132, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'principal': 7500. Expected one of [10000]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the compound interest for an initial principal amount of $10000, with an annual interest rate of 5% and the number of times interest applied per time period is 4 and the time the money is invested for 10 years.", "function": {"name": "calculate_compound_interest", "description": "Calculate compound interest for an initial principal amount.", "parameters": {"type": "dict", "properties": {"principal": {"type": "integer", "description": "The principal amount that the interest is applied to."}, "rate": {"type": "float", "description": "The annual interest rate. Enter as a decimal. E.g, 5% is 0.05"}, "time": {"type": "integer", "description": "The time the money is invested for in years."}, "n": {"type": "integer", "description": "The number of times that interest is compounded per time period. Default is 1."}}, "required": ["principal", "rate", "time"]}}}, "model_result_raw": "[calculate_compound_interest(principal=7500, rate=0.05, time=10, n=4)]", "model_result_decoded": [{"calculate_compound_interest": {"principal": 7500, "rate": 0.05, "time": 10, "n": 4}}], "possible_answer": {"calculate_compound_interest": {"principal": [10000], "rate": [0.05], "time": [10], "n": [4]}}}
{"id": 138, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'annual_growth_rate'. Expected type float, got int. Parameter value: 6."], "error_type": "type_error:simple", "prompt": {"question": "Calculate the projected return on a $5000 investment in ABC company's stock, if the expected annual growth rate is 6% and the holding period is 5 years.", "function": {"name": "calculate_stock_return", "description": "Calculate the projected return of a stock investment given the investment amount, the annual growth rate and holding period in years.", "parameters": {"type": "dict", "properties": {"investment_amount": {"type": "integer", "description": "The amount of money to invest."}, "annual_growth_rate": {"type": "float", "description": "The expected annual growth rate of the stock."}, "holding_period": {"type": "integer", "description": "The number of years you intend to hold the stock."}, "dividends": {"type": "boolean", "description": "Optional. True if the calculation should take into account potential dividends. Default is false."}}, "required": ["investment_amount", "annual_growth_rate", "holding_period"]}}}, "model_result_raw": "[calculate_stock_return(investment_amount=5000, annual_growth_rate=6, holding_period=5, dividends=False)]", "model_result_decoded": [{"calculate_stock_return": {"investment_amount": 5000, "annual_growth_rate": 6, "holding_period": 5, "dividends": false}}], "possible_answer": {"calculate_stock_return": {"investment_amount": [5000], "annual_growth_rate": [0.06], "holding_period": [5], "dividends": ["", false]}}}
{"id": 140, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'yearly_yield'. Expected type float, got int. Parameter value: 5."], "error_type": "type_error:simple", "prompt": {"question": "What is the estimated return on a mutual fund, given that it has a yearly yield of 5%, an investment amount of $2000 and a time period of 3 years?", "function": {"name": "estimate_mutual_fund_return", "description": "Calculate the estimated return on a mutual fund given the yearly yield, the investment amount and the time period.", "parameters": {"type": "dict", "properties": {"yearly_yield": {"type": "float", "description": "The yearly yield of the mutual fund as a percentage."}, "investment_amount": {"type": "integer", "description": "The initial investment amount in the mutual fund."}, "years": {"type": "integer", "description": "The time period for which the investment is made in years."}}, "required": ["yearly_yield", "investment_amount", "years"]}}}, "model_result_raw": "[estimate_mutual_fund_return(yearly_yield=5, investment_amount=2000, years=3)]", "model_result_decoded": [{"estimate_mutual_fund_return": {"yearly_yield": 5, "investment_amount": 2000, "years": 3}}], "possible_answer": {"estimate_mutual_fund_return": {"yearly_yield": [0.05], "investment_amount": [2000], "years": [3]}}}
{"id": 143, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'company_name': ''. Expected one of ['Amazon', 'AMZN']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the NASDAQ stock price for the company Amazon at closing March.11, 2022.", "function": {"name": "get_stock_price", "description": "Get the closing stock price for a specific company on a specified date.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "Name of the company."}, "date": {"type": "string", "description": "Date of when to get the stock price. Format: yyyy-mm-dd."}, "exchange": {"type": "string", "description": "Name of the stock exchange market where the company's stock is listed. Default is 'NASDAQ'"}}, "required": ["company_name", "date"]}}}, "model_result_raw": "[get_stock_price(company_name='', date='')]", "model_result_decoded": [{"get_stock_price": {"company_name": "", "date": ""}}], "possible_answer": {"get_stock_price": {"company_name": ["Amazon", "AMZN"], "date": ["2022-03-11"], "exchange": ["NASDAQ", ""]}}}
{"id": 144, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'company': ''. Expected one of ['AAPL']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "'Get stock price of Apple for the last 5 days in NASDAQ.'", "function": {"name": "get_stock_price", "description": "Retrieve the stock price for a specific company and time frame.", "parameters": {"type": "dict", "properties": {"company": {"type": "string", "description": "The ticker symbol of the company."}, "days": {"type": "integer", "description": "Number of past days for which the stock price is required."}, "exchange": {"type": "string", "description": "The stock exchange where the company is listed, default is NYSE"}}, "required": ["company", "days"]}}}, "model_result_raw": "[get_stock_price(company='', days=5)]", "model_result_decoded": [{"get_stock_price": {"company": "", "days": 5}}], "possible_answer": {"get_stock_price": {"company": ["AAPL"], "days": [5], "exchange": ["NASDAQ", ""]}}}
{"id": 145, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'indexes': ['^GSPC', '^DJI']. Expected one of [['S&P 500', 'Dow Jones']]."], "error_type": "value_error:list/tuple", "prompt": {"question": "Find the market performance of the S&P 500 and the Dow Jones over the past 5 days.", "function": {"name": "market_performance.get_data", "description": "Retrieve the market performance data for specified indexes over a specified time period.", "parameters": {"type": "dict", "properties": {"indexes": {"type": "array", "items": {"type": "string"}, "description": "Array of stock market indexes. Supported indexes are 'S&P 500', 'Dow Jones', 'NASDAQ', 'FTSE 100', 'DAX' etc."}, "days": {"type": "integer", "description": "Number of days in the past for which the performance data is required."}, "detailed": {"type": "boolean", "description": "Whether to return detailed performance data. If set to true, returns high, low, opening, and closing prices. If false, returns only closing prices. Default is false."}}, "required": ["indexes", "days"]}}}, "model_result_raw": "[market_performance.get_data(indexes=['^GSPC', '^DJI'], days=5)]", "model_result_decoded": [{"market_performance.get_data": {"indexes": ["^GSPC", "^DJI"], "days": 5}}], "possible_answer": {"market_performance.get_data": {"indexes": [["S&P 500", "Dow Jones"]], "days": [5], "detailed": ["", true, false]}}}
{"id": 146, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'interest_rate'. Expected type float, got int. Parameter value: 5."], "error_type": "type_error:simple", "prompt": {"question": "Calculate the compounded interest for an initial principal of $5000, annual interest rate of 5%, and compounding period of 10 years.", "function": {"name": "calculate_compounded_interest", "description": "Calculate the compounded interest for a given principal, interest rate, and period.", "parameters": {"type": "dict", "properties": {"principal": {"type": "integer", "description": "The initial principal."}, "interest_rate": {"type": "float", "description": "The annual interest rate."}, "period": {"type": "integer", "description": "The period in years."}, "compounding_frequency": {"type": "string", "description": "The frequency of compounding per year. Defaults to 'Annually'.", "enum": ["Annually", "Semiannually", "Quarterly", "Monthly", "Daily"]}}, "required": ["principal", "interest_rate", "period"]}}}, "model_result_raw": "[calculate_compounded_interest(principal=5000, interest_rate=5, period=10, compounding_frequency='Annually')]", "model_result_decoded": [{"calculate_compounded_interest": {"principal": 5000, "interest_rate": 5, "period": 10, "compounding_frequency": "Annually"}}], "possible_answer": {"calculate_compounded_interest": {"principal": [5000], "interest_rate": [0.05], "period": [10], "compounding_frequency": ["Annually", ""]}}}
{"id": 147, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'company': ''. Expected one of ['Amazon', 'AMZN']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What's the price of Amazon stock for the last 3 days?", "function": {"name": "stock_price", "description": "Get stock price data for a given company over a specified number of days.", "parameters": {"type": "dict", "properties": {"company": {"type": "string", "description": "The company name."}, "days": {"type": "integer", "description": "The number of previous days to retrieve data for."}, "data_type": {"type": "string", "description": "The type of price data to retrieve (e.g., 'Open', 'Close', 'High', 'Low'). Default is 'Close'."}}, "required": ["company", "days"]}}}, "model_result_raw": "[stock_price(company='', days=3)]", "model_result_decoded": [{"stock_price": {"company": "", "days": 3}}], "possible_answer": {"stock_price": {"company": ["Amazon", "AMZN"], "days": [3], "data_type": ["Close", ""]}}}
{"id": 148, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'companies': ['MSFT', '']. Expected one of [['Microsoft', 'Google']]."], "error_type": "value_error:list/tuple", "prompt": {"question": "Retrieve stock prices of Microsoft and Google for the last 2 weeks.", "function": {"name": "get_stock_prices", "description": "Retrieves stock prices for specified companies and duration.", "parameters": {"type": "dict", "properties": {"companies": {"type": "array", "items": {"type": "string"}, "description": "List of companies to retrieve stock prices for."}, "duration": {"type": "string", "description": "Time duration to retrieve stock prices for. E.g., '1 week', '2 weeks', '1 month', etc."}}, "required": ["companies", "duration"]}}}, "model_result_raw": "[get_stock_prices(companies=['MSFT', ''], duration='')]", "model_result_decoded": [{"get_stock_prices": {"companies": ["MSFT", ""], "duration": ""}}], "possible_answer": {"get_stock_prices": {"companies": [["Microsoft", "Google"]], "duration": ["2 weeks"]}}}
{"id": 150, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'company_names': ['Apple', ',', 'Microsoft']. Expected one of [['Apple', 'Microsoft'], [['Apple'], ['Microsoft']], ['AAPL', 'MSFT']]."], "error_type": "value_error:list/tuple", "prompt": {"question": "What's the current stock price of Apple and Microsoft?", "function": {"name": "get_stock_price", "description": "Retrieves the current stock price of the specified companies", "parameters": {"type": "dict", "properties": {"company_names": {"type": "array", "items": {"type": "string"}, "description": "The list of companies for which to retrieve the stock price."}}, "required": ["company_names"]}}}, "model_result_raw": "[get_stock_price(company_names=['Apple', ',', 'Microsoft'])]", "model_result_decoded": [{"get_stock_price": {"company_names": ["Apple", ",", "Microsoft"]}}], "possible_answer": {"get_stock_price": {"company_names": [["Apple", "Microsoft"], [["Apple"], ["Microsoft"]], ["AAPL", "MSFT"]]}}}
{"id": 152, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Optional parameter 'top_n' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Find the highest grossing banks in the U.S for year 2020.", "function": {"name": "highest_grossing_banks", "description": "Retrieve the highest grossing banks in a specified country and year.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country to get the data from."}, "year": {"type": "integer", "description": "The year to get the data from."}, "top_n": {"type": "integer", "description": "Top n banks in terms of grossing. Default is 5"}}, "required": ["country", "year"]}}}, "model_result_raw": "[highest_grossing_banks(country='USA', year=2020)]", "model_result_decoded": [{"highest_grossing_banks": {"country": "USA", "year": 2020}}], "possible_answer": {"highest_grossing_banks": {"country": ["U.S", "United States", "USA", "U.S."], "year": [2020], "top_n": [1]}}}
{"id": 156, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'interest_rate'. Expected type float, got int. Parameter value: 5."], "error_type": "type_error:simple", "prompt": {"question": "Calculate the future value of my investment of $1000 with an annual interest rate of 5% over 2 years.", "function": {"name": "calculate_future_value", "description": "Calculate the future value of an investment given the initial amount, interest rate, and investment duration.", "parameters": {"type": "dict", "properties": {"initial_investment": {"type": "integer", "description": "The initial investment amount."}, "interest_rate": {"type": "float", "description": "The annual interest rate in decimal form."}, "duration": {"type": "integer", "description": "The investment duration in years."}, "compounded": {"type": "integer", "description": "The number of times the interest is compounded per year. Default is 1 (annual compounding)."}}, "required": ["initial_investment", "interest_rate", "duration"]}}}, "model_result_raw": "[calculate_future_value(initial_investment=1000, interest_rate=5, duration=2)]", "model_result_decoded": [{"calculate_future_value": {"initial_investment": 1000, "interest_rate": 5, "duration": 2}}], "possible_answer": {"calculate_future_value": {"initial_investment": [1000], "interest_rate": [0.05], "duration": [2], "compounded": ["", 1]}}}
{"id": 157, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'case_number': '}, {'. Expected one of ['CA123456']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Look up details of a felony crime record for case number CA123456 in San Diego County", "function": {"name": "crime_record.get_record", "description": "Retrieve detailed felony crime records using a specific case number and location.", "parameters": {"type": "dict", "properties": {"case_number": {"type": "string", "description": "The case number related to the crime."}, "county": {"type": "string", "description": "The county in which the crime occurred."}, "details": {"type": "boolean", "description": "To get a detailed report, set as true. Defaults to false."}}, "required": ["case_number", "county"]}}}, "model_result_raw": "[crime_record.get_record(case_number='}, {', county='}, {', details=True)]", "model_result_decoded": [{"crime_record.get_record": {"case_number": "}, {", "county": "}, {", "details": true}}], "possible_answer": {"crime_record.get_record": {"case_number": ["CA123456"], "county": ["San Diego"], "details": [true]}}}
{"id": 159, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'New York'. Expected one of ['New York, NY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the information of criminal cases of Mr. X in New York between 2012 and 2015.", "function": {"name": "get_criminal_records", "description": "Retrieve the criminal records of a specific person in a specific area during a certain time period.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the person."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY"}, "from_year": {"type": "integer", "description": "The start year of the time frame."}, "to_year": {"type": "integer", "description": "The end year of the time frame."}}, "required": ["name", "location", "from_year", "to_year"]}}}, "model_result_raw": "[get_criminal_records(name='Mr. X', location='New York', from_year=2012, to_year=2015)]", "model_result_decoded": [{"get_criminal_records": {"name": "Mr. X", "location": "New York", "from_year": 2012, "to_year": 2015}}], "possible_answer": {"get_criminal_records": {"name": ["Mr. X"], "location": ["New York, NY"], "from_year": [2012], "to_year": [2015]}}}
{"id": 160, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'act_name': 'Criminal Law Amendment Act 2013'. Expected one of ['Criminal Law Amendment Act', 'Criminal Law Amendment']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Give me the details of Criminal Law Amendment Act of 2013.", "function": {"name": "get_act_details", "description": "Retrieve the details of a particular legal act based on its name and year of amendment if any.", "parameters": {"type": "dict", "properties": {"act_name": {"type": "string", "description": "The name of the act."}, "amendment_year": {"type": "integer", "description": "Year of amendment if any. If not provided, the latest amendment year will be considered."}}, "required": ["act_name", "amendment_year"]}}}, "model_result_raw": "[get_act_details(act_name='Criminal Law Amendment Act 2013', amendment_year=2013)]", "model_result_decoded": [{"get_act_details": {"act_name": "Criminal Law Amendment Act 2013", "amendment_year": 2013}}], "possible_answer": {"get_act_details": {"act_name": ["Criminal Law Amendment Act", "Criminal Law Amendment"], "amendment_year": [2013]}}}
{"id": 161, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'info_type': 'case_details'. Expected one of ['victim']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Who was the victim in the case docket numbered 2022/AL2562 in California?", "function": {"name": "get_case_info", "description": "Retrieve case details using a specific case docket number and court location.", "parameters": {"type": "dict", "properties": {"docket": {"type": "string", "description": "Docket number for the specific court case."}, "court": {"type": "string", "description": "Court in which the case was heard."}, "info_type": {"type": "string", "description": "Specify the information type needed for the case. i.e., victim, accused, verdict etc."}}, "required": ["docket", "court", "info_type"]}}}, "model_result_raw": "[get_case_info(docket='2022/AL2562', court='California', info_type='case_details')]", "model_result_decoded": [{"get_case_info": {"docket": "2022/AL2562", "court": "California", "info_type": "case_details"}}], "possible_answer": {"get_case_info": {"docket": ["2022/AL2562"], "court": ["California", "CA"], "info_type": ["victim"]}}}
{"id": 162, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'jurisdiction': ''. Expected one of ['California', 'CA']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find out the possible punishments for the crime of theft in California in detail.", "function": {"name": "crime_statute_lookup", "description": "Look up the criminal statutes in a specific jurisdiction to find possible punishments for a specific crime.", "parameters": {"type": "dict", "properties": {"jurisdiction": {"type": "string", "description": "The jurisdiction to search in, usually a state or country."}, "crime": {"type": "string", "description": "The crime to search for."}, "detail_level": {"type": "string", "enum": ["basic", "detailed"], "description": "How detailed of a report to return. Optional, default is 'basic'."}}, "required": ["jurisdiction", "crime"]}}}, "model_result_raw": "[crime_statute_lookup(jurisdiction='', crime='theft', detail_level='detailed')]", "model_result_decoded": [{"crime_statute_lookup": {"jurisdiction": "", "crime": "theft", "detail_level": "detailed"}}], "possible_answer": {"crime_statute_lookup": {"jurisdiction": ["California", "CA"], "crime": ["theft"], "detail_level": ["detailed"]}}}
{"id": 164, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'address': ''. Expected one of ['123 main street']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Provide me with the property records of my house located at 123 main street, with parcel number 1234567890 in Santa Clara county. Include owners information in the response.", "function": {"name": "property_records.get", "description": "Fetch property records based on location, parcel number and county.", "parameters": {"type": "dict", "properties": {"address": {"type": "string", "description": "Address of the property."}, "parcel_number": {"type": "string", "description": "Parcel number of the property."}, "county": {"type": "string", "description": "County where the property is located."}, "include_owner": {"type": "boolean", "description": "Include owner's name in the property record. Default is false.", "default": false}}, "required": ["address", "parcel_number", "county"]}}}, "model_result_raw": "[property_records.get(address='', parcel_number='', county='', include_owner=True)]", "model_result_decoded": [{"property_records.get": {"address": "", "parcel_number": "", "county": "", "include_owner": true}}], "possible_answer": {"property_records.get": {"address": ["123 main street"], "parcel_number": ["1234567890"], "county": ["Santa Clara"], "include_owner": [true]}}}
{"id": 166, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'Los_Angeles,CA'. Expected one of ['Los Angeles', 'Los Angeles, California']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Retrieve cases from 2020 about theft crimes in Los Angeles, California", "function": {"name": "civil_cases.retrieve", "description": "Retrieve civil cases based on given parameters, including year, crime type, and location.", "parameters": {"type": "dict", "properties": {"year": {"type": "integer", "description": "Year of the cases"}, "crime_type": {"type": "string", "description": "Type of the crime."}, "location": {"type": "string", "description": "Location of the case in the format of city name."}}, "required": ["year", "crime_type", "location"]}}}, "model_result_raw": "[civil_cases.retrieve(year=2020, crime_type='Theft', location='Los_Angeles,CA')]", "model_result_decoded": [{"civil_cases.retrieve": {"year": 2020, "crime_type": "Theft", "location": "Los_Angeles,CA"}}], "possible_answer": {"civil_cases.retrieve": {"year": [2020], "crime_type": ["theft"], "location": ["Los Angeles", "Los Angeles, California"]}}}
{"id": 167, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'city': ''. Expected one of ['Chicago, IL.', 'Chicago, IL']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find a lawyer specializing in divorce cases and charge fee less than 400 dollars per hour in Chicago.", "function": {"name": "lawyer.find_nearby", "description": "Locate nearby lawyers based on specific criteria like specialty, fee per hour and city.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city and state, e.g. Chicago, IL."}, "specialty": {"type": "array", "items": {"type": "string", "enum": ["Civil", "Divorce", "Immigration", "Business", "Criminal"]}, "description": "Specialization of the lawyer."}, "fee": {"type": "integer", "description": "Hourly fee charged by lawyer"}}, "required": ["city", "specialty", "fee"]}}}, "model_result_raw": "[lawyer.find_nearby(city='', specialty=['Divorce'], fee=400)]", "model_result_decoded": [{"lawyer.find_nearby": {"city": "", "specialty": ["Divorce"], "fee": 400}}], "possible_answer": {"lawyer.find_nearby": {"city": ["Chicago, IL.", "Chicago, IL"], "specialty": [["Divorce"]], "fee": [400]}}}
{"id": 169, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"question": "Search for ongoing lawsuits related to the company 'Google' filed after January 1, 2021 in California.", "function": {"name": "lawsuit_search", "description": "Search for lawsuits related to a specific company within a specific date range and location.", "parameters": {"type": "dict", "properties": {"company": {"type": "string", "description": "The company related to the lawsuit."}, "start_date": {"type": "string", "description": "Start of the date range for when the lawsuit was filed in the format of MM-DD-YYY."}, "location": {"type": "string", "description": "Location where the lawsuit was filed in the format of full state name."}, "status": {"type": "string", "enum": ["ongoing", "settled", "dismissed"], "description": "The status of the lawsuit. Default is 'ongoing'."}}, "required": ["company", "start_date", "location"]}}}, "model_result_raw": "[lawsuit_search(company='`google.com`', start_date=':date: '2021-01-01'{'', location=':string: 'California'')]", "possible_answer": {"lawsuit_search": {"company": ["Google", "GOOG"], "start_date": ["01-01-2021", "January 1, 2021"], "location": ["California"], "status": ["ongoing", ""]}}}
{"id": 171, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'subject': 'history'. Expected one of ['fraud']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find a historical law case about fraud from 2010 to 2015.", "function": {"name": "law_case_search.find_historical", "description": "Search for a historical law case based on specific criteria like the subject and year.", "parameters": {"type": "dict", "properties": {"subject": {"type": "string", "description": "The subject matter of the case, e.g., 'fraud'"}, "from_year": {"type": "integer", "description": "The start year for the range of the case. The case should happen after this year."}, "to_year": {"type": "integer", "description": "The end year for the range of the case. The case should happen before this year."}}, "required": ["subject", "from_year", "to_year"]}}}, "model_result_raw": "[law_case_search.find_historical(subject='history', from_year=2010, to_year=2015)]", "model_result_decoded": [{"law_case_search.find_historical": {"subject": "history", "from_year": 2010, "to_year": 2015}}], "possible_answer": {"law_case_search.find_historical": {"subject": ["fraud"], "from_year": [2010], "to_year": [2015]}}}
{"id": 173, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'case_id': ''. Expected one of ['R vs Adams', 'R_vs_Adams']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "How to obtain the detailed case information of the R vs Adams legal case?", "function": {"name": "legal_case.fetch", "description": "Fetch detailed legal case information from database.", "parameters": {"type": "dict", "properties": {"case_id": {"type": "string", "description": "The ID of the legal case."}, "details": {"type": "boolean", "description": "True if need the detail info. "}}, "required": ["case_id", "details"]}}}, "model_result_raw": "[legal_case.fetch(case_id='', details=False)]", "model_result_decoded": [{"legal_case.fetch": {"case_id": "", "details": false}}], "possible_answer": {"legal_case.fetch": {"case_id": ["R vs Adams", "R_vs_Adams"], "details": [true]}}}
{"id": 174, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'topic': ''. Expected one of ['land disputes']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find state law cases related to land disputes in the past 5 years from 2015 to 2021 in New York.", "function": {"name": "law_case_search", "description": "Search and retrieve law cases based on the topic, timeline, and location.", "parameters": {"type": "dict", "properties": {"topic": {"type": "string", "description": "The subject matter of the case."}, "year_range": {"type": "array", "items": {"type": "integer"}, "description": "The start and end year for searching cases."}, "location": {"type": "string", "description": "The location where the case is being heard."}, "judicial_system": {"type": "string", "description": "The specific judicial system in which to search (e.g. 'federal', 'state').", "default": "all"}}, "required": ["topic", "year_range", "location"]}}}, "model_result_raw": "[law_case_search(topic='', year_range=[2015, 2021], location='')]", "model_result_decoded": [{"law_case_search": {"topic": "", "year_range": [2015, 2021], "location": ""}}], "possible_answer": {"law_case_search": {"topic": ["land disputes"], "year_range": [[2015, 2021]], "location": ["New York"], "judicial_system": ["state"]}}}
{"id": 176, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'name': ''. Expected one of ['John Doe']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "How many months of experience a Lawyer John Doe has on handling Bankruptcy cases.", "function": {"name": "lawyer.get_experience", "description": "Retrieve months of experience of a Lawyer on handling certain type of law cases.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The full name of the Lawyer."}, "law_type": {"type": "string", "description": "The type of law case. eg. Bankruptcy"}}, "required": ["name", "law_type"]}}}, "model_result_raw": "[lawyer.get_experience(name='', law_type='')]", "model_result_decoded": [{"lawyer.get_experience": {"name": "", "law_type": ""}}], "possible_answer": {"lawyer.get_experience": {"name": ["John Doe"], "law_type": ["Bankruptcy"]}}}
{"id": 177, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'company_name': ''. Expected one of ['Apple Inc.']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find details of patent lawsuits involving the company 'Apple Inc.' from the year 2010.", "function": {"name": "lawsuit_details.find", "description": "Find details of lawsuits involving a specific company from a given year.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "Name of the company."}, "year": {"type": "integer", "description": "Year of the lawsuit."}, "case_type": {"type": "string", "description": "Type of the lawsuit, e.g., 'IPR', 'Patent', 'Commercial', etc. Default is 'all'."}}, "required": ["company_name", "year"]}}}, "model_result_raw": "[lawsuit_details.find(company_name='', year=0)]", "model_result_decoded": [{"lawsuit_details.find": {"company_name": "", "year": 0}}], "possible_answer": {"lawsuit_details.find": {"company_name": ["Apple Inc."], "year": [2010], "case_type": ["Patent", "IPR"]}}}
{"id": 178, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'status': 'open'. Expected one of ['all', '']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find all Patent lawsuit cases of Facebook in 2018.", "function": {"name": "get_lawsuit_cases", "description": "Retrieve all lawsuit cases related to a specific company during a particular year.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "year": {"type": "integer", "description": "The specific year to search for lawsuit cases."}, "status": {"type": "string", "enum": ["open", "closed", "all"], "description": "The status of the lawsuit cases to retrieve. If not specified, defaults to 'all'."}}, "required": ["company_name", "year"]}}}, "model_result_raw": "[get_lawsuit_cases(company_name='Facebook', year=2018, status='open')]", "model_result_decoded": [{"get_lawsuit_cases": {"company_name": "Facebook", "year": 2018, "status": "open"}}], "possible_answer": {"get_lawsuit_cases": {"company_name": ["Facebook"], "year": [2018], "status": ["all", ""]}}}
{"id": 181, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'company_name': ''. Expected one of ['Google']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the lawsuits filed against the company Google in California in the year 2020.", "function": {"name": "lawsuits_search", "description": "Search for lawsuits against a specific company within a specific time and location.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "location": {"type": "string", "description": "The location where the lawsuit was filed."}, "year": {"type": "integer", "description": "The year when the lawsuit was filed."}, "case_type": {"type": "string", "description": "The type of the case. Options include: 'civil', 'criminal', 'small_claims', etc. Default is 'all'."}}, "required": ["company_name", "location", "year"]}}}, "model_result_raw": "[lawsuits_search(company_name='', location='California', year=2020)]", "model_result_decoded": [{"lawsuits_search": {"company_name": "", "location": "California", "year": 2020}}], "possible_answer": {"lawsuits_search": {"company_name": ["Google"], "location": ["California", "CA"], "year": [2020], "case_type": ["", "all"]}}}
{"id": 183, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'case_number': ':123'. Expected one of ['XYZ123']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Retrieve all the lawsuit details for case number XYZ123", "function": {"name": "lawsuit_info", "description": "Retrieves details of a lawsuit given a case number", "parameters": {"type": "dict", "properties": {"case_number": {"type": "string", "description": "The unique identifier of the lawsuit case"}, "year": {"type": "integer", "description": "The year in which the lawsuit case was initiated. Default is latest year if not specified.", "optional": true}, "location": {"type": "string", "description": "The location or court jurisdiction where the case was filed. Default is 'all'.", "optional": true}}, "required": ["case_number"]}}}, "model_result_raw": "[lawsuit_info(case_number=':123', location='court_of_chicago')]", "model_result_decoded": [{"lawsuit_info": {"case_number": ":123", "location": "court_of_chicago"}}], "possible_answer": {"lawsuit_info": {"case_number": ["XYZ123"], "year": [""], "location": ["", "all"]}}}
{"id": 184, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'county': 'Santa Clara'. Expected one of ['Santa Clara County']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Search for current lawsuits filed against Apple in Santa Clara County.", "function": {"name": "lawsuit_search", "description": "Retrieve all lawsuits involving a particular entity from specified jurisdiction.", "parameters": {"type": "dict", "properties": {"entity": {"type": "string", "description": "The entity involved in lawsuits."}, "county": {"type": "string", "description": "The jurisdiction for the lawsuit search for example Alameda county."}, "state": {"type": "string", "description": "The state for the lawsuit search. Default is California."}}, "required": ["entity", "county"]}}}, "model_result_raw": "[lawsuit_search(entity='Apple', county='Santa Clara', state='CA')]", "model_result_decoded": [{"lawsuit_search": {"entity": "Apple", "county": "Santa Clara", "state": "CA"}}], "possible_answer": {"lawsuit_search": {"entity": ["Apple"], "county": ["Santa Clara County"], "state": ["California", ""]}}}
{"id": 185, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'closed_status': False. Expected one of [True]."], "error_type": "value_error:others", "prompt": {"question": "I need the details of the lawsuit case with case ID of 1234 and verify if it's already closed.", "function": {"name": "lawsuit.check_case", "description": "Verify the details of a lawsuit case and check its status using case ID.", "parameters": {"type": "dict", "properties": {"case_id": {"type": "integer", "description": "The identification number of the lawsuit case."}, "closed_status": {"type": "boolean", "description": "The status of the lawsuit case to be verified."}}, "required": ["case_id", "closed_status"]}}}, "model_result_raw": "[lawsuit.check_case(case_id=1234, closed_status=False)]", "model_result_decoded": [{"lawsuit.check_case": {"case_id": 1234, "closed_status": false}}], "possible_answer": {"lawsuit.check_case": {"case_id": [1234], "closed_status": [true]}}}
{"id": 186, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'duration': 3. Expected one of [72]."], "error_type": "value_error:others", "prompt": {"question": "What will be the weather in New York in the next 72 hours including the precipitation?", "function": {"name": "detailed_weather_forecast", "description": "Retrieve a detailed weather forecast for a specific location and duration including optional precipitation details.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city name that you want to get the weather for."}, "duration": {"type": "integer", "description": "Duration in hours for the detailed forecast."}, "include_precipitation": {"type": "boolean", "description": "Whether to include precipitation data in the forecast. Default is false."}}, "required": ["location", "duration"]}}}, "model_result_raw": "[detailed_weather_forecast(location='New York', duration=3)]", "model_result_decoded": [{"detailed_weather_forecast": {"location": "New York", "duration": 3}}], "possible_answer": {"detailed_weather_forecast": {"location": ["New York", "New York, USA"], "duration": [72], "include_precipitation": [true]}}}
{"id": 187, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'city': 'Tokyo, Japan'. Expected one of ['Tokyo']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What is the temperature in celsius and humidity level of Tokyo, Japan right now?", "function": {"name": "current_weather_condition", "description": "Get the current weather conditions of a specific city including temperature and humidity.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city that you want to get the current weather conditions for."}, "country": {"type": "string", "description": "The country of the city you specified."}, "measurement": {"type": "string", "description": "You can specify which unit to display the temperature in, 'c' for Celsius, 'f' for Fahrenheit. Default is 'c'."}}, "required": ["city", "country"]}}}, "model_result_raw": "[current_weather_condition(city='Tokyo, Japan', country='Japan')]", "model_result_decoded": [{"current_weather_condition": {"city": "Tokyo, Japan", "country": "Japan"}}], "possible_answer": {"current_weather_condition": {"city": ["Tokyo"], "country": ["Japan"], "measurement": ["c", ""]}}}
{"id": 188, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': '``Seattle, Washington``'. Expected one of ['Seattle', 'Seattle, Washington']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What's the current temperature and humidity in Seattle, Washington?", "function": {"name": "get_current_weather", "description": "Retrieves the current temperature and humidity for a specific location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city name to get the weather for."}, "include_temperature": {"type": "boolean", "description": "Whether to include the temperature in the result. Default is true."}, "include_humidity": {"type": "boolean", "description": "Whether to include the humidity in the result. Default is true."}}, "required": ["location"]}}}, "model_result_raw": "[get_current_weather(location='``Seattle, Washington``')]", "model_result_decoded": [{"get_current_weather": {"location": "``Seattle, Washington``"}}], "possible_answer": {"get_current_weather": {"location": ["Seattle", "Seattle, Washington"], "include_temperature": [true, ""], "include_humidity": [true, ""]}}}
{"id": 189, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': ''. Expected one of ['Miami']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What is the humidity level in Miami, Florida in the upcoming 7 days?", "function": {"name": "weather.humidity_forecast", "description": "Retrieve a humidity forecast for a specific location and time frame.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the humidity for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}, "min_humidity": {"type": "integer", "description": "Minimum level of humidity (in percentage) to filter the result. Default is 0."}}, "required": ["location", "days"]}}}, "model_result_raw": "[weather.humidity_forecast(location='', days=7)]", "model_result_decoded": [{"weather.humidity_forecast": {"location": "", "days": 7}}], "possible_answer": {"weather.humidity_forecast": {"location": ["Miami"], "days": [7], "min_humidity": ["", 0]}}}
{"id": 190, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': ''. Expected one of ['New York', 'New York, USA']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get weather information for New York, USA for the next 3 days with details.", "function": {"name": "weather_forecast_detailed", "description": "Retrieve a detailed weather forecast for a specific city like Boston and time frame.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the weather for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}, "details": {"type": "boolean", "description": "Provide detailed weather information or not.", "default": false}}, "required": ["location", "days"]}}}, "model_result_raw": "[weather_forecast_detailed(location='', days=2, details=True)]", "model_result_decoded": [{"weather_forecast_detailed": {"location": "", "days": 2, "details": true}}], "possible_answer": {"weather_forecast_detailed": {"location": ["New York", "New York, USA"], "days": [3], "details": [true]}}}
{"id": 191, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'park_name': ''. Expected one of ['Yellowstone', 'Yellowstone National Park']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What's the elevation and area of Yellowstone National Park?", "function": {"name": "park_information", "description": "Retrieve the basic information such as elevation and area of a national park.", "parameters": {"type": "dict", "properties": {"park_name": {"type": "string", "description": "The name of the national park."}, "information": {"type": "array", "items": {"type": "string", "enum": ["Elevation", "Area", "Location", "Established Year"]}, "description": "The type of information you want about the park."}}, "required": ["park_name", "information"]}}}, "model_result_raw": "[park_information(park_name='', information=[])]", "model_result_decoded": [{"park_information": {"park_name": "", "information": []}}], "possible_answer": {"park_information": {"park_name": ["Yellowstone", "Yellowstone National Park"], "information": [["Elevation", "Area"], ["Area", "Elevation"]]}}}
{"id": 193, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'point1': [40.7128, 74.006]. Expected one of [[40.7128, -74.006]]."], "error_type": "value_error:list/tuple", "prompt": {"question": "Calculate the slope gradient in degree between two points on a landscape with coordinates (40.7128, -74.0060) and (34.0522, -118.2437).", "function": {"name": "calculate_slope_gradient", "description": "Calculate the slope gradient between two geographical coordinates.", "parameters": {"type": "dict", "properties": {"point1": {"type": "array", "items": {"type": "float"}, "description": "The geographic coordinates for the first point [Latitude, Longitude]."}, "point2": {"type": "array", "items": {"type": "float"}, "description": "The geographic coordinates for the second point [Latitude, Longitude]."}, "unit": {"type": "string", "enum": ["degree", "percent", "ratio"], "description": "The unit for the slope gradient. Default is 'degree'."}}, "required": ["point1", "point2"]}}}, "model_result_raw": "[calculate_slope_gradient(point1=[40.7128, 74.006], point2=[34.0522, -118.2437])]", "model_result_decoded": [{"calculate_slope_gradient": {"point1": [40.7128, 74.006], "point2": [34.0522, -118.2437]}}], "possible_answer": {"calculate_slope_gradient": {"point1": [[40.7128, -74.006]], "point2": [[34.0522, -118.2437]], "unit": ["degree", ""]}}}
{"id": 194, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': ''. Expected one of ['Toronto']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the best local nurseries in Toronto with a good variety of annual plants.", "function": {"name": "local_nursery.find", "description": "Locate local nurseries based on location and plant types availability.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city or locality where the nursery needs to be located."}, "plant_types": {"type": "array", "items": {"type": "string", "enum": ["Annual", "Perennial", "Shrub", "Tree", "Herbs", "Fruits"]}, "description": "Type of plants the nursery should provide."}}, "required": ["location", "plant_types"]}}}, "model_result_raw": "[local_nursery.find(location='', plant_types=[])]", "model_result_decoded": [{"local_nursery.find": {"location": "", "plant_types": []}}], "possible_answer": {"local_nursery.find": {"location": ["Toronto"], "plant_types": [["Annual"]]}}}
{"id": 195, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'slope_type': ': str, '. Expected one of ['hill', 'steep', 'moderate']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What are the top three plants suitable for a hill slope in terms of erosion prevention?", "function": {"name": "get_plants_for_slope", "description": "Retrieve the list of plants suitable for slope based on erosion control ability.", "parameters": {"type": "dict", "properties": {"slope_type": {"type": "string", "description": "The type of slope like steep, moderate etc."}, "num_results": {"type": "integer", "description": "The number of top results needed. Default is 5."}}, "required": ["slope_type", "num_results"]}}}, "model_result_raw": "[get_plants_for_slope(slope_type=': str, ', num_results=10)]", "model_result_decoded": [{"get_plants_for_slope": {"slope_type": ": str, ", "num_results": 10}}], "possible_answer": {"get_plants_for_slope": {"slope_type": ["hill", "steep", "moderate"], "num_results": [3]}}}
{"id": 197, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': ''. Expected one of ['London']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What is the air quality index in London 2022/08/16?", "function": {"name": "air_quality", "description": "Retrieve the air quality index for a specific location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the air quality index for."}, "date": {"type": "string", "description": "The date you want to get the air quality index for. Default is today."}}, "required": ["location", "date"]}}}, "model_result_raw": "[air_quality(location='', date='')]", "model_result_decoded": [{"air_quality": {"location": "", "date": ""}}], "possible_answer": {"air_quality": {"location": ["London"], "date": ["2022-08-16", "16/08/2022", "Aug.16,2022", "2022/08/16"]}}}
{"id": 198, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': ''. Expected one of ['San Diego']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the air quality index in San Diego at 12pm.", "function": {"name": "get_air_quality_index", "description": "Retrieve the air quality index at a specified location and time.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location to get the air quality index for."}, "time": {"type": "string", "description": "The specific time to check the air quality. Default is the current time."}}, "required": ["location", "time"]}}}, "model_result_raw": "[get_air_quality_index(location='', time='')]", "model_result_decoded": [{"get_air_quality_index": {"location": "", "time": ""}}], "possible_answer": {"get_air_quality_index": {"location": ["San Diego"], "time": ["12pm", "12:00"]}}}
{"id": 200, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax. Perhaps you forgot a comma? (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"question": "Find air quality index in San Jose for next three days.", "function": {"name": "environmental_data.air_quality_index", "description": "Retrieves Air Quality Index (AQI) for specified location over a number of days.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "Name of the city or town to retrieve air quality index for."}, "days": {"type": "integer", "description": "Number of days for which to retrieve data. If not provided, default to today."}}, "required": ["location"]}}}, "model_result_raw": "[environmental_data.air_quality_index(location=':'San Jose, CA, USA'', days=3)]", "possible_answer": {"environmental_data.air_quality_index": {"location": ["San Jose", "'San Jose'"], "days": [3]}}}
{"id": 201, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'distance': 25. Expected one of [12000]."], "error_type": "value_error:others", "prompt": {"question": "How much CO2 is produced annually by a gas-fueled car that travels 12,000 miles per year, with fuel efficiency of 25% ?", "function": {"name": "calculate_emissions", "description": "Calculates the annual carbon dioxide emissions produced by a vehicle based on the distance traveled, the fuel type and the fuel efficiency of the vehicle.", "parameters": {"type": "dict", "properties": {"distance": {"type": "integer", "description": "The distance travelled in miles."}, "fuel_type": {"type": "string", "description": "Type of fuel used by the vehicle."}, "fuel_efficiency": {"type": "float", "description": "The vehicle's fuel efficiency in miles per gallon."}, "efficiency_reduction": {"type": "integer", "description": "The percentage decrease in fuel efficiency per year (optional). Default is 0"}}, "required": ["distance", "fuel_type", "fuel_efficiency"]}}}, "model_result_raw": "[calculate_emissions(distance=25, fuel_type='gas', fuel_efficiency=0.25, efficiency_reduction=0)]", "model_result_decoded": [{"calculate_emissions": {"distance": 25, "fuel_type": "gas", "fuel_efficiency": 0.25, "efficiency_reduction": 0}}], "possible_answer": {"calculate_emissions": {"distance": [12000], "fuel_type": ["gas"], "fuel_efficiency": ["", 20.0], "efficiency_reduction": [0, ""]}}}
{"id": 202, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'species': './Species/PandaSpecies.py'. Expected one of ['panda', 'pandas']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Estimate the population of pandas in the wild in China.", "function": {"name": "estimate_population", "description": "Estimate the population of a particular species in a given country.", "parameters": {"type": "dict", "properties": {"species": {"type": "string", "description": "The species for which population needs to be estimated."}, "country": {"type": "string", "description": "The country where the species lives."}, "year": {"type": "integer", "description": "The year for which population estimate is sought. Default is the current year."}}, "required": ["species", "country"]}}}, "model_result_raw": "[estimate_population(species='./Species/PandaSpecies.py', country='china', year=2021)]", "model_result_decoded": [{"estimate_population": {"species": "./Species/PandaSpecies.py", "country": "china", "year": 2021}}], "possible_answer": {"estimate_population": {"species": ["panda", "pandas"], "country": ["China", "CN"], "year": ["", 2024]}}}
{"id": 203, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'usage_duration': 60. Expected one of [3]."], "error_type": "value_error:others", "prompt": {"question": "How many greenhouse gas emissions would I save if I switched to renewable energy sources for 3 months in California?", "function": {"name": "calculate_emission_savings", "description": "Calculate potential greenhouse gas emissions saved by switching to renewable energy sources.", "parameters": {"type": "dict", "properties": {"energy_type": {"type": "string", "description": "Type of the renewable energy source."}, "usage_duration": {"type": "integer", "description": "Usage duration in months."}, "region": {"type": "string", "description": "The region where you use energy. Default is 'Texas'."}}, "required": ["energy_type", "usage_duration"]}}}, "model_result_raw": "[calculate_emission_savings(energy_type='renewable', usage_duration=60, region='california')]", "model_result_decoded": [{"calculate_emission_savings": {"energy_type": "renewable", "usage_duration": 60, "region": "california"}}], "possible_answer": {"calculate_emission_savings": {"energy_type": ["renewable"], "usage_duration": [3], "region": ["California", "CA"]}}}
{"id": 204, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': ':str'. Expected one of ['Chicago']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Can you find me the latest information about air quality index and pollution data for Chicago?", "function": {"name": "get_air_quality", "description": "Retrieve real-time air quality and pollution data for a specific location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the air quality data for."}, "detail": {"type": "boolean", "description": "If true, additional data like PM2.5, PM10, ozone levels, and pollution sources will be retrieved. Default is false."}, "historical": {"type": "string", "description": "Optional date (in 'YYYY-MM-DD' format) to retrieve historical data.", "default": "today"}}, "required": ["location"]}}}, "model_result_raw": "[get_air_quality(location=':str')]", "model_result_decoded": [{"get_air_quality": {"location": ":str"}}], "possible_answer": {"get_air_quality": {"location": ["Chicago"], "detail": [true], "historical": ["", "today"]}}}
{"id": 205, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': ''. Expected one of ['Seattle', 'Seattle, WA']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find restaurants near me within 10 miles that offer Chinese cuisine in Seattle.", "function": {"name": "restaurant.find_nearby", "description": "Locate nearby restaurants based on specific criteria like cuisine type.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Seattle, WA"}, "cuisine": {"type": "string", "description": "Preferred type of cuisine in restaurant."}, "max_distance": {"type": "integer", "description": "Maximum distance (in miles) within which to search for restaurants. Default is 5."}}, "required": ["location", "cuisine"]}}}, "model_result_raw": "[restaurant.find_nearby(location='', cuisine='chiinese')]", "model_result_decoded": [{"restaurant.find_nearby": {"location": "", "cuisine": "chiinese"}}], "possible_answer": {"restaurant.find_nearby": {"location": ["Seattle", "Seattle, WA"], "cuisine": ["Chinese"], "max_distance": [10]}}}
{"id": 206, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'start_location': ''. Expected one of ['Boston']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find out the current traffic situation from Boston driving to New York.", "function": {"name": "get_traffic_info", "description": "Retrieve current traffic conditions for a specified route.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "The starting point of the route."}, "end_location": {"type": "string", "description": "The destination of the route."}, "mode": {"type": "string", "enum": ["driving", "walking", "bicycling", "transit"], "description": "Preferred method of transportation, default to 'driving'."}}, "required": ["start_location", "end_location"]}}}, "model_result_raw": "[get_traffic_info(start_location='', end_location='')]", "model_result_decoded": [{"get_traffic_info": {"start_location": "", "end_location": ""}}], "possible_answer": {"get_traffic_info": {"start_location": ["Boston"], "end_location": ["New York", "NYC"], "mode": ["driving", ""]}}}
{"id": 207, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': ''. Expected one of ['London', 'London, UK']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the nearest park with a tennis court in London.", "function": {"name": "parks.find_nearby", "description": "Locate nearby parks based on specific criteria like tennis court availability.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. London, UK"}, "amenities": {"type": "array", "items": {"type": "string", "enum": ["Tennis Court", "Picnic Area", "Playground", "Running Track"]}, "description": "Preferred amenities in park. Default is ['Running Track']"}}, "required": ["location"]}}}, "model_result_raw": "[parks.find_nearby(location='')]", "model_result_decoded": [{"parks.find_nearby": {"location": ""}}], "possible_answer": {"parks.find_nearby": {"location": ["London", "London, UK"], "amenities": [["Tennis Court"]]}}}
{"id": 208, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax. Perhaps you forgot a comma? (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"question": "Get the shortest driving distance between New York, USA and Miami, USA.", "function": {"name": "calculate_shortest_distance", "description": "Calculate the shortest driving distance between two locations.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "The starting location for the drive."}, "end_location": {"type": "string", "description": "The destination location for the drive."}, "route_preference": {"type": "string", "enum": ["Shortest", "Scenic"], "description": "The preferred type of route."}}, "required": ["start_location", "end_location", "route_preference"]}}}, "model_result_raw": "[calculate_shortest_distance(start_location=':'New York'', end_location=':'Miami'}  # a dictionary representing the origin and the destination.  Function calls: 1) get_distance_matrix 2) Calculate shortest distance using Dijkstra algorithm from each starting point to ending point. 3) subset and slice the result based on start and end locations. ', route_preference='Shortest')]", "possible_answer": {"calculate_shortest_distance": {"start_location": ["New York, USA", "New York City", "New York City, NY", "NYC", "NY"], "end_location": ["Miami, USA", "Miami", "Miami, FL", "FL"], "route_preference": ["Shortest"]}}}
{"id": 209, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'end': ':Los Angeles'. Expected one of ['Los Angeles', 'LA']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get me the directions from New York to Los Angeles avoiding highways and toll roads.", "function": {"name": "map_service.get_directions", "description": "Retrieve directions from a starting location to an ending location, including options for route preferences.", "parameters": {"type": "dict", "properties": {"start": {"type": "string", "description": "Starting location for the route."}, "end": {"type": "string", "description": "Ending location for the route."}, "avoid": {"type": "array", "items": {"type": "string", "enum": ["tolls", "highways", "ferries"]}, "description": "Route features to avoid. Default is ['highways', 'ferries']"}}, "required": ["start", "end"]}}}, "model_result_raw": "[map_service.get_directions(start='New York', end=':Los Angeles', avoid=['highways', 'tolls'])]", "model_result_decoded": [{"map_service.get_directions": {"start": "New York", "end": ":Los Angeles", "avoid": ["highways", "tolls"]}}], "possible_answer": {"map_service.get_directions": {"start": ["New York", "NYC"], "end": ["Los Angeles", "LA"], "avoid": [["highways", "tolls"]]}}}
{"id": 210, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'facilities': ['Wi-Fi']. Expected one of [['Fiction', 'Wi-Fi'], ['Wi-Fi', 'Fiction']]."], "error_type": "value_error:list/tuple", "prompt": {"question": "Locate the nearest public library in Boston, Massachusetts with English fiction section and free Wi-Fi.", "function": {"name": "public_library.find_nearby", "description": "Locate nearby public libraries based on specific criteria like English fiction availability and Wi-Fi.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Boston, MA"}, "facilities": {"type": "array", "items": {"type": "string", "enum": ["Wi-Fi", "Reading Room", "Fiction", "Children Section", "Cafe"]}, "description": "Facilities and sections in public library."}}, "required": ["location", "facilities"]}}}, "model_result_raw": "[public_library.find_nearby(location='Boston Massachusetts', facilities=['Wi-Fi'])]", "model_result_decoded": [{"public_library.find_nearby": {"location": "Boston Massachusetts", "facilities": ["Wi-Fi"]}}], "possible_answer": {"public_library.find_nearby": {"location": ["Boston, MA", "Boston, Massachusetts"], "facilities": [["Fiction", "Wi-Fi"], ["Wi-Fi", "Fiction"]]}}}
{"id": 212, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unterminated string literal (detected at line 1) (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"question": "Send an email to John Doe at john.doe@example.com with the subject 'Meeting' and body 'Let's meet at 10 AM tomorrow'.", "function": {"name": "send_email", "description": "Send an email to the specified email address.", "parameters": {"type": "dict", "properties": {"to": {"type": "string", "description": "The email address to send to."}, "subject": {"type": "string", "description": "The subject of the email."}, "body": {"type": "string", "description": "The body content of the email."}, "cc": {"type": "string", "description": "The email address to carbon copy. Default is empty if not specified."}, "bcc": {"type": "string", "description": "The email address to blind carbon copy. Default is empty if not specified."}}, "required": ["to", "subject", "body"]}}}, "model_result_raw": "[send_email(to='john.doe@example.com', subject='Meeting', body='Let's meet at 10 AM tomorrow')]", "possible_answer": {"send_email": {"to": ["john.doe@example.com"], "subject": ["Meeting"], "body": ["Let's meet at 10 AM tomorrow", "Let's meet at 10 AM tomorrow."], "cc": [""], "bcc": [""]}}}
{"id": 213, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'detail_level': 'full'. Expected one of ['detailed']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Give me detail information about stocks of Apple Inc.", "function": {"name": "get_stock_info", "description": "Retrieves information about a specific stock based on company's name.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "detail_level": {"type": "string", "description": "Level of detail for stock information. Can be 'summary' or 'detailed'."}, "market": {"type": "string", "description": "The stock market of interest. Default is 'NASDAQ'"}}, "required": ["company_name", "detail_level"]}}}, "model_result_raw": "[get_stock_info(company_name='Apple Inc.', detail_level='full')]", "model_result_decoded": [{"get_stock_info": {"company_name": "Apple Inc.", "detail_level": "full"}}], "possible_answer": {"get_stock_info": {"company_name": ["Apple Inc."], "detail_level": ["detailed"], "market": ["", "NASDAQ"]}}}
{"id": 214, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Optional parameter 'direct_flight' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Book a direct flight from San Francisco to London for 2022-04-27 afternoon", "function": {"name": "flight.book", "description": "Book a direct flight for a specific date and time from departure location to destination location.", "parameters": {"type": "dict", "properties": {"departure_location": {"type": "string", "description": "The location you are departing from."}, "destination_location": {"type": "string", "description": "The location you are flying to."}, "date": {"type": "string", "description": "The date of the flight. Accepts standard date format e.g., 2022-04-28."}, "time": {"type": "string", "description": "Preferred time of flight. Default is 'morning'."}, "direct_flight": {"type": "boolean", "description": "If set to true, only direct flights will be searched. Default is false."}}, "required": ["departure_location", "destination_location", "date"]}}}, "model_result_raw": "[flight.book(departure_location='San Francisco', destination_location='London', date='2022-04-27', time='afternoon')]", "model_result_decoded": [{"flight.book": {"departure_location": "San Francisco", "destination_location": "London", "date": "2022-04-27", "time": "afternoon"}}], "possible_answer": {"flight.book": {"departure_location": ["San Francisco", "SF"], "destination_location": ["London"], "date": ["2022-04-27", "04/27/2022", "Apr 27, 2022"], "time": ["afternoon", ""], "direct_flight": [true]}}}
{"id": 215, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': ''. Expected one of ['New York', 'New York, NY', 'NYC']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Search for upcoming month rock concerts in New York.", "function": {"name": "event_finder.find_upcoming", "description": "Find upcoming events of a specific genre in a given location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state where the search will take place, e.g. New York, NY."}, "genre": {"type": "string", "description": "The genre of events."}, "days_ahead": {"type": "integer", "description": "The number of days from now to include in the search.", "default": 7}}, "required": ["location", "genre"]}}}, "model_result_raw": "[event_finder.find_upcoming(location='', genre='rock')]", "model_result_decoded": [{"event_finder.find_upcoming": {"location": "", "genre": "rock"}}], "possible_answer": {"event_finder.find_upcoming": {"location": ["New York", "New York, NY", "NYC"], "genre": ["Rock", "rock"], "days_ahead": [30]}}}
{"id": 216, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'title': ''. Expected one of ['Interstellar']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Give me a brief on movie 'Interstellar'", "function": {"name": "movie_details.brief", "description": "This function retrieves a brief about a specified movie.", "parameters": {"type": "dict", "properties": {"title": {"type": "string", "description": "Title of the movie"}, "extra_info": {"type": "boolean", "description": "Option to get additional information like Director, Cast, Awards etc.", "default": "false"}}, "required": ["title"]}}}, "model_result_raw": "[movie_details.brief(title='', extra_info=False)]", "model_result_decoded": [{"movie_details.brief": {"title": "", "extra_info": false}}], "possible_answer": {"movie_details.brief": {"title": ["Interstellar"], "extra_info": ["", false]}}}
{"id": 217, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'text': ''. Expected one of [\"I love the food here! It's always fresh and delicious.\"]. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Analyze the sentiment of a customer review 'I love the food here! It's always fresh and delicious.'.", "function": {"name": "sentiment_analysis", "description": "Perform sentiment analysis on a given piece of text.", "parameters": {"type": "dict", "properties": {"text": {"type": "string", "description": "The text on which to perform sentiment analysis."}, "language": {"type": "string", "description": "The language in which the text is written."}}, "required": ["text", "language"]}}}, "model_result_raw": "[sentiment_analysis(text='', language='eng')]", "model_result_decoded": [{"sentiment_analysis": {"text": "", "language": "eng"}}], "possible_answer": {"sentiment_analysis": {"text": ["I love the food here! It's always fresh and delicious."], "language": ["english", "English", "en"]}}}
{"id": 218, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'data_source': './data/myfMRI.nii'. Expected one of ['~/data/myfMRI.nii']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Analyze my fMRI data in ~/data/myfMRI.nii from a multi-band sequence, that is smoothed at 6mm with an isotropic voxel size of 2mm.", "function": {"name": "fMRI.analyze", "description": "This function takes in fMRI data to output analyzed data.", "parameters": {"type": "dict", "properties": {"data_source": {"type": "string", "description": "The path where the data is stored."}, "sequence_type": {"type": "string", "description": "Type of fMRI sequence"}, "smooth": {"type": "integer", "description": "Spatial smoothing FWHM. In mm."}, "voxel_size": {"type": "integer", "description": "Size of isotropic voxels in mm.", "default": 3}}, "required": ["data_source", "sequence_type", "smooth"]}}}, "model_result_raw": "[fMRI.analyze(data_source='./data/myfMRI.nii', sequence_type='multi_band', smooth=6, voxel_size=2)]", "model_result_decoded": [{"fMRI.analyze": {"data_source": "./data/myfMRI.nii", "sequence_type": "multi_band", "smooth": 6, "voxel_size": 2}}], "possible_answer": {"fMRI.analyze": {"data_source": ["~/data/myfMRI.nii"], "sequence_type": ["multi-band"], "smooth": [6], "voxel_size": [2]}}}
{"id": 219, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'patient_id': ''. Expected one of ['546382']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Given patient with id 546382, retrieve their brain MRI report with the status 'concluded'.", "function": {"name": "patient.get_mri_report", "description": "Fetch the brain MRI report of the patient for a given status.", "parameters": {"type": "dict", "properties": {"patient_id": {"type": "string", "description": "The patient identifier."}, "mri_type": {"type": "string", "description": "Type of the MRI. Default to be 'brain'.", "enum": ["brain", "spinal", "chest", "abdominal"]}, "status": {"type": "string", "description": "Status of the report, could be 'in progress', 'concluded' or 'draft'.", "enum": ["in progress", "concluded", "draft"]}}, "required": ["patient_id", "status"]}}}, "model_result_raw": "[patient.get_mri_report(patient_id='', mri_type='brain', status='concluded')]", "model_result_decoded": [{"patient.get_mri_report": {"patient_id": "", "mri_type": "brain", "status": "concluded"}}], "possible_answer": {"patient.get_mri_report": {"patient_id": ["546382"], "mri_type": ["brain"], "status": ["concluded"]}}}
{"id": 220, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'neuron_type': 'GABAergic'. Expected one of ['GABA']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What are the coordinates of the neuron in a rat's all part of the brain that produces GABA neurotransmitters?", "function": {"name": "get_neuron_coordinates", "description": "Retrieve the coordinates of the specified neuron in the rat's brain.", "parameters": {"type": "dict", "properties": {"neuron_type": {"type": "string", "description": "Type of neuron to find. For instance, GABA, Glutamate, etc."}, "brain_region": {"type": "string", "description": "The region of the brain to consider.", "default": "All"}}, "required": ["neuron_type", "brain_region"]}}}, "model_result_raw": "[get_neuron_coordinates(neuron_type='GABAergic', brain_region='rat_hippocampus')]", "model_result_decoded": [{"get_neuron_coordinates": {"neuron_type": "GABAergic", "brain_region": "rat_hippocampus"}}], "possible_answer": {"get_neuron_coordinates": {"neuron_type": ["GABA"], "brain_region": ["All", "all part of the brain", "entire brain"]}}}
{"id": 222, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': ':London'. Expected one of ['London']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What will be the population growth in London over the next five years?", "function": {"name": "population_growth_estimate", "description": "Estimate the future population growth of a specific location over a specified time period.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to estimate the population growth for."}, "years": {"type": "integer", "description": "Number of years into the future for the estimate."}, "rate": {"type": "float", "description": "Expected annual growth rate in percentage. Default is 1.2."}}, "required": ["location", "years"]}}}, "model_result_raw": "[population_growth_estimate(location=':London', years=5)]", "model_result_decoded": [{"population_growth_estimate": {"location": ":London", "years": 5}}], "possible_answer": {"population_growth_estimate": {"location": ["London"], "years": [5], "rate": ["", 1.2]}}}
{"id": 225, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'topic': ''. Expected one of ['psychology']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the most followed person on twitter who tweets about psychology related to behaviour and group dynamics.", "function": {"name": "social_media_analytics.most_followed", "description": "Find the most followed Twitter user related to certain topics.", "parameters": {"type": "dict", "properties": {"topic": {"type": "string", "description": "The main topic of interest."}, "sub_topics": {"type": "array", "items": {"type": "string"}, "description": "Sub-topics related to main topic. Default is empty."}, "region": {"type": "string", "description": "Region of interest for twitter search. Default is 'all'."}}, "required": ["topic"]}}}, "model_result_raw": "[social_media_analytics.most_followed(topic='')]", "model_result_decoded": [{"social_media_analytics.most_followed": {"topic": ""}}], "possible_answer": {"social_media_analytics.most_followed": {"topic": ["psychology"], "sub_topics": [["behaviour", "group dynamics"]], "region": ["", "all"]}}}
{"id": 226, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'category': 'function_questions'. Expected one of ['reading']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What is the percentage of population preferring digital reading over physical books?", "function": {"name": "psych_research.get_preference", "description": "Gathers research data on public preference between two options, based on societal category.", "parameters": {"type": "dict", "properties": {"category": {"type": "string", "description": "The societal category the preference data is about. E.g. reading, transportation, food"}, "option_one": {"type": "string", "description": "The first option people could prefer."}, "option_two": {"type": "string", "description": "The second option people could prefer."}, "demographic": {"type": "string", "description": "Specific demographic of society to narrow down the research.", "default": "all"}}, "required": ["category", "option_one", "option_two"]}}}, "model_result_raw": "[psych_research.get_preference(category='function_questions', option_one='.readingPreference', option_two='percentage', demographic='age')]", "model_result_decoded": [{"psych_research.get_preference": {"category": "function_questions", "option_one": ".readingPreference", "option_two": "percentage", "demographic": "age"}}], "possible_answer": {"psych_research.get_preference": {"category": ["reading"], "option_one": ["digital reading", "digital"], "option_two": ["physical book", "physical", "physical books"], "demographic": ["", "all"]}}}
{"id": 228, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'type': ''. Expected one of ['ENFJ']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get me strength and weakness traits for ENFJ personality type.", "function": {"name": "get_personality_traits", "description": "Retrieve the personality traits for a specific personality type, including their strengths and weaknesses.", "parameters": {"type": "dict", "properties": {"type": {"type": "string", "description": "The personality type."}, "traits": {"type": "array", "items": {"type": "string", "enum": ["strengths", "weaknesses"]}, "description": "List of traits to be retrieved, default is ['strengths']."}}, "required": ["type"]}}}, "model_result_raw": "[get_personality_traits(type='')]", "model_result_decoded": [{"get_personality_traits": {"type": ""}}], "possible_answer": {"get_personality_traits": {"type": ["ENFJ"], "traits": [["strengths", "weaknesses"]]}}}
{"id": 229, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'hobby': './hobbyFunction.py'. Expected one of ['jogging']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find three personality traits of people who like jogging.", "function": {"name": "get_personality_traits", "description": "Retrieve the common personality traits of people based on their hobbies or activities.", "parameters": {"type": "dict", "properties": {"hobby": {"type": "string", "description": "The hobby or activity of interest."}, "trait_count": {"type": "integer", "description": "The number of top traits to return, default is 5"}}, "required": ["hobby"]}}}, "model_result_raw": "[get_personality_traits(hobby='./hobbyFunction.py', trait_count=3)]", "model_result_decoded": [{"get_personality_traits": {"hobby": "./hobbyFunction.py", "trait_count": 3}}], "possible_answer": {"get_personality_traits": {"hobby": ["jogging"], "trait_count": [3]}}}
{"id": 230, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'characteristics': ['openness', ',', 'conscientiousness', ',', 'extraversion', ',', 'agreeableness', ',', 'neuroticism']. Expected one of [['efficient', 'organized', 'easy going', 'compassionate']]."], "error_type": "value_error:list/tuple", "prompt": {"question": "What's my Big Five Personality trait scores given that I am efficient, organized, easy going and compassionate?", "function": {"name": "get_bigfive_scores", "description": "Retrieve Big Five Personality trait scores based on individual's behavioural characteristics.", "parameters": {"type": "dict", "properties": {"characteristics": {"type": "array", "items": {"type": "string"}, "description": "List of user's behavioural characteristics."}, "scale": {"type": "string", "enum": ["high", "medium", "low"], "description": "The scoring scale of traits (default is medium)."}}, "required": ["characteristics"]}}}, "model_result_raw": "[get_bigfive_scores(characteristics=['openness', ',', 'conscientiousness', ',', 'extraversion', ',', 'agreeableness', ',', 'neuroticism'])]", "model_result_decoded": [{"get_bigfive_scores": {"characteristics": ["openness", ",", "conscientiousness", ",", "extraversion", ",", "agreeableness", ",", "neuroticism"]}}], "possible_answer": {"get_bigfive_scores": {"characteristics": [["efficient", "organized", "easy going", "compassionate"]], "scale": ["medium", ""]}}}
{"id": 231, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': ''. Expected one of ['France']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Who was the King of France in 1510?", "function": {"name": "historic_leader_search", "description": "Retrieve information about a historical leader given a location and date.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The country or region in question."}, "date": {"type": "integer", "description": "The year being queried."}, "title": {"type": "string", "description": "The official title of the position. Default is 'King'."}}, "required": ["location", "date"]}}}, "model_result_raw": "[historic_leader_search(location='', date=1510, title='')]", "model_result_decoded": [{"historic_leader_search": {"location": "", "date": 1510, "title": ""}}], "possible_answer": {"historic_leader_search": {"location": ["France"], "date": [1510], "title": ["King", ""]}}}
{"id": 232, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'country': ''. Expected one of ['Germany', 'DE']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Provide key war events in German history from 1871 to 1945.", "function": {"name": "history.get_key_events", "description": "Retrieve key historical events within a specific period for a certain country.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The name of the country for which history is queried."}, "start_year": {"type": "integer", "description": "Start year of the period for which history is queried."}, "end_year": {"type": "integer", "description": "End year of the period for which history is queried."}, "event_type": {"type": "array", "items": {"type": "string", "enum": ["War", "Revolutions", "Diplomacy", "Economy"]}, "description": "Types of event. Default to 'all', which all types will be considered."}}, "required": ["country", "start_year", "end_year"]}}}, "model_result_raw": "[history.get_key_events(country='', start_year=1871, end_year=1945)]", "model_result_decoded": [{"history.get_key_events": {"country": "", "start_year": 1871, "end_year": 1945}}], "possible_answer": {"history.get_key_events": {"country": ["Germany", "DE"], "start_year": [1871], "end_year": [1945], "event_type": [["War"]]}}}
{"id": 233, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': ''. Expected one of ['England', 'ENG']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What was the full name king of England in 1800?", "function": {"name": "monarch.getMonarchOfYear", "description": "Retrieve the monarch of a specific location during a specified year.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location (e.g., country) whose monarch needs to be found."}, "year": {"type": "integer", "description": "The year to search the monarch."}, "fullName": {"type": "boolean", "default": false, "description": "If true, returns the full name and title of the monarch."}}, "required": ["location", "year"]}}}, "model_result_raw": "[monarch.getMonarchOfYear(location='', year=1800, fullName=False)]", "model_result_decoded": [{"monarch.getMonarchOfYear": {"location": "", "year": 1800, "fullName": false}}], "possible_answer": {"monarch.getMonarchOfYear": {"location": ["England", "ENG"], "year": [1800], "fullName": [true]}}}
{"id": 234, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'event_name': ': '. Expected one of ['Treaty of Tordesillas']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "When did the Treaty of Tordesillas take place? Put it in the format of YYYY.", "function": {"name": "european_history.get_event_date", "description": "Retrieve the date of a specific event in European history.", "parameters": {"type": "dict", "properties": {"event_name": {"type": "string", "description": "The name of the event."}, "format": {"type": "string", "description": "Optional format of the returned date. Default is 'MM-DD-YYYY'."}}, "required": ["event_name"]}}}, "model_result_raw": "[european_history.get_event_date(event_name=': ')]", "model_result_decoded": [{"european_history.get_event_date": {"event_name": ": "}}], "possible_answer": {"european_history.get_event_date": {"event_name": ["Treaty of Tordesillas"], "format": ["YYYY"]}}}
{"id": 235, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Optional parameter 'category' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Find important Wars in European history during the 19th century.", "function": {"name": "history_eu.fetch_events", "description": "Fetches significant historical events within a specific time period in European history.", "parameters": {"type": "dict", "properties": {"century": {"type": "integer", "description": "The century you are interested in."}, "region": {"type": "string", "description": "The region of Europe you are interested in.", "enum": ["Northern", "Southern", "Eastern", "Western"]}, "category": {"type": "string", "description": "Category of the historical events. Default is 'Culture'.", "enum": ["Wars", "Culture", "Politics", "Scientific", "Others"]}}, "required": ["century", "region"]}}}, "model_result_raw": "[history_eu.fetch_events(century=19, region='Eastern')]", "model_result_decoded": [{"history_eu.fetch_events": {"century": 19, "region": "Eastern"}}], "possible_answer": {"history_eu.fetch_events": {"century": [19], "region": ["Northern", "Southern", "Eastern", "Western"], "category": ["Wars"]}}}
{"id": 236, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'event': ''. Expected one of ['Treaty of Lisbon', 'Signing of the Treaty of Lisbon']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "When was the signing of the Treaty of Lisbon?", "function": {"name": "get_event_date", "description": "Retrieve the date of a historical event.", "parameters": {"type": "dict", "properties": {"event": {"type": "string", "description": "The name of the historical event."}, "location": {"type": "string", "description": "Location where the event took place. Default to global if not specified."}}, "required": ["event"]}}}, "model_result_raw": "[get_event_date(event='')]", "model_result_decoded": [{"get_event_date": {"event": ""}}], "possible_answer": {"get_event_date": {"event": ["Treaty of Lisbon", "Signing of the Treaty of Lisbon"], "location": [""]}}}
{"id": 237, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'event_name': 'american_civil_war_start_date'. Expected one of ['American Civil War', 'Civil War']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get start date on the American Civil War.", "function": {"name": "us_history.get_event_info", "description": "Retrieve detailed information about a significant event in U.S. history.", "parameters": {"type": "dict", "properties": {"event_name": {"type": "string", "description": "The name of the event."}, "specific_info": {"type": "string", "description": "Specific aspect of information related to event.", "enum": ["Start Date", "End Date", "Participants", "Result", "Notable Figures", "Importance in History"]}}, "required": ["event_name", "specific_info"]}}}, "model_result_raw": "[us_history.get_event_info(event_name='american_civil_war_start_date', specific_info='Notable Figures')]", "model_result_decoded": [{"us_history.get_event_info": {"event_name": "american_civil_war_start_date", "specific_info": "Notable Figures"}}], "possible_answer": {"us_history.get_event_info": {"event_name": ["American Civil War", "Civil War"], "specific_info": ["Start Date"]}}}
{"id": 238, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'country': 'USA'. Expected one of ['United States', 'US']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get historical GDP data for United States from 1960 to 2000.", "function": {"name": "get_historical_GDP", "description": "Retrieve historical GDP data for a specific country and time range.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country for which the historical GDP data is required."}, "start_year": {"type": "integer", "description": "Starting year of the period for which GDP data is required."}, "end_year": {"type": "integer", "description": "Ending year of the period for which GDP data is required."}}, "required": ["country", "start_year", "end_year"]}}}, "model_result_raw": "[get_historical_GDP(country='USA', start_year=1960, end_year=2000)]", "model_result_decoded": [{"get_historical_GDP": {"country": "USA", "start_year": 1960, "end_year": 2000}}], "possible_answer": {"get_historical_GDP": {"country": ["United States", "US"], "start_year": [1960], "end_year": [2000]}}}
{"id": 239, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'event': ''. Expected one of ['American Civil War']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Who was the president of the United States during the American Civil War?", "function": {"name": "us_history.get_president", "description": "Retrieve the U.S. president during a specific event in American history.", "parameters": {"type": "dict", "properties": {"event": {"type": "string", "description": "The event in U.S. history."}, "year": {"type": "integer", "description": "The specific year of the event."}}, "required": ["event", "year"]}}}, "model_result_raw": "[us_history.get_president(event='', year=1861)]", "model_result_decoded": [{"us_history.get_president": {"event": "", "year": 1861}}], "possible_answer": {"us_history.get_president": {"event": ["American Civil War"], "year": [1861]}}}
{"id": 242, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'event': ''. Expected one of ['Civil War']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Who was the U.S. president during the Civil War?", "function": {"name": "US_President_During_Event", "description": "Returns the U.S. president during a specified historical event.", "parameters": {"type": "dict", "properties": {"event": {"type": "string", "description": "The historical event."}, "country": {"type": "string", "description": "The country the president leads (optional parameter, defaults to 'USA' if not specified)."}}, "required": ["event"]}}}, "model_result_raw": "[US_President_During_Event(event='')]", "model_result_decoded": [{"US_President_During_Event": {"event": ""}}], "possible_answer": {"US_President_During_Event": {"event": ["Civil War"], "country": ["USA", ""]}}}
{"id": 243, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'discovery': 'function that takes a topic and lists the people who first discovered it or made a significant contribution to it.'. Expected one of ['Theory of Evolution', 'theory of evolution']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Who is the scientist that first proposed the theory of evolution?", "function": {"name": "get_scientist_for_discovery", "description": "Retrieve the scientist's name who is credited for a specific scientific discovery or theory.", "parameters": {"type": "dict", "properties": {"discovery": {"type": "string", "description": "The scientific discovery or theory."}}, "required": ["discovery"]}}}, "model_result_raw": "[get_scientist_for_discovery(discovery='function that takes a topic and lists the people who first discovered it or made a significant contribution to it.')]", "model_result_decoded": [{"get_scientist_for_discovery": {"discovery": "function that takes a topic and lists the people who first discovered it or made a significant contribution to it."}}], "possible_answer": {"get_scientist_for_discovery": {"discovery": ["Theory of Evolution", "theory of evolution"]}}}
{"id": 244, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'discovery': ':class:`~nphysics.particles.neutron.discoverer.discoverer.discoverer`'. Expected one of ['neutron']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Who discovered the neutron? Give me detail information.", "function": {"name": "get_discoverer", "description": "Get the person or team who made a particular scientific discovery", "parameters": {"type": "dict", "properties": {"discovery": {"type": "string", "description": "The discovery for which the discoverer's information is needed."}, "detail": {"type": "boolean", "description": "Optional flag to get additional details about the discoverer, such as birth date and nationality. Defaults to false."}}, "required": ["discovery", "detail"]}}}, "model_result_raw": "[get_discoverer(discovery=':class:`~nphysics.particles.neutron.discoverer.discoverer.discoverer`', detail=False)]", "model_result_decoded": [{"get_discoverer": {"discovery": ":class:`~nphysics.particles.neutron.discoverer.discoverer.discoverer`", "detail": false}}], "possible_answer": {"get_discoverer": {"discovery": ["neutron"], "detail": [true]}}}
{"id": 245, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'author': ''. Expected one of ['Isaac Newton']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What year was the law of universal gravitation published by Isaac Newton?", "function": {"name": "publication_year.find", "description": "Fetches the year a particular scientific work was published.", "parameters": {"type": "dict", "properties": {"author": {"type": "string", "description": "Name of the author of the work."}, "work_title": {"type": "string", "description": "Title of the scientific work."}, "location": {"type": "string", "description": "Place of the publication, if known. Default to 'all'."}}, "required": ["author", "work_title"]}}}, "model_result_raw": "[publication_year.find(author='', work_title='Principia Mathematica', location='London, England, 1687')]", "model_result_decoded": [{"publication_year.find": {"author": "", "work_title": "Principia Mathematica", "location": "London, England, 1687"}}], "possible_answer": {"publication_year.find": {"author": ["Isaac Newton"], "work_title": ["Law of Universal Gravitation", "Universal Law of Gravitation", "The law of universal gravitation"], "location": ["", "all"]}}}
{"id": 246, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'element_name': ''. Expected one of [\"'radium'\", '\"radium\"', 'radium']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Who discovered radium?", "function": {"name": "discoverer.get", "description": "Retrieve the name of the discoverer of an element based on its name.", "parameters": {"type": "dict", "properties": {"element_name": {"type": "string", "description": "The name of the element."}, "year": {"type": "integer", "description": "Optional parameter that refers to the year of discovery. It could be helpful in case an element was discovered more than once. Default to 0, which means not use it."}, "first": {"type": "boolean", "default": true, "description": "Optional parameter indicating if the first discoverer's name should be retrieved."}}, "required": ["element_name"]}}}, "model_result_raw": "[discoverer.get(element_name='')]", "model_result_decoded": [{"discoverer.get": {"element_name": ""}}], "possible_answer": {"discoverer.get": {"element_name": ["'radium'", "\"radium\"", "radium"], "year": ["", 0], "first": [true, ""]}}}
{"id": 248, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'scientist': ''. Expected one of ['Albert Einstein']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What was Albert Einstein's contribution to science on March 17, 1915?", "function": {"name": "historical_contrib.get_contrib", "description": "Retrieve historical contribution made by a scientist on a specific date.", "parameters": {"type": "dict", "properties": {"scientist": {"type": "string", "description": "The scientist whose contributions need to be searched."}, "date": {"type": "string", "description": "The date when the contribution was made in yyyy-mm-dd format."}, "category": {"type": "string", "description": "The field of the contribution, such as 'Physics' or 'Chemistry'. Default is 'all'."}}, "required": ["scientist", "date"]}}}, "model_result_raw": "[historical_contrib.get_contrib(scientist='', date='')]", "model_result_decoded": [{"historical_contrib.get_contrib": {"scientist": "", "date": ""}}], "possible_answer": {"historical_contrib.get_contrib": {"scientist": ["Albert Einstein"], "date": ["1915-03-17", "03/17/1915", "Mar.17,1915"], "category": ["", "all"]}}}
{"id": 249, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'invention_name': ''. Expected one of ['theory of relativity', 'Theory of Relativity']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Who invented the theory of relativity and in which year?", "function": {"name": "science_history.get_invention", "description": "Retrieve the inventor and year of invention based on the invention's name.", "parameters": {"type": "dict", "properties": {"invention_name": {"type": "string", "description": "The name of the invention."}, "want_year": {"type": "boolean", "default": false, "description": "Return the year of invention if set to true."}}, "required": ["invention_name", "want_year"]}}}, "model_result_raw": "[science_history.get_invention(invention_name='', want_year=True)]", "model_result_decoded": [{"science_history.get_invention": {"invention_name": "", "want_year": true}}], "possible_answer": {"science_history.get_invention": {"invention_name": ["theory of relativity", "Theory of Relativity"], "want_year": [true]}}}
{"id": 250, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'religion': ''. Expected one of ['Christianity']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Tell me more about Christianity and its history till the 14th century", "function": {"name": "religion.history_info", "description": "Provides comprehensive historical details about a specified religion till a specified century.", "parameters": {"type": "dict", "properties": {"religion": {"type": "string", "description": "The name of the religion for which historical details are needed."}, "till_century": {"type": "integer", "description": "The century till which historical details are needed."}, "include_people": {"type": "boolean", "description": "To include influential people related to the religion during that time period, default is False"}}, "required": ["religion", "till_century"]}}}, "model_result_raw": "[religion.history_info(religion='', till_century=14)]", "model_result_decoded": [{"religion.history_info": {"religion": "", "till_century": 14}}], "possible_answer": {"religion.history_info": {"religion": ["Christianity"], "till_century": [14], "include_people": [true]}}}
{"id": 251, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax. Perhaps you forgot a comma? (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"question": "What's the time difference between San Francisco and Sydney?", "function": {"name": "get_time_difference", "description": "Get the time difference between two places.", "parameters": {"type": "dict", "properties": {"place1": {"type": "string", "description": "The first place for time difference."}, "place2": {"type": "string", "description": "The second place for time difference."}}, "required": ["place1", "place2"]}}}, "model_result_raw": "[get_time_difference(place1='instantiate_city(city='San Francisco')', place2='; instantiate_city(city='Sydney')')]", "possible_answer": {"get_time_difference": {"place1": ["San Francisco", "SF"], "place2": ["Sydney"]}}}
{"id": 252, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'name': 'Julian Date'. Expected one of ['Jesus Christ']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What is the earliest reference of Jesus Christ in history from historical record?", "function": {"name": "get_earliest_reference", "description": "Retrieve the earliest historical reference of a person.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the person."}, "source": {"type": "string", "enum": ["scriptures", "historical records"], "description": "Source to fetch the reference. Default is 'scriptures'"}}, "required": ["name"]}}}, "model_result_raw": "[get_earliest_reference(name='Julian Date', source='historical records')]", "model_result_decoded": [{"get_earliest_reference": {"name": "Julian Date", "source": "historical records"}}], "possible_answer": {"get_earliest_reference": {"name": ["Jesus Christ"], "source": ["historical records"]}}}
{"id": 253, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'religion': ''. Expected one of ['Christianity']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find ten major historical events related to Christianity in the 16th century sort by importance.", "function": {"name": "get_religion_history", "description": "Retrieves significant religious events, including the details of the event, its historical context, and its impacts.", "parameters": {"type": "dict", "properties": {"religion": {"type": "string", "description": "Name of the religion to be queried."}, "century": {"type": "integer", "description": "The century in which the event(s) took place."}, "sort_by": {"type": "string", "enum": ["importance", "chronological"], "default": "chronological", "description": "Order of sorting the events. Default is chronological."}, "count": {"type": "integer", "default": 5, "description": "Number of events to return. Default is 5."}}, "required": ["religion", "century"]}}}, "model_result_raw": "[get_religion_history(religion='', century=16)]", "model_result_decoded": [{"get_religion_history": {"religion": "", "century": 16}}], "possible_answer": {"get_religion_history": {"religion": ["Christianity"], "century": [16], "sort_by": ["importance"], "count": [10]}}}
{"id": 254, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'religion_name': ''. Expected one of ['Buddhism']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Retrieve the full historyof Buddhism", "function": {"name": "retrieve_religion_info", "description": "Retrieve the history and main beliefs of a religion.", "parameters": {"type": "dict", "properties": {"religion_name": {"type": "string", "description": "The name of the religion."}, "detail_level": {"type": "string", "description": "Level of detail for the returned information, either 'summary' or 'full'.", "default": "summary"}}, "required": ["religion_name", "detail_level"]}}}, "model_result_raw": "[retrieve_religion_info(religion_name='', detail_level='')]", "model_result_decoded": [{"retrieve_religion_info": {"religion_name": "", "detail_level": ""}}], "possible_answer": {"retrieve_religion_info": {"religion_name": ["Buddhism"], "detail_level": ["full"]}}}
{"id": 255, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax. Perhaps you forgot a comma? (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"question": "Retrieve the historic dates and facts related to Christianity between year 300 and 400.", "function": {"name": "get_religion_history", "description": "Retrieves historic events and facts related to a specified religion for a given period.", "parameters": {"type": "dict", "properties": {"religion": {"type": "string", "description": "The name of the religion."}, "start_year": {"type": "integer", "description": "The starting year of the period."}, "end_year": {"type": "integer", "description": "The end year of the period."}, "event_type": {"type": "string", "enum": ["all", "crusade", "schism", "reform"], "description": "Optional parameter specifying the type of event. Default is 'all'."}}, "required": ["religion", "start_year", "end_year"]}}}, "model_result_raw": "[get_religion_history(religion=':{'christianity': {'history': function(startYear, endYear){}})}}', start_year=300, end_year=400, event_type='all')]", "possible_answer": {"get_religion_history": {"religion": ["Christianity"], "start_year": [300], "end_year": [400], "event_type": ["all", ""]}}}
{"id": 256, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'papal_name': ''. Expected one of ['Innocent III']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get the biography and main contributions of Pope Innocent III.", "function": {"name": "religious_history.get_papal_biography", "description": "Retrieve the biography and main religious and historical contributions of a Pope based on his papal name.", "parameters": {"type": "dict", "properties": {"papal_name": {"type": "string", "description": "The papal name of the Pope."}, "include_contributions": {"type": "boolean", "default": false, "description": "Include main contributions of the Pope in the response if true."}}, "required": ["papal_name", "include_contributions"]}}}, "model_result_raw": "[religious_history.get_papal_biography(papal_name='', include_contributions=True)]", "model_result_decoded": [{"religious_history.get_papal_biography": {"papal_name": "", "include_contributions": true}}], "possible_answer": {"religious_history.get_papal_biography": {"papal_name": ["Innocent III"], "include_contributions": [true]}}}
{"id": 258, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'color_name': ''. Expected one of ['Sea Green']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Can you help me identify the basic RGB value of Sea Green color?", "function": {"name": "identify_color_rgb", "description": "This function identifies the RGB values of a named color.", "parameters": {"type": "dict", "properties": {"color_name": {"type": "string", "description": "Name of the color."}, "standard": {"type": "string", "description": "The color standard (e.g. basic, pantone). Default is 'basic'"}}, "required": ["color_name"]}}}, "model_result_raw": "[identify_color_rgb(color_name='')]", "model_result_decoded": [{"identify_color_rgb": {"color_name": ""}}], "possible_answer": {"identify_color_rgb": {"color_name": ["Sea Green"], "standard": ["basic", ""]}}}
{"id": 259, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'color1': ':Colors.YELLOW'. Expected one of ['yellow']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Mix yellow and blue colors and adjust the lightness level to 60 percent.", "function": {"name": "mix_paint_color", "description": "Combine two primary paint colors and adjust the resulting color's lightness level.", "parameters": {"type": "dict", "properties": {"color1": {"type": "string", "description": "The first primary color to be mixed."}, "color2": {"type": "string", "description": "The second primary color to be mixed."}, "lightness": {"type": "integer", "description": "The desired lightness level of the resulting color in percentage. The default level is set to 50."}}, "required": ["color1", "color2"]}}}, "model_result_raw": "[mix_paint_color(color1=':Colors.YELLOW', color2=':Colors.BLUE', lightness=0)]", "model_result_decoded": [{"mix_paint_color": {"color1": ":Colors.YELLOW", "color2": ":Colors.BLUE", "lightness": 0}}], "possible_answer": {"mix_paint_color": {"color1": ["yellow"], "color2": ["blue"], "lightness": [60]}}}
{"id": 261, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'width': 0. Expected one of [20]."], "error_type": "value_error:dict_value", "prompt": {"question": "Calculate how many gallons of paint is required to paint a wall with width of 20ft and height of 12ft, assuming 1 gallon covers approximately 350 sq.ft. Don't include window area of 15 sq.ft.", "function": {"name": "paint_requirement.calculate", "description": "Calculate the amount of paint required to paint a given area. Account for coverage efficiency of the paint and exclusions (like windows).", "parameters": {"type": "dict", "properties": {"area": {"type": "dict", "properties": {"width": {"type": "integer", "description": "The width of the area to be painted in feet."}, "height": {"type": "integer", "description": "The height of the area to be painted in feet."}}, "description": "The area to be painted."}, "paint_coverage": {"type": "integer", "description": "Coverage area per gallon of the paint in square feet.", "default": 350}, "exclusion": {"type": "dict", "properties": {"type": {"type": "string", "description": "The type of the exclusion e.g window, door etc."}, "area": {"type": "integer", "description": "The area of the exclusion in square feet."}}, "description": "Area not to be painted. Default to not use any exclusion if not specified."}}, "required": ["area", "paint_coverage"]}}}, "model_result_raw": "[paint_requirement.calculate(area={'width': 0, 'height': 0}, paint_coverage=1, exclusion={'area': 15})]", "model_result_decoded": [{"paint_requirement.calculate": {"area": {"width": 0, "height": 0}, "paint_coverage": 1, "exclusion": {"area": 15}}}], "possible_answer": {"paint_requirement.calculate": {"area": [{"width": [20], "height": [12]}], "paint_coverage": [350], "exclusion": [{"type": ["window"], "area": [15]}]}}}
{"id": 263, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'size': ','. Expected one of ['12x18']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Change my painting's medium to oil and change size to 12x18 with red dominant color.", "function": {"name": "modify_painting", "description": "Modify an existing painting's attributes such as size, medium, and color.", "parameters": {"type": "dict", "properties": {"size": {"type": "string", "description": "The size of the painting in inches, width by height."}, "medium": {"type": "string", "description": "The medium of the painting, such as oil, acrylic, etc."}, "dominant_color": {"type": "string", "description": "The dominant color of the painting. Default to 'black'."}}, "required": ["size", "medium"]}}}, "model_result_raw": "[modify_painting(size=',', medium='', dominant_color='red')]", "model_result_decoded": [{"modify_painting": {"size": ",", "medium": "", "dominant_color": "red"}}], "possible_answer": {"modify_painting": {"size": ["12x18"], "medium": ["oil"], "dominant_color": ["red"]}}}
{"id": 264, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'year': 2005. Expected one of ['']."], "error_type": "value_error:others", "prompt": {"question": "Find me the most recent art sculpture by James Plensa with detailed description.", "function": {"name": "get_sculpture_info", "description": "Retrieves the most recent artwork by a specified artist with its detailed description.", "parameters": {"type": "dict", "properties": {"artist_name": {"type": "string", "description": "The name of the artist."}, "year": {"type": "integer", "description": "Year of the sculpture. This is optional. Default is the most recent year."}, "detail": {"type": "boolean", "description": "If True, it provides detailed description of the sculpture. Defaults to False."}}, "required": ["artist_name"]}}}, "model_result_raw": "[get_sculpture_info(artist_name='James Plensa', year=2005, detail=True)]", "model_result_decoded": [{"get_sculpture_info": {"artist_name": "James Plensa", "year": 2005, "detail": true}}], "possible_answer": {"get_sculpture_info": {"artist_name": ["James Plensa"], "year": [""], "detail": [true]}}}
{"id": 265, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'artist': 'Michelangelo Buonarroti Simoni'. Expected one of ['Michelangelo']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the size of the sculpture with title 'David' by Michelangelo.", "function": {"name": "sculpture.get_details", "description": "Retrieve details of a sculpture based on the artist and the title of the sculpture.", "parameters": {"type": "dict", "properties": {"artist": {"type": "string", "description": "The artist who made the sculpture."}, "title": {"type": "string", "description": "The title of the sculpture."}, "detail": {"type": "string", "description": "The specific detail wanted about the sculpture. Default is 'general information'."}}, "required": ["artist", "title"]}}}, "model_result_raw": "[sculpture.get_details(artist='Michelangelo Buonarroti Simoni', title='David', detail='')]", "model_result_decoded": [{"sculpture.get_details": {"artist": "Michelangelo Buonarroti Simoni", "title": "David", "detail": ""}}], "possible_answer": {"sculpture.get_details": {"artist": ["Michelangelo"], "title": ["David"], "detail": ["size"]}}}
{"id": 266, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': ''. Expected one of ['Chicago', 'Chicago, IL']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find me sculptures near Chicago that were made in the 19th century.", "function": {"name": "sculpture_search", "description": "Find sculptures based on location and a specific time frame.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where the sculptures are located."}, "time_frame": {"type": "string", "description": "The time frame during which the sculptures were made."}, "material": {"type": "string", "description": "Optional material of the sculptures. Default is 'all'"}}, "required": ["location", "time_frame"]}}}, "model_result_raw": "[sculpture_search(location='', time_frame='19th century')]", "model_result_decoded": [{"sculpture_search": {"location": "", "time_frame": "19th century"}}], "possible_answer": {"sculpture_search": {"location": ["Chicago", "Chicago, IL"], "time_frame": ["19th century"], "material": ["", "all"]}}}
{"id": 267, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'year': 1904. Expected one of ['']."], "error_type": "value_error:others", "prompt": {"question": "What is the value of the sculpture 'The Thinker' by Rodin?", "function": {"name": "get_sculpture_value", "description": "Retrieve the current market value of a particular sculpture by a specific artist.", "parameters": {"type": "dict", "properties": {"sculpture": {"type": "string", "description": "The name of the sculpture."}, "artist": {"type": "string", "description": "The name of the artist who created the sculpture."}, "year": {"type": "integer", "description": "The year the sculpture was created. This is optional and is not required for all sculptures. Default is the most recent year."}}, "required": ["sculpture", "artist"]}}}, "model_result_raw": "[get_sculpture_value(sculpture='The Thinker', artist='Rodin', year=1904)]", "model_result_decoded": [{"get_sculpture_value": {"sculpture": "The Thinker", "artist": "Rodin", "year": 1904}}], "possible_answer": {"get_sculpture_value": {"sculpture": ["The Thinker"], "artist": ["Rodin"], "year": [""]}}}
{"id": 268, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': ''. Expected one of ['New York City, NY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the top rated modern sculpture exhibition happening in New York in the upcoming month.", "function": {"name": "find_exhibition", "description": "Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where the exhibition is held, e.g., New York City, NY."}, "art_form": {"type": "string", "description": "The form of art the exhibition is displaying e.g., sculpture."}, "month": {"type": "string", "description": "The month of exhibition. Default value will return upcoming events if not specified."}, "user_ratings": {"type": "string", "enum": ["low", "average", "high"], "description": "Select exhibitions with user rating threshold. Default is 'low'"}}, "required": ["location", "art_form"]}}}, "model_result_raw": "[find_exhibition(location='', art_form='modern_sculpture', month='May', user_ratings='high')]", "model_result_decoded": [{"find_exhibition": {"location": "", "art_form": "modern_sculpture", "month": "May", "user_ratings": "high"}}], "possible_answer": {"find_exhibition": {"location": ["New York City, NY"], "art_form": ["sculpture", "modern sculpture"], "month": [""], "user_ratings": ["high"]}}}
{"id": 269, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'artist': 'Michelangelo Buonarroti'. Expected one of ['Michelangelo']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find me the sculptures of Michelangelo with material Marble in Rome, Italy.", "function": {"name": "sculpture_locator.find_by_artist", "description": "Locate the sculptures of specific artist by material and location", "parameters": {"type": "dict", "properties": {"artist": {"type": "string", "description": "Name of the Artist of the sculpture"}, "material": {"type": "string", "description": "Material of the sculpture."}, "location": {"type": "string", "description": "The location where you want to find the sculpture. Default is 'all' if not specified."}}, "required": ["artist", "material"]}}}, "model_result_raw": "[sculpture_locator.find_by_artist(artist='Michelangelo Buonarroti', material='Marble', location='Rome, Italy')]", "model_result_decoded": [{"sculpture_locator.find_by_artist": {"artist": "Michelangelo Buonarroti", "material": "Marble", "location": "Rome, Italy"}}], "possible_answer": {"sculpture_locator.find_by_artist": {"artist": ["Michelangelo"], "material": ["Marble"], "location": ["Rome", "Rome, Italy"]}}}
{"id": 271, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'building_name': ''. Expected one of ['Empire State Building', 'Empire State']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Can you give me the height and width of Empire State building in feet?", "function": {"name": "building.get_dimensions", "description": "Retrieve the dimensions of a specific building based on its name.", "parameters": {"type": "dict", "properties": {"building_name": {"type": "string", "description": "The name of the building."}, "unit": {"type": "string", "description": "The unit in which you want the dimensions. Default is meter.", "enum": ["meter", "feet"]}}, "required": ["building_name", "unit"]}}}, "model_result_raw": "[building.get_dimensions(building_name='', unit='feet')]", "model_result_decoded": [{"building.get_dimensions": {"building_name": "", "unit": "feet"}}], "possible_answer": {"building.get_dimensions": {"building_name": ["Empire State Building", "Empire State"], "unit": ["feet"]}}}
{"id": 272, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'building_id': ''. Expected one of ['B1004']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What is the structural dynamic analysis of the building with building Id B1004 for 2nd, 3rd and 4th floors?", "function": {"name": "analyze_structure", "description": "Analyze a structure of a building based on its Id and floor numbers.", "parameters": {"type": "dict", "properties": {"building_id": {"type": "string", "description": "The unique identification number of the building."}, "floors": {"type": "array", "items": {"type": "integer"}, "description": "Floor numbers to be analyzed."}, "mode": {"type": "string", "description": "Mode of analysis, e.g. 'static' or 'dynamic'. Default is 'static'."}}, "required": ["building_id", "floors"]}}}, "model_result_raw": "[analyze_structure(building_id='', floors=[2, 3, 4], mode='')]", "model_result_decoded": [{"analyze_structure": {"building_id": "", "floors": [2, 3, 4], "mode": ""}}], "possible_answer": {"analyze_structure": {"building_id": ["B1004"], "floors": [[2, 3, 4]], "mode": ["dynamic"]}}}
{"id": 274, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'name': 'find_open_hours'. Expected one of ['Louvre Museum']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find out the open hours for the Louvre Museum in Paris.", "function": {"name": "museum.get_hours", "description": "Retrieve the open hours for a museum based on its name and location.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the museum."}, "location": {"type": "string", "description": "The city where the museum is located."}, "day": {"type": "string", "description": "Optional: Day of the week for specific open hours. Default 'Monday'."}}, "required": ["name", "location"]}}}, "model_result_raw": "[museum.get_hours(name='find_open_hours', location='Louvre Museum', day='Monday')]", "model_result_decoded": [{"museum.get_hours": {"name": "find_open_hours", "location": "Louvre Museum", "day": "Monday"}}], "possible_answer": {"museum.get_hours": {"name": ["Louvre Museum"], "location": ["Paris", "Paris, France"], "day": ["", "Monday"]}}}
{"id": 276, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'number': 0. Expected one of [5]."], "error_type": "value_error:others", "prompt": {"question": "Get the list of top 5 popular artworks at the Metropolitan Museum of Art. Please sort by popularity.", "function": {"name": "metropolitan_museum.get_top_artworks", "description": "Fetches the list of popular artworks at the Metropolitan Museum of Art. Results can be sorted based on popularity.", "parameters": {"type": "dict", "properties": {"number": {"type": "integer", "description": "The number of artworks to fetch"}, "sort_by": {"type": "string", "description": "The criteria to sort the results on. Default is 'popularity'.", "enum": ["popularity", "chronological", "alphabetical"]}}, "required": ["number"]}}}, "model_result_raw": "[metropolitan_museum.get_top_artworks(number=0, sort_by='popularity')]", "model_result_decoded": [{"metropolitan_museum.get_top_artworks": {"number": 0, "sort_by": "popularity"}}], "possible_answer": {"metropolitan_museum.get_top_artworks": {"number": [5], "sort_by": ["popularity", ""]}}}
{"id": 277, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': ''. Expected one of ['Paris', 'Paris, France']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get the working hours of Louvre Museum in Paris.", "function": {"name": "museum_working_hours.get", "description": "Get the working hours of a museum in a specific location.", "parameters": {"type": "dict", "properties": {"museum": {"type": "string", "description": "The name of the museum."}, "location": {"type": "string", "description": "The location of the museum."}, "day": {"type": "string", "description": "Specific day of the week. Default is 'Monday'"}}, "required": ["museum", "location"]}}}, "model_result_raw": "[museum_working_hours.get(museum='Louvre Museum', location='')]", "model_result_decoded": [{"museum_working_hours.get": {"museum": "Louvre Museum", "location": ""}}], "possible_answer": {"museum_working_hours.get": {"museum": ["Louvre Museum", "Louvre"], "location": ["Paris", "Paris, France"], "day": ["", "Monday"]}}}
{"id": 278, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'date': 'weekend'. Expected one of ['this weekend', '2023-06-20', '06/20/2023', 'Jun.20,2023']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the working hours and ticket price of The British Museum for this weekend.", "function": {"name": "museum_info", "description": "Get information about a museum including its opening hours and ticket prices for a specific date range.", "parameters": {"type": "dict", "properties": {"museum": {"type": "string", "description": "The name of the museum."}, "date": {"type": "string", "description": "The specific date or date range for which information is needed. It could be specific date such as '2022-12-01' or a date range like 'this weekend', 'next week'. It could also be a recurring time such as 'every Saturday'."}, "information": {"type": "array", "items": {"type": "string", "enum": ["opening_hours", "ticket_price", "address"]}, "description": "The type of information needed from the museum. This is optional and defaults to 'all' if not specified.", "default": "all"}}, "required": ["museum", "date"]}}}, "model_result_raw": "[museum_info(museum='The_British_Museum', date='weekend', information=['opening_hours', 'address'])]", "model_result_decoded": [{"museum_info": {"museum": "The_British_Museum", "date": "weekend", "information": ["opening_hours", "address"]}}], "possible_answer": {"museum_info": {"museum": ["The British Museum"], "date": ["this weekend", "2023-06-20", "06/20/2023", "Jun.20,2023"], "information": [["opening_hours", "ticket_price"], ["ticket_price", "opening_hours"]]}}}
{"id": 279, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Optional parameter 'features' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Find me the average price and ratings of piano from Yamaha.", "function": {"name": "get_instrument_details", "description": "Retrieve the average price and ratings of an instrument from a particular manufacturer.", "parameters": {"type": "dict", "properties": {"instrument": {"type": "string", "description": "The name of the instrument."}, "manufacturer": {"type": "string", "description": "The manufacturer of the instrument."}, "features": {"type": "array", "items": {"type": "string", "enum": ["price", "rating"]}, "description": "The features to retrieve about the instrument. Default is 'price'"}}, "required": ["instrument", "manufacturer"]}}}, "model_result_raw": "[get_instrument_details(instrument='piano', manufacturer='Yamaha')]", "model_result_decoded": [{"get_instrument_details": {"instrument": "piano", "manufacturer": "Yamaha"}}], "possible_answer": {"get_instrument_details": {"instrument": ["piano"], "manufacturer": ["Yamaha"], "features": [["price", "rating"]]}}}
{"id": 280, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'model': ':\"American Professional II\" Stratocaster'. Expected one of ['American Professional II Stratocaster']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What's the retail price of a Fender American Professional II Stratocaster in Rosewood Finish?", "function": {"name": "instrument_price.get", "description": "Retrieve the current retail price of a specific musical instrument.", "parameters": {"type": "dict", "properties": {"brand": {"type": "string", "description": "The brand of the instrument."}, "model": {"type": "string", "description": "The specific model of the instrument."}, "finish": {"type": "string", "description": "The color or type of finish on the instrument."}}, "required": ["brand", "model", "finish"]}}}, "model_result_raw": "[instrument_price.get(brand='Fender', model=':\"American Professional II\" Stratocaster', finish=':\"Rosewood\"} Tools: [price_tool, fender_tool]')]", "model_result_decoded": [{"instrument_price.get": {"brand": "Fender", "model": ":\"American Professional II\" Stratocaster", "finish": ":\"Rosewood\"} Tools: [price_tool, fender_tool]"}}], "possible_answer": {"instrument_price.get": {"brand": ["Fender"], "model": ["American Professional II Stratocaster"], "finish": ["Rosewood"]}}}
{"id": 281, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Optional parameter 'make' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Find a Violin within my budget of $1000 with acoustic type.", "function": {"name": "find_instrument", "description": "Search for a musical instrument within specified budget and of specific type.", "parameters": {"type": "dict", "properties": {"budget": {"type": "integer", "description": "Your budget for the instrument."}, "type": {"type": "string", "description": "Type of the instrument"}, "make": {"type": "string", "description": "Maker of the instrument. Default to not use if not specified."}}, "required": ["budget", "type"]}}}, "model_result_raw": "[find_instrument(budget=1000, type='Acoustic')]", "model_result_decoded": [{"find_instrument": {"budget": 1000, "type": "Acoustic"}}], "possible_answer": {"find_instrument": {"budget": [1000], "type": ["acoustic"], "make": ["Violin", "violin"]}}}
{"id": 282, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'name': ','. Expected one of ['Violin']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the details about the musical instrument 'Violin' from 'Stradivarius' maker, made in the year 1721.", "function": {"name": "get_instrument_info", "description": "Retrieve the details about a specific musical instrument based on its name, maker, and manufacturing year.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the instrument."}, "maker": {"type": "string", "description": "The name of the maker who created the instrument."}, "year": {"type": "integer", "description": "The year the instrument was made."}}, "required": ["name", "maker", "year"]}}}, "model_result_raw": "[get_instrument_info(name=',', maker='Stradivarius', year=1721)]", "model_result_decoded": [{"get_instrument_info": {"name": ",", "maker": "Stradivarius", "year": 1721}}], "possible_answer": {"get_instrument_info": {"name": ["Violin"], "maker": ["Stradivarius"], "year": [1721]}}}
{"id": 284, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'model': ''. Expected one of ['Gibson Les Paul']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the price of a used Gibson Les Paul guitar in excellent condition in the Chicago area.", "function": {"name": "guitar_price.find", "description": "Retrieve the price of a specific used guitar model based on its condition and location.", "parameters": {"type": "dict", "properties": {"model": {"type": "string", "description": "The model of the guitar."}, "condition": {"type": "string", "enum": ["Poor", "Good", "Excellent"], "description": "The condition of the guitar."}, "location": {"type": "string", "description": "The location where the guitar is being sold."}}, "required": ["model", "condition", "location"]}}}, "model_result_raw": "[guitar_price.find(model='', condition='Excellent', location='Chicago')]", "model_result_decoded": [{"guitar_price.find": {"model": "", "condition": "Excellent", "location": "Chicago"}}], "possible_answer": {"guitar_price.find": {"model": ["Gibson Les Paul"], "condition": ["Excellent"], "location": ["Chicago", "Chicago, IL", "Chicago, Illinois"]}}}
{"id": 285, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': ''. Expected one of ['New York City, NY', 'New York']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get information about the pop concerts in New York for next month.", "function": {"name": "concert_info.get", "description": "Retrieve information about concerts based on specific genre, location and date.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where the concert will take place."}, "date": {"type": "string", "description": "Time frame to get the concert for."}, "genre": {"type": "string", "description": "Genre of the concert.", "enum": ["Pop", "Rock", "Country", "Classical", "Electronic", "Hip-Hop"]}}, "required": ["location", "date", "genre"]}}}, "model_result_raw": "[concert_info.get(location='', date='', genre='Pop')]", "model_result_decoded": [{"concert_info.get": {"location": "", "date": "", "genre": "Pop"}}], "possible_answer": {"concert_info.get": {"location": ["New York City, NY", "New York"], "date": ["next month", "2023-06-01", "06/01/2023", "Jun.1,2023", "June 2023"], "genre": ["Pop"]}}}
{"id": 286, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': ''. Expected one of ['Chicago', 'Chicago, IL']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find me a Rock concert in Chicago with ticket availability under $100.", "function": {"name": "find_concert", "description": "Locate a concert in a specified location within a certain budget.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where you are looking for a concert. In the format City, State."}, "price": {"type": "integer", "description": "Maximum ticket price."}, "genre": {"type": "string", "description": "Music genre of the concert. Default to 'Jazz'. ", "enum": ["Rock", "Pop", "Country", "Jazz", "Classical"]}}, "required": ["location", "price"]}}}, "model_result_raw": "[find_concert(location='', price=0, genre='Rock')]", "model_result_decoded": [{"find_concert": {"location": "", "price": 0, "genre": "Rock"}}], "possible_answer": {"find_concert": {"location": ["Chicago", "Chicago, IL"], "price": [100], "genre": ["Rock"]}}}
{"id": 288, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'genre': ''. Expected one of ['classical']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find me a classical concert this weekend in Los Angeles with cheap tickets.", "function": {"name": "concert.search", "description": "Locate a concert based on specific criteria like genre, location, and date.", "parameters": {"type": "dict", "properties": {"genre": {"type": "string", "description": "Genre of the concert."}, "location": {"type": "string", "description": "City of the concert."}, "date": {"type": "string", "description": "Date of the concert, e.g. this weekend, today, tomorrow, or date string."}, "price_range": {"type": "string", "enum": ["free", "cheap", "moderate", "expensive"], "description": "Expected price range of the concert tickets. Default is 'free'."}}, "required": ["genre", "location", "date"]}}}, "model_result_raw": "[concert.search(genre='', location='', date='')]", "model_result_decoded": [{"concert.search": {"genre": "", "location": "", "date": ""}}], "possible_answer": {"concert.search": {"genre": ["classical"], "location": ["Los Angeles", "LA"], "date": ["this weekend"], "price_range": ["cheap"]}}}
{"id": 289, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'artist': ''. Expected one of ['Eminem']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get me two tickets for next Eminem concert in New York City.", "function": {"name": "concert_booking.book_ticket", "description": "Book concert tickets for a specific artist in a specified city.", "parameters": {"type": "dict", "properties": {"artist": {"type": "string", "description": "The artist you want to book tickets for."}, "city": {"type": "string", "description": "The city where the concert is."}, "num_tickets": {"type": "integer", "description": "Number of tickets required. Default is 1."}}, "required": ["artist", "city"]}}}, "model_result_raw": "[concert_booking.book_ticket(artist='', city='')]", "model_result_decoded": [{"concert_booking.book_ticket": {"artist": "", "city": ""}}], "possible_answer": {"concert_booking.book_ticket": {"artist": ["Eminem"], "city": ["New York City", "New York City, NY", "NYC"], "num_tickets": [2]}}}
{"id": 290, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': ':Seattle,WA'. Expected one of ['Seattle', 'Seattle, WA']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find concerts near me in Seattle that plays jazz music.", "function": {"name": "concert.find_nearby", "description": "Locate nearby concerts based on specific criteria like genre.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Seattle, WA"}, "genre": {"type": "string", "description": "Genre of music to be played at the concert."}}, "required": ["location", "genre"]}}}, "model_result_raw": "[concert.find_nearby(location=':Seattle,WA', genre='jazz')]", "model_result_decoded": [{"concert.find_nearby": {"location": ":Seattle,WA", "genre": "jazz"}}], "possible_answer": {"concert.find_nearby": {"location": ["Seattle", "Seattle, WA"], "genre": ["jazz", "Jazz"]}}}
{"id": 291, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'artist': ''. Expected one of ['The Weeknd']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What's the timing and location for The Weeknd's concert happening in December?", "function": {"name": "concert.find_details", "description": "Finds details of a concert event.", "parameters": {"type": "dict", "properties": {"artist": {"type": "string", "description": "Name of the artist performing."}, "month": {"type": "string", "description": "Month in which the concert is happening."}, "year": {"type": "integer", "description": "Year of the concert.", "default": 2022}}, "required": ["artist", "month"]}}}, "model_result_raw": "[concert.find_details(artist='', month='')]", "model_result_decoded": [{"concert.find_details": {"artist": "", "month": ""}}], "possible_answer": {"concert.find_details": {"artist": ["The Weeknd"], "month": ["December"], "year": ["", 2022]}}}
{"id": 292, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'key': ':C'. Expected one of ['C']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Generate a melody in C major scale, starting with the note C4, 16 measures long, at 120 beats per minute.", "function": {"name": "music_generator.generate_melody", "description": "Generate a melody based on certain musical parameters.", "parameters": {"type": "dict", "properties": {"key": {"type": "string", "description": "The key of the melody. E.g., 'C' for C major."}, "start_note": {"type": "string", "description": "The first note of the melody, specified in scientific pitch notation. E.g., 'C4'."}, "length": {"type": "integer", "description": "The number of measures in the melody."}, "tempo": {"type": "integer", "description": "The tempo of the melody, in beats per minute. Optional parameter. If not specified, defaults to 120."}}, "required": ["key", "start_note", "length"]}}}, "model_result_raw": "[music_generator.generate_melody(key=':C', start_note='C4', length=16, tempo=120)]", "model_result_decoded": [{"music_generator.generate_melody": {"key": ":C", "start_note": "C4", "length": 16, "tempo": 120}}], "possible_answer": {"music_generator.generate_melody": {"key": ["C"], "start_note": ["C4"], "length": [16], "tempo": [120, ""]}}}
{"id": 294, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'track_length': 372000. Expected one of [180]."], "error_type": "value_error:others", "prompt": {"question": "Create a mix track using notes of C major scale and duration of each note being quarter of a second with a duration of 3 minutes.", "function": {"name": "music_composer.create_mix", "description": "Create a mix of a song based on a particular music scale and duration", "parameters": {"type": "dict", "properties": {"scale": {"type": "string", "description": "The musical scale to be used. E.g: C Major, A Minor, etc."}, "note_duration": {"type": "string", "description": "Duration of each note. Options: 'whole', 'half', 'quarter', 'eighth', 'sixteenth'.", "enum": ["whole", "half", "quarter", "eighth", "sixteenth"]}, "track_length": {"type": "integer", "description": "Length of the mix track in seconds."}}, "required": ["scale", "note_duration", "track_length"]}}}, "model_result_raw": "[music_composer.create_mix(scale='Cmajor', note_duration='quarter', track_length=372000)]", "model_result_decoded": [{"music_composer.create_mix": {"scale": "Cmajor", "note_duration": "quarter", "track_length": 372000}}], "possible_answer": {"music_composer.create_mix": {"scale": ["C Major"], "note_duration": ["quarter"], "track_length": [180]}}}
{"id": 295, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'key': ''. Expected one of ['C']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Generate a major chord progression in C key with four chords.", "function": {"name": "music_generation.create_chord_progression", "description": "Create a chord progression in a specific key and number of chords.", "parameters": {"type": "dict", "properties": {"key": {"type": "string", "description": "The key for the chord progression."}, "chords": {"type": "integer", "description": "Number of chords in the progression."}, "progression_type": {"type": "string", "description": "The type of the chord progression. Optional parameter. Default is 'major'."}}, "required": ["key", "chords"]}}}, "model_result_raw": "[music_generation.create_chord_progression(key='', chords=1, progression_type='major')]", "model_result_decoded": [{"music_generation.create_chord_progression": {"key": "", "chords": 1, "progression_type": "major"}}], "possible_answer": {"music_generation.create_chord_progression": {"key": ["C"], "chords": [4], "progression_type": ["major", ""]}}}
{"id": 296, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'song_title': ''. Expected one of ['Bohemian Rhapsody']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the lyrics to the song 'Bohemian Rhapsody' by Queen.", "function": {"name": "get_song_lyrics", "description": "Retrieve the lyrics of a song based on the artist's name and song title.", "parameters": {"type": "dict", "properties": {"song_title": {"type": "string", "description": "The title of the song."}, "artist_name": {"type": "string", "description": "The name of the artist who performed the song."}, "lang": {"type": "string", "description": "The language of the lyrics. Default is English.", "enum": ["English", "French", "Spanish", "German", "Italian"]}}, "required": ["song_title", "artist_name"]}}}, "model_result_raw": "[get_song_lyrics(song_title='', artist_name='')]", "model_result_decoded": [{"get_song_lyrics": {"song_title": "", "artist_name": ""}}], "possible_answer": {"get_song_lyrics": {"song_title": ["Bohemian Rhapsody"], "artist_name": ["Queen"], "lang": ["English", ""]}}}
{"id": 297, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax. Perhaps you forgot a comma? (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"question": "Generate a major C scale progression with tempo 80 BPM and duration 4 beats.", "function": {"name": "music_generator.generate_scale_progression", "description": "Generate a music scale progression in a specific key with a given tempo and duration.", "parameters": {"type": "dict", "properties": {"key": {"type": "string", "description": "The key in which to generate the scale progression."}, "tempo": {"type": "integer", "description": "The tempo of the scale progression in BPM."}, "duration": {"type": "integer", "description": "The duration of each note in beats."}, "scale_type": {"type": "string", "default": "major", "description": "The type of scale to generate. Defaults to 'major'."}}, "required": ["key", "tempo", "duration"]}}}, "model_result_raw": "[music_generator.generate_scale_progression(key=';\u578b \u041d\u043e\u0442\u0430\u5e8f\u5217\u751f\u6210\uff1aCmajorScalemajor \u0438\u0433\u0440\u043e\u043a 'msPerQuarterNote' = 500, 'bpm' = 80}', tempo=80, duration=4, scale_type='major')]", "possible_answer": {"music_generator.generate_scale_progression": {"key": ["C"], "tempo": [80], "duration": [4], "scale_type": ["major", ""]}}}
{"id": 299, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'key': ''. Expected one of ['C#']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What key signature does C# major have?", "function": {"name": "music_theory.key_signature", "description": "Return the key signature of a major or minor scale.", "parameters": {"type": "dict", "properties": {"key": {"type": "string", "description": "The root of the scale, e.g., 'C', 'F#', 'Ab'."}, "scale_type": {"type": "string", "enum": ["major", "minor"], "description": "Type of the scale, either 'major' or 'minor'. Default is 'major'."}}, "required": ["key"]}}}, "model_result_raw": "[music_theory.key_signature(key='')]", "model_result_decoded": [{"music_theory.key_signature": {"key": ""}}], "possible_answer": {"music_theory.key_signature": {"key": ["C#"], "scale_type": ["major", ""]}}}
{"id": 300, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'key': ''. Expected one of ['C#', 'C sharp']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What is the musical scale associated with C sharp major?", "function": {"name": "musical_scale", "description": "Get the musical scale of a specific key in music theory.", "parameters": {"type": "dict", "properties": {"key": {"type": "string", "description": "The musical key for which the scale will be found."}, "scale_type": {"type": "string", "default": "major", "description": "The type of musical scale."}}, "required": ["key"]}}}, "model_result_raw": "[musical_scale(key='')]", "model_result_decoded": [{"musical_scale": {"key": ""}}], "possible_answer": {"musical_scale": {"key": ["C#", "C sharp"], "scale_type": ["major", ""]}}}
{"id": 302, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'key': ''. Expected one of ['C']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What is the third major chord in C major scale?", "function": {"name": "get_third_chord", "description": "Calculate the third major chord in a given key.", "parameters": {"type": "dict", "properties": {"key": {"type": "string", "description": "The key of the scale."}, "type": {"type": "string", "description": "Type of the scale, either major or minor. Default is 'major'."}}, "required": ["key"]}}}, "model_result_raw": "[get_third_chord(key='')]", "model_result_decoded": [{"get_third_chord": {"key": ""}}], "possible_answer": {"get_third_chord": {"key": ["C"], "type": ["major", ""]}}}
{"id": 304, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'player_name': ''. Expected one of ['Cristiano Ronaldo']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get the player stats of Cristiano Ronaldo in the 2019-2020 season", "function": {"name": "soccer_stat.get_player_stats", "description": "Retrieve soccer player statistics for a given season.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "Name of the player."}, "season": {"type": "string", "description": "Soccer season, usually specified by two years."}, "league": {"type": "string", "description": "Optional - the soccer league, defaults to all leagues if not specified."}}, "required": ["player_name", "season"]}}}, "model_result_raw": "[soccer_stat.get_player_stats(player_name='', season='')]", "model_result_decoded": [{"soccer_stat.get_player_stats": {"player_name": "", "season": ""}}], "possible_answer": {"soccer_stat.get_player_stats": {"player_name": ["Cristiano Ronaldo"], "season": ["2019-2020"], "league": [""]}}}
{"id": 305, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'player_name': ''. Expected one of ['LeBron James']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get point and rebound stats for player 'LeBron James' from last basketball game", "function": {"name": "player_stats.getLastGame", "description": "Get last game statistics for a specific player in basketball", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The name of the basketball player."}, "team": {"type": "string", "description": "The team that player currently plays for."}, "metrics": {"type": "array", "items": {"type": "string", "enum": ["Points", "Rebounds", "Assists", "Blocks"]}, "description": "Specific metrics to retrieve. If no value is specified, all available metrics will be returned by default."}}, "required": ["player_name", "team"]}}}, "model_result_raw": "[player_stats.getLastGame(player_name='', team='Lakers', metrics=[])]", "model_result_decoded": [{"player_stats.getLastGame": {"player_name": "", "team": "Lakers", "metrics": []}}], "possible_answer": {"player_stats.getLastGame": {"player_name": ["LeBron James"], "team": ["Los Angeles Lakers", "LAL", "Lakers"], "metrics": [["Points", "Rebounds"]]}}}
{"id": 306, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'player_name': ': Messi'. Expected one of ['Messi', 'Lionel Messi']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Calculate the overall goal and assist of soccer player Messi in La Liga 2020-2021 season", "function": {"name": "sports_stats.get_performance", "description": "Compute the performance score of a soccer player given his game stats for a specific tournament in a season.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "Name of the player."}, "tournament": {"type": "string", "description": "Name of the soccer tournament."}, "season": {"type": "string", "description": "Specific season in format 'YYYY-YYYY'."}, "performance_indicator": {"type": "array", "items": {"type": "string", "enum": ["Goals Scored", "Assists Made", "Saves Made", "Cards Received"]}, "description": "Array of performance indicators. Use as much as possible. Default to use all if not specified."}}, "required": ["player_name", "tournament", "season"]}}}, "model_result_raw": "[sports_stats.get_performance(player_name=': Messi', tournament=': La Liga', season=': 2020-2021')]", "model_result_decoded": [{"sports_stats.get_performance": {"player_name": ": Messi", "tournament": ": La Liga", "season": ": 2020-2021"}}], "possible_answer": {"sports_stats.get_performance": {"player_name": ["Messi", "Lionel Messi"], "tournament": ["La Liga"], "season": ["2020-2021"], "performance_indicator": [["Goals Scored", "Assists Made"]]}}}
{"id": 307, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'matches': 13. Expected one of [10]."], "error_type": "value_error:others", "prompt": {"question": "Find average batting score of a cricketer, Virat Kohli for past 10 matches", "function": {"name": "average_batting_score", "description": "Get the average batting score of a cricketer for specified past matches.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "Name of the cricket player."}, "matches": {"type": "integer", "description": "Number of past matches to consider for average calculation."}, "match_format": {"type": "string", "description": "Format of the cricket matches considered (e.g., 'T20', 'ODI', 'Test'). Default is 'T20'."}}, "required": ["player_name", "matches"]}}}, "model_result_raw": "[average_batting_score(player_name='Virat Kohli', matches=13, match_format='test_match_series')]", "model_result_decoded": [{"average_batting_score": {"player_name": "Virat Kohli", "matches": 13, "match_format": "test_match_series"}}], "possible_answer": {"average_batting_score": {"player_name": ["Virat Kohli"], "matches": [10], "match_format": ["T20", ""]}}}
{"id": 308, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'teams': ['Lakers', ':Clippers']. Expected one of [['Lakers', 'Clippers'], ['Clippers', 'Lakers']]."], "error_type": "value_error:list/tuple", "prompt": {"question": "Who won the basketball game between Lakers and Clippers on Jan 28, 2021?", "function": {"name": "game_result.get_winner", "description": "Get the winner of a specific basketball game.", "parameters": {"type": "dict", "properties": {"teams": {"type": "array", "items": {"type": "string"}, "description": "List of two teams who played the game."}, "date": {"type": "string", "description": "The date of the game, formatted as YYYY-MM-DD."}, "venue": {"type": "string", "optional": true, "description": "Optional: The venue of the game. Default is 'home'."}}, "required": ["teams", "date"]}}}, "model_result_raw": "[game_result.get_winner(teams=['Lakers', ':Clippers'], date='Jan 28, 2021')]", "model_result_decoded": [{"game_result.get_winner": {"teams": ["Lakers", ":Clippers"], "date": "Jan 28, 2021"}}], "possible_answer": {"game_result.get_winner": {"teams": [["Lakers", "Clippers"], ["Clippers", "Lakers"]], "date": ["2021-01-28", "01/28/2021", "Jan.28,2021"], "venue": ["", true]}}}
{"id": 309, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'team_name': ''. Expected one of ['Manchester United', 'Man United', 'Man U', 'MUFC']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What are the next five matches for Manchester United and who are they playing against in Premier League?", "function": {"name": "sports.match_schedule", "description": "Retrieve the match schedule for a specific sports team.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "num_matches": {"type": "integer", "description": "The number of upcoming matches you want to get."}, "league": {"type": "string", "description": "The sports league of the team. This is an optional parameter. Default is 'English Premier League'."}}, "required": ["team_name", "num_matches"]}}}, "model_result_raw": "[sports.match_schedule(team_name='', num_matches=5)]", "model_result_decoded": [{"sports.match_schedule": {"team_name": "", "num_matches": 5}}], "possible_answer": {"sports.match_schedule": {"team_name": ["Manchester United", "Man United", "Man U", "MUFC"], "num_matches": [5], "league": ["English Premier League", ""]}}}
{"id": 311, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'player_name': ''. Expected one of ['LeBron James']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What are the career stats of basketball player LeBron James?", "function": {"name": "get_career_stats", "description": "Retrieve the career statistics of a basketball player based on the player's name.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The name of the basketball player."}, "team": {"type": "string", "description": "The team that the player currently plays for or has played for (Optional). Default to use all teams if not specified."}}, "required": ["player_name"]}}}, "model_result_raw": "[get_career_stats(player_name='')]", "model_result_decoded": [{"get_career_stats": {"player_name": ""}}], "possible_answer": {"get_career_stats": {"player_name": ["LeBron James"], "team": [""]}}}
{"id": 312, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'name': ''. Expected one of ['Lebron James']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find me the detailed profile of basketball player Lebron James", "function": {"name": "sports_db.find_athlete", "description": "Find the profile information of a sports athlete based on their full name.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The full name of the athlete."}, "team": {"type": "string", "description": "The team the athlete belongs to. Default to all teams if not specified."}, "sport": {"type": "string", "description": "The sport that athlete plays.", "enum": ["Basketball", "Baseball", "Football", "Soccer"]}}, "required": ["name", "sport"]}}}, "model_result_raw": "[sports_db.find_athlete(name='', team='Lakers', sport='Basketball')]", "model_result_decoded": [{"sports_db.find_athlete": {"name": "", "team": "Lakers", "sport": "Basketball"}}], "possible_answer": {"sports_db.find_athlete": {"name": ["Lebron James"], "sport": ["Basketball"], "team": [""]}}}
{"id": 314, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'name': ''. Expected one of ['Lionel Messi', 'Messi']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What's the total worth in euro of Messi according to latest data?", "function": {"name": "celebrity_net_worth.get", "description": "Get the total net worth of a sports celebrity based on most recent data.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The full name of the sports celebrity."}, "currency": {"type": "string", "description": "The currency in which the net worth will be returned. Default is 'USD'."}}, "required": ["name", "currency"]}}}, "model_result_raw": "[celebrity_net_worth.get(name='', currency='EURO')]", "model_result_decoded": [{"celebrity_net_worth.get": {"name": "", "currency": "EURO"}}], "possible_answer": {"celebrity_net_worth.get": {"name": ["Lionel Messi", "Messi"], "currency": ["EUR", "euro"]}}}
{"id": 315, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'celebrity_name': ''. Expected one of ['Lionel Messi', 'Messi']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find all the major achievements of the footballer Lionel Messi.", "function": {"name": "sports_celebrity.get_major_achievements", "description": "Returns a list of major achievements of a particular sports celebrity.", "parameters": {"type": "dict", "properties": {"celebrity_name": {"type": "string", "description": "Name of the sports celebrity."}, "sports": {"type": "string", "description": "Type of sports the celebrity involved in. Default is Football."}, "team": {"type": "string", "description": "Optional. Team where celebrity currently plays. Default is 'all'"}}, "required": ["celebrity_name"]}}}, "model_result_raw": "[sports_celebrity.get_major_achievements(celebrity_name='')]", "model_result_decoded": [{"sports_celebrity.get_major_achievements": {"celebrity_name": ""}}], "possible_answer": {"sports_celebrity.get_major_achievements": {"celebrity_name": ["Lionel Messi", "Messi"], "sports": ["Football", "Soccer", ""], "team": ["", "all"]}}}
{"id": 316, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'top': 10. Expected one of [1, '']."], "error_type": "value_error:others", "prompt": {"question": "Get the NBA team's ranking with the best defence in the 2021 season.", "function": {"name": "get_defense_ranking", "description": "Retrieve the defence ranking of NBA teams in a specified season.", "parameters": {"type": "dict", "properties": {"season": {"type": "integer", "description": "The NBA season to get defence ranking from."}, "top": {"type": "integer", "default": 1, "description": "Number of top teams in defence ranking to fetch."}}, "required": ["season"]}}}, "model_result_raw": "[get_defense_ranking(season=2021, top=10)]", "model_result_decoded": [{"get_defense_ranking": {"season": 2021, "top": 10}}], "possible_answer": {"get_defense_ranking": {"season": [2021], "top": [1, ""]}}}
{"id": 317, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'sport': ''. Expected one of ['Tennis']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the current world rank of a Tennis player, Serena Williams.", "function": {"name": "get_sport_ranking", "description": "Retrieve the current world ranking of a sportsperson based on the sport and player's name.", "parameters": {"type": "dict", "properties": {"sport": {"type": "string", "description": "Name of the sport."}, "player_name": {"type": "string", "description": "Name of the player."}, "gender": {"type": "string", "description": "Gender of the player. This is optional. The possible values are male or female.", "default": "all"}}, "required": ["sport", "player_name"]}}}, "model_result_raw": "[get_sport_ranking(sport='', player_name='')]", "model_result_decoded": [{"get_sport_ranking": {"sport": "", "player_name": ""}}], "possible_answer": {"get_sport_ranking": {"sport": ["Tennis"], "player_name": ["Serena Williams"], "gender": ["", "all"]}}}
{"id": 318, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'team_name': ''. Expected one of ['LA Lakers']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the ranking of LA Lakers in the NBA 2021 regular season.", "function": {"name": "get_team_rank", "description": "Get the team ranking in a sports league based on season and type.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "league": {"type": "string", "description": "The name of the league in which the team competes."}, "season": {"type": "string", "description": "The season for which the team's ranking is sought."}, "type": {"type": "string", "description": "Type of the season: regular or playoff.", "enum": ["regular", "playoff"]}}, "required": ["team_name", "league", "season", "type"]}}}, "model_result_raw": "[get_team_rank(team_name='', league='', season='', type='regular')]", "model_result_decoded": [{"get_team_rank": {"team_name": "", "league": "", "season": "", "type": "regular"}}], "possible_answer": {"get_team_rank": {"team_name": ["LA Lakers"], "league": ["NBA"], "season": ["2021"], "type": ["regular"]}}}
{"id": 319, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'team_name': ''. Expected one of ['Germany']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What is the FIFA ranking of Germany's men soccer team for the year 2021?", "function": {"name": "get_team_ranking", "description": "Retrieve the FIFA ranking of a specific soccer team for a certain year.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the soccer team."}, "year": {"type": "integer", "description": "The year for which the ranking is to be retrieved."}, "gender": {"type": "string", "description": "The gender of the team. It can be either 'men' or 'women'. Default is 'men'."}}, "required": ["team_name", "year"]}}}, "model_result_raw": "[get_team_ranking(team_name='', year=2021)]", "model_result_decoded": [{"get_team_ranking": {"team_name": "", "year": 2021}}], "possible_answer": {"get_team_ranking": {"team_name": ["Germany"], "year": [2021], "gender": ["men", ""]}}}
{"id": 320, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'team': ''. Expected one of ['Manchester United', 'Man United', 'Man U', 'MUFC']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What is the ranking of Manchester United in Premier League?", "function": {"name": "sports_ranking", "description": "Fetch the ranking of a specific sports team in a specific league", "parameters": {"type": "dict", "properties": {"team": {"type": "string", "description": "The name of the team."}, "league": {"type": "string", "description": "The name of the league."}, "season": {"type": "integer", "description": "Optional parameter to specify the season, default is the current season if not specified."}}, "required": ["team", "league"]}}}, "model_result_raw": "[sports_ranking(team='', league='Premier League')]", "model_result_decoded": [{"sports_ranking": {"team": "", "league": "Premier League"}}], "possible_answer": {"sports_ranking": {"team": ["Manchester United", "Man United", "Man U", "MUFC"], "league": ["Premier League"], "season": [""]}}}
{"id": 321, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'team': ''. Expected one of ['Golden State Warriors', 'GSW']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Fetch the basketball league standings, where Golden State Warriors stand in current season with details", "function": {"name": "sports_ranking.get_team_position", "description": "Retrieve a team's position and stats in the basketball league for a given season.", "parameters": {"type": "dict", "properties": {"team": {"type": "string", "description": "The name of the team."}, "season": {"type": "string", "description": "The season for which data should be fetched."}, "detailed": {"type": "boolean", "description": "Flag to retrieve detailed stats or just the position.", "default": false}}, "required": ["team", "season"]}}}, "model_result_raw": "[sports_ranking.get_team_position(team='', season='')]", "model_result_decoded": [{"sports_ranking.get_team_position": {"team": "", "season": ""}}], "possible_answer": {"sports_ranking.get_team_position": {"team": ["Golden State Warriors", "GSW"], "season": ["current", "2022-2023"], "detailed": [true]}}}
{"id": 322, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'team': ''. Expected one of ['Barcelona', 'FC Barcelona']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What's the ranking of Barcelona in the 2021 La Liga season?", "function": {"name": "sports_ranking", "description": "Get the ranking of a team in a given sports league and season.", "parameters": {"type": "dict", "properties": {"team": {"type": "string", "description": "The name of the team."}, "league": {"type": "string", "description": "The name of the sports league."}, "season": {"type": "string", "description": "The season for which ranking needs to be obtained."}}, "required": ["team", "league", "season"]}}}, "model_result_raw": "[sports_ranking(team='', league='La Liga 2021', season='2021')]", "model_result_decoded": [{"sports_ranking": {"team": "", "league": "La Liga 2021", "season": "2021"}}], "possible_answer": {"sports_ranking": {"team": ["Barcelona", "FC Barcelona"], "league": ["La Liga"], "season": ["2021"]}}}
{"id": 323, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'team': 'Liverpool FC'. Expected one of ['Liverpool Football Club', 'Liverpool', 'LFC']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get the current ranking for Liverpool Football Club in the Premier League.", "function": {"name": "sports_ranking.get_current", "description": "Retrieve the current ranking of a specific team in a particular league.", "parameters": {"type": "dict", "properties": {"team": {"type": "string", "description": "The name of the team whose ranking is sought."}, "league": {"type": "string", "description": "The league in which the team participates."}, "season": {"type": "string", "description": "The season for which the ranking is sought. Defaults to the current season if not provided."}}, "required": ["team", "league"]}}}, "model_result_raw": "[sports_ranking.get_current(team='Liverpool FC', league='Premier League')]", "model_result_decoded": [{"sports_ranking.get_current": {"team": "Liverpool FC", "league": "Premier League"}}], "possible_answer": {"sports_ranking.get_current": {"team": ["Liverpool Football Club", "Liverpool", "LFC"], "league": ["Premier League", "EPL", "English Premier League"], "season": [""]}}}
{"id": 324, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'gender': 'woman'. Expected one of ['women', 'female', 'ladies']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Who is ranked as the top player in woman tennis?", "function": {"name": "sports_ranking.get_top_player", "description": "Get the top player in a specific sport.", "parameters": {"type": "dict", "properties": {"sport": {"type": "string", "description": "The type of sport."}, "gender": {"type": "string", "description": "The gender of the sport category. Optional.", "default": "men"}}, "required": ["sport"]}}}, "model_result_raw": "[sports_ranking.get_top_player(sport='tennis', gender='woman')]", "model_result_decoded": [{"sports_ranking.get_top_player": {"sport": "tennis", "gender": "woman"}}], "possible_answer": {"sports_ranking.get_top_player": {"sport": ["tennis"], "gender": ["women", "female", "ladies"]}}}
{"id": 329, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'name': ''. Expected one of ['Ticket to Ride']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the rating and player count of the board game 'Ticket to Ride'.", "function": {"name": "boardgame.get_info", "description": "Retrieve detailed information of a board game.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "Name of the board game."}, "parameters": {"type": "array", "items": {"type": "string", "enum": ["player count", "playing time", "age", "mechanics", "rating"]}, "description": "Game characteristics interested."}, "language": {"type": "string", "description": "The preferred language for the game information, default is English"}}, "required": ["name", "parameters"]}}}, "model_result_raw": "[boardgame.get_info(name='', parameters=[], language='python')]", "model_result_decoded": [{"boardgame.get_info": {"name": "", "parameters": [], "language": "python"}}], "possible_answer": {"boardgame.get_info": {"name": ["Ticket to Ride"], "parameters": [["rating", "player count"], ["player count", "rating"]], "language": ["", "English"]}}}
{"id": 330, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'number': 6. Expected one of [7]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the odds of rolling a 7 with two dice in the board game Monopoly.", "function": {"name": "monopoly_odds_calculator", "description": "Calculates the probability of rolling a certain sum with two dice, commonly used in board game like Monopoly.", "parameters": {"type": "dict", "properties": {"number": {"type": "integer", "description": "The number for which the odds are calculated."}, "dice_number": {"type": "integer", "description": "The number of dice involved in the roll."}, "dice_faces": {"type": "integer", "description": "The number of faces on a single die. Default is 6 for standard six-faced die."}}, "required": ["number", "dice_number"]}}}, "model_result_raw": "[monopoly_odds_calculator(number=6, dice_number=2)]", "model_result_decoded": [{"monopoly_odds_calculator": {"number": 6, "dice_number": 2}}], "possible_answer": {"monopoly_odds_calculator": {"number": [7], "dice_number": [2], "dice_faces": [6, ""]}}}
{"id": 332, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': ''. Expected one of ['New York', 'New York City', 'New York City, NY', 'NYC']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the top chess players in New York with a rating above 2300.", "function": {"name": "board_game.chess.get_top_players", "description": "Find top chess players in a location based on rating.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city you want to find the players from."}, "minimum_rating": {"type": "integer", "description": "Minimum rating to filter the players."}, "number_of_players": {"type": "integer", "default": 10, "description": "Number of players you want to retrieve, default value is 10"}}, "required": ["location", "minimum_rating"]}}}, "model_result_raw": "[board_game.chess.get_top_players(location='', minimum_rating=0)]", "model_result_decoded": [{"board_game.chess.get_top_players": {"location": "", "minimum_rating": 0}}], "possible_answer": {"board_game.chess.get_top_players": {"location": ["New York", "New York City", "New York City, NY", "NYC"], "minimum_rating": [2300], "number_of_players": ["", 10]}}}
{"id": 333, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'player_name': ''. Expected one of ['Magnus Carlsen']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What's the chess classical rating of Magnus Carlsen?", "function": {"name": "chess.rating", "description": "Fetches the current chess rating of a given player", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The full name of the chess player."}, "variant": {"type": "string", "description": "The variant of chess for which rating is requested (e.g., 'classical', 'blitz', 'bullet'). Default is 'classical'."}}, "required": ["player_name"]}}}, "model_result_raw": "[chess.rating(player_name='')]", "model_result_decoded": [{"chess.rating": {"player_name": ""}}], "possible_answer": {"chess.rating": {"player_name": ["Magnus Carlsen"], "variant": ["classical", ""]}}}
{"id": 334, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': ','. Expected one of ['London, United Kingdom', 'London']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the high and low temperatures, humidity, and precipitation for London, United Kingdom for the next 3 days.", "function": {"name": "detailed_weather_forecast", "description": "Retrieve a detailed weather forecast for a specific location and time frame, including high/low temperatures, humidity, and precipitation.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the weather for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}, "details": {"type": "array", "items": {"type": "string", "enum": ["high_low_temperature", "humidity", "precipitation"]}, "description": "Specific weather details required in the forecast."}}, "required": ["location", "days", "details"]}}}, "model_result_raw": "[detailed_weather_forecast(location=',', days=3, details=['high_low_temperature', 'humidity', 'precipitation'])]", "model_result_decoded": [{"detailed_weather_forecast": {"location": ",", "days": 3, "details": ["high_low_temperature", "humidity", "precipitation"]}}], "possible_answer": {"detailed_weather_forecast": {"location": ["London, United Kingdom", "London"], "days": [3], "details": [["high_low_temperature", "humidity", "precipitation"]]}}}
{"id": 335, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'player_cards': ['Ace', 'Ten']. Expected one of [['A', '10']]."], "error_type": "value_error:list/tuple", "prompt": {"question": "Check who is the winner in a game of blackjack given player having A and 10, dealer having 10 and 9. The Ace is considered 1.", "function": {"name": "blackjack.check_winner", "description": "Checks and determines the winner in a game of blackjack.", "parameters": {"type": "dict", "properties": {"player_cards": {"type": "array", "items": {"type": "string"}, "description": "Cards held by the player."}, "dealer_cards": {"type": "array", "items": {"type": "string"}, "description": "Cards held by the dealer."}, "ace_value": {"type": "integer", "description": "The value considered for the ace card, can be either 1 or 11.", "default": 11}}, "required": ["player_cards", "dealer_cards"]}}}, "model_result_raw": "[blackjack.check_winner(player_cards=['Ace', 'Ten'], dealer_cards=['Ten', 'Nine'])]", "model_result_decoded": [{"blackjack.check_winner": {"player_cards": ["Ace", "Ten"], "dealer_cards": ["Ten", "Nine"]}}], "possible_answer": {"blackjack.check_winner": {"player_cards": [["A", "10"]], "dealer_cards": [["10", "9"]], "ace_value": [1]}}}
{"id": 337, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'num_cards': 52. Expected one of [3]."], "error_type": "value_error:others", "prompt": {"question": "Shuffle a deck of cards, and draw 3 cards from the top.", "function": {"name": "cards.shuffle_and_draw", "description": "Shuffle a standard deck of 52 cards and draw a specified number of cards from the top.", "parameters": {"type": "dict", "properties": {"num_cards": {"type": "integer", "description": "Number of cards to be drawn. The default is 1 if no value is provided."}}, "required": ["num_cards"]}}}, "model_result_raw": "[cards.shuffle_and_draw(num_cards=52)]", "model_result_decoded": [{"cards.shuffle_and_draw": {"num_cards": 52}}], "possible_answer": {"cards.shuffle_and_draw": {"num_cards": [3]}}}
{"id": 338, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Function name 'poker_game_winner' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"question": "In a texas holdem game, Who won in the poker game with players Alex, Sam, Robert and Steve given the cards Alex':['A of spades', 'K of spades'], 'Sam': ['2 of diamonds', '3 of clubs'], 'Robert': ['Q of hearts', '10 of hearts'], 'Steve': ['4 of spades', '5 of spades']?", "function": {"name": "poker_game_winner", "description": "Identify the winner in a poker game based on the cards.", "parameters": {"type": "dict", "properties": {"players": {"type": "array", "items": {"type": "string"}, "description": "Names of the players in a list."}, "cards": {"type": "dict", "description": "An object containing the player name as key and the cards as values in a list."}, "type": {"type": "string", "description": "Type of poker game. Defaults to 'Texas Holdem'"}}, "required": ["players", "cards"]}}}, "model_result_raw": "[error.message(error=\"Error occurred\")]", "model_result_decoded": [{"error.message": {"error": "Error occurred"}}], "possible_answer": {"poker_game_winner": {"players": [["Alex", "Sam", "Robert", "Steve"]], "cards": [{"Alex": [["A of spades", "K of spades"]], "Sam": [["2 of diamonds", "3 of clubs"]], "Robert": [["Q of hearts", "10 of hearts"]], "Steve": [["4 of spades", "5 of spades"]]}], "type": ["Texas Holdem", ""]}}}
{"id": 339, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'cards_drawn': 0. Expected one of ['', 1]."], "error_type": "value_error:others", "prompt": {"question": "What is the probability of drawing a heart card from a deck of 52 cards?", "function": {"name": "card_game_probability.calculate", "description": "Calculate the probability of drawing a certain card or suit from a deck of cards.", "parameters": {"type": "dict", "properties": {"total_cards": {"type": "integer", "description": "Total number of cards in the deck."}, "desired_cards": {"type": "integer", "description": "Number of cards in the deck that satisfy the conditions."}, "cards_drawn": {"type": "integer", "default": 1, "description": "Number of cards drawn from the deck."}}, "required": ["total_cards", "desired_cards"]}}}, "model_result_raw": "[card_game_probability.calculate(total_cards=52, desired_cards=13, cards_drawn=0)]", "model_result_decoded": [{"card_game_probability.calculate": {"total_cards": 52, "desired_cards": 13, "cards_drawn": 0}}], "possible_answer": {"card_game_probability.calculate": {"total_cards": [52], "desired_cards": [13], "cards_drawn": ["", 1]}}}
{"id": 340, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'deck_size': 15. Expected one of [52]."], "error_type": "value_error:others", "prompt": {"question": "What is the probability of getting a full house in poker?", "function": {"name": "poker_probability.full_house", "description": "Calculate the probability of getting a full house in a poker game.", "parameters": {"type": "dict", "properties": {"deck_size": {"type": "integer", "description": "The size of the deck. Default is 52."}, "hand_size": {"type": "integer", "description": "The size of the hand. Default is 5."}}, "required": ["deck_size", "hand_size"]}}}, "model_result_raw": "[poker_probability.full_house(deck_size=15, hand_size=5)]", "model_result_decoded": [{"poker_probability.full_house": {"deck_size": 15, "hand_size": 5}}], "possible_answer": {"poker_probability.full_house": {"deck_size": [52], "hand_size": [5]}}}
{"id": 341, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'player2': ':'. Expected one of ['Mike']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Determine the winner in a Poker game with John having a Hand of 8\u2665, 10\u2665, J\u2665, Q\u2665, K\u2665 and Mike having 9\u2660, J\u2660, 10\u2660, Q\u2660, K\u2660.", "function": {"name": "card_games.poker_determine_winner", "description": "Determines the winner in a game of Poker based on the cards in each players' hands.", "parameters": {"type": "dict", "properties": {"player1": {"type": "string", "description": "The first player's name."}, "hand1": {"type": "array", "items": {"type": "string"}, "description": "The list of cards (as strings) in first player's hand. E.g ['10\u2660', 'J\u2660']"}, "player2": {"type": "string", "description": "The second player's name."}, "hand2": {"type": "array", "items": {"type": "string"}, "description": "The list of cards (as strings) in second player's hand. E.g ['9\u2665', '10\u2665']"}}, "required": ["player1", "hand1", "player2", "hand2"]}}}, "model_result_raw": "[card_games.poker_determine_winner(player1='John', hand1=['8\u2665', '10\u2665', 'J\u2665', 'Q\u2665', 'K\u2665'], player2=':', hand2=[])]", "model_result_decoded": [{"card_games.poker_determine_winner": {"player1": "John", "hand1": ["8\u2665", "10\u2665", "J\u2665", "Q\u2665", "K\u2665"], "player2": ":", "hand2": []}}], "possible_answer": {"card_games.poker_determine_winner": {"player1": ["John"], "hand1": [["8\u2665", "10\u2665", "J\u2665", "Q\u2665", "K\u2665"]], "player2": ["Mike"], "hand2": [["9\u2660", "J\u2660", "10\u2660", "Q\u2660", "K\u2660"]]}}}
{"id": 342, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'suit': ''. Expected one of ['hearts']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What are the odds of drawing a heart card from a deck without joker?", "function": {"name": "deck_of_cards.odds", "description": "Compute the probability of drawing a specific suit from a given deck of cards.", "parameters": {"type": "dict", "properties": {"suit": {"type": "string", "description": "The card suit. Valid values include: 'spades', 'clubs', 'hearts', 'diamonds'."}, "deck_type": {"type": "string", "description": "Type of deck, normal deck includes joker, and without_joker deck excludes joker.", "default": "normal"}}, "required": ["suit", "deck_type"]}}}, "model_result_raw": "[deck_of_cards.odds(suit='', deck_type='')]", "model_result_decoded": [{"deck_of_cards.odds": {"suit": "", "deck_type": ""}}], "possible_answer": {"deck_of_cards.odds": {"suit": ["hearts"], "deck_type": ["without_joker", "normal"]}}}
{"id": 344, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'game': 'Super Mario'. Expected one of ['Zelda']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Fetch player statistics of 'Zelda' on Switch for user 'Sam'.", "function": {"name": "game_stats.fetch_player_statistics", "description": "Fetch player statistics for a specific video game for a given user.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The name of the video game."}, "username": {"type": "string", "description": "The username of the player."}, "platform": {"type": "string", "description": "The platform user is playing on.", "default": "PC"}}, "required": ["game", "username"]}}}, "model_result_raw": "[game_stats.fetch_player_statistics(game='Super Mario', username='Sam', platform='Switch')]", "model_result_decoded": [{"game_stats.fetch_player_statistics": {"game": "Super Mario", "username": "Sam", "platform": "Switch"}}], "possible_answer": {"game_stats.fetch_player_statistics": {"game": ["Zelda"], "username": ["Sam"], "platform": ["Switch"]}}}
{"id": 346, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'game_name': ''. Expected one of ['Super Mario Bros.']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the value of a vintage Super Mario Bros. game from 1985 like new.", "function": {"name": "game_valuation", "description": "Get the current market value of a vintage video game.", "parameters": {"type": "dict", "properties": {"game_name": {"type": "string", "description": "The name of the game."}, "release_year": {"type": "integer", "description": "The year the game was released."}, "condition": {"type": "string", "enum": ["New", "Like New", "Used", "Fair", "Poor"], "description": "The condition of the game. Default is 'Used'."}}, "required": ["game_name", "release_year"]}}}, "model_result_raw": "[game_valuation(game_name='', release_year=1985, condition='New')]", "model_result_decoded": [{"game_valuation": {"game_name": "", "release_year": 1985, "condition": "New"}}], "possible_answer": {"game_valuation": {"game_name": ["Super Mario Bros."], "release_year": [1985], "condition": ["Like New", "New"]}}}
{"id": 347, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'game_name': ''. Expected one of ['Animal Crossing: New Horizons']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get all collectable items from the game 'Animal Crossing: New Horizons' during the Spring season.", "function": {"name": "get_collectables_in_season", "description": "Retrieve a list of collectable items in a specific game during a specified season.", "parameters": {"type": "dict", "properties": {"game_name": {"type": "string", "description": "Name of the game."}, "season": {"type": "string", "description": "The season for which to retrieve the collectable items."}, "item_type": {"type": "string", "description": "The type of item to search for. Default is 'all'. Possible values: 'all', 'bug', 'fish', 'sea creatures', etc."}}, "required": ["game_name", "season"]}}}, "model_result_raw": "[get_collectables_in_season(game_name='', season='spring')]", "model_result_decoded": [{"get_collectables_in_season": {"game_name": "", "season": "spring"}}], "possible_answer": {"get_collectables_in_season": {"game_name": ["Animal Crossing: New Horizons"], "season": ["Spring"], "item_type": ["", "all"]}}}
{"id": 349, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'player_name': ''. Expected one of ['StarPlayer']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Create a new player profile for the game with name 'StarPlayer' and character class 'Mage', set the starting level to 5.", "function": {"name": "create_player_profile", "description": "Create a new player profile with character name, class and starting level.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The desired name of the player."}, "_class": {"type": "string", "description": "The character class for the player"}, "starting_level": {"type": "integer", "description": "The starting level for the player", "default": 1}}, "required": ["player_name", "_class"]}}}, "model_result_raw": "[create_player_profile(player_name='', _class='')]", "model_result_decoded": [{"create_player_profile": {"player_name": "", "_class": ""}}], "possible_answer": {"create_player_profile": {"player_name": ["StarPlayer"], "_class": ["Mage"], "starting_level": [5]}}}
{"id": 353, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'platform': 'PC'. Expected one of ['Nintendo Switch', 'all platforms']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get the average user score for the game 'The Legend of Zelda: Breath of the Wild' from GameSpot.", "function": {"name": "gamespot.getAverageUserScore", "description": "Retrieve the average user score of a game from GameSpot.", "parameters": {"type": "dict", "properties": {"game_name": {"type": "string", "description": "The name of the game."}, "platform": {"type": "string", "description": "The platform the game was released on (e.g., Nintendo Switch, PS5, etc.)", "default": "all platforms"}}, "required": ["game_name", "platform"]}}}, "model_result_raw": "[gamespot.getAverageUserScore(game_name='The Legend of Zelda: Breath of the Wild', platform='PC')]", "model_result_decoded": [{"gamespot.getAverageUserScore": {"game_name": "The Legend of Zelda: Breath of the Wild", "platform": "PC"}}], "possible_answer": {"gamespot.getAverageUserScore": {"game_name": ["The Legend of Zelda: Breath of the Wild"], "platform": ["Nintendo Switch", "all platforms"]}}}
{"id": 355, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Optional parameter 'ingredient_preference' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Find a vegan soup recipe that takes under 30 minutes to make.", "function": {"name": "get_vegan_recipe", "description": "Retrieve a vegan soup recipe based on the provided cooking time.", "parameters": {"type": "dict", "properties": {"dish_type": {"type": "string", "description": "The type of dish, e.g. soup, dessert, etc.", "enum": ["soup", "main dish", "dessert", "salad"]}, "cooking_time": {"type": "integer", "description": "The maximum cooking time for the recipe in minutes."}, "ingredient_preference": {"type": "array", "items": {"type": "string"}, "description": "Preferred ingredients to be included in the recipe, if any. Default to not use it if not provided."}}, "required": ["dish_type", "cooking_time"]}}}, "model_result_raw": "[get_vegan_recipe(dish_type='soup', cooking_time=30)]", "model_result_decoded": [{"get_vegan_recipe": {"dish_type": "soup", "cooking_time": 30}}], "possible_answer": {"get_vegan_recipe": {"dish_type": ["soup"], "cooking_time": [30], "ingredient_preference": [["vegan"]]}}}
{"id": 356, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'website': ''. Expected one of ['Foodnetwork.com']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "How many calories in the Beef Lasagna Recipe from Foodnetwork.com?", "function": {"name": "recipe_info.get_calories", "description": "Retrieve the amount of calories from a specific recipe in a food website.", "parameters": {"type": "dict", "properties": {"website": {"type": "string", "description": "The food website that has the recipe."}, "recipe": {"type": "string", "description": "Name of the recipe."}, "optional_meal_time": {"type": "string", "description": "Specific meal time of the day for the recipe (optional, could be 'Breakfast', 'Lunch', 'Dinner'). Default is all if not specified."}}, "required": ["website", "recipe"]}}}, "model_result_raw": "[recipe_info.get_calories(website='', recipe='')]", "model_result_decoded": [{"recipe_info.get_calories": {"website": "", "recipe": ""}}], "possible_answer": {"recipe_info.get_calories": {"website": ["Foodnetwork.com"], "recipe": ["Beef Lasagna"], "optional_meal_time": [""]}}}
{"id": 358, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'dish_name': ':str'. Expected one of ['chocolate cake', 'vegan chocolate cake']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get the recipe for vegan chocolate cake including the steps for preparation.", "function": {"name": "get_recipe", "description": "Fetch the recipe for a specific dish along with preparation steps.", "parameters": {"type": "dict", "properties": {"dish_name": {"type": "string", "description": "Name of the dish whose recipe needs to be fetched."}, "diet_preference": {"type": "string", "description": "Preferred dietary consideration like vegan, vegetarian, gluten-free etc. Default is none.", "default": "none"}}, "required": ["dish_name"]}}}, "model_result_raw": "[get_recipe(dish_name=':str', diet_preference='vegan')]", "model_result_decoded": [{"get_recipe": {"dish_name": ":str", "diet_preference": "vegan"}}], "possible_answer": {"get_recipe": {"dish_name": ["chocolate cake", "vegan chocolate cake"], "diet_preference": ["vegan"]}}}
{"id": 359, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'diet': ['Gluten Free', 'Vegetarian', 'Vegan', 'Dairy Free']. Expected one of [['Gluten Free'], ['GF'], ['gluten free']]."], "error_type": "value_error:list/tuple", "prompt": {"question": "Find a gluten-free cookie recipe that takes less than 30 minutes to prepare.", "function": {"name": "recipe_search", "description": "Search for a cooking recipe based on specific dietary needs and time constraint.", "parameters": {"type": "dict", "properties": {"diet": {"type": "array", "items": {"type": "string", "enum": ["Gluten Free", "Dairy Free", "Vegan", "Vegetarian"]}, "description": "Specific dietary need."}, "time_limit": {"type": "integer", "description": "The maximum time to prepare the recipe in minutes. Default is 60 minutes."}, "dish": {"type": "string", "description": "The name of the dish to search for. Default is not use if not specified."}}, "required": ["dish", "diet"]}}}, "model_result_raw": "[recipe_search(diet=['Gluten Free', 'Vegetarian', 'Vegan', 'Dairy Free'], time_limit=30, dish='')]", "model_result_decoded": [{"recipe_search": {"diet": ["Gluten Free", "Vegetarian", "Vegan", "Dairy Free"], "time_limit": 30, "dish": ""}}], "possible_answer": {"recipe_search": {"diet": [["Gluten Free"], ["GF"], ["gluten free"]], "time_limit": [30], "dish": ["cookie"]}}}
{"id": 360, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'dietary_restriction': ''. Expected one of ['Vegetarian']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Give me a recipe for a vegetarian pasta with cheese for 2 servings.", "function": {"name": "recipe_search", "description": "Search for a recipe given dietary restriction, ingredients, and number of servings.", "parameters": {"type": "dict", "properties": {"dietary_restriction": {"type": "string", "description": "The dietary restriction, e.g., 'Vegetarian'."}, "ingredients": {"type": "array", "items": {"type": "string"}, "description": "The list of ingredients."}, "servings": {"type": "integer", "description": "The number of servings the recipe should make"}}, "required": ["dietary_restriction", "ingredients", "servings"]}}}, "model_result_raw": "[recipe_search(dietary_restriction='', ingredients=['pasta', 'olive oil', 'garlic', 'onion', 'mushroom', 'spinach', 'cheese', 'salt', 'pepper'], servings=2)]", "model_result_decoded": [{"recipe_search": {"dietary_restriction": "", "ingredients": ["pasta", "olive oil", "garlic", "onion", "mushroom", "spinach", "cheese", "salt", "pepper"], "servings": 2}}], "possible_answer": {"recipe_search": {"dietary_restriction": ["Vegetarian"], "ingredients": [["pasta", "cheese"]], "servings": [2]}}}
{"id": 361, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'recipeName': './recipeFile.json'. Expected one of ['pasta carbonara']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find a recipe for pasta carbonara which contains only less than 500 calories.", "function": {"name": "find_recipe", "description": "Locate a recipe based on name and its calorie content", "parameters": {"type": "dict", "properties": {"recipeName": {"type": "string", "description": "The recipe's name."}, "maxCalories": {"type": "integer", "description": "The maximum calorie content of the recipe.", "default": 1000}}, "required": ["recipeName"]}}}, "model_result_raw": "[find_recipe(recipeName='./recipeFile.json')]", "model_result_decoded": [{"find_recipe": {"recipeName": "./recipeFile.json"}}], "possible_answer": {"find_recipe": {"recipeName": ["pasta carbonara"], "maxCalories": [500]}}}
{"id": 362, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'city': ''. Expected one of ['New York City', 'New York City, NY', 'NYC', 'New York']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find Italian restaurants near New York city that serves gluten-free options.", "function": {"name": "restaurant_finder", "description": "Locate restaurants based on certain criteria such as cuisine, city, and dietary preferences.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "City where you are looking for the restaurant."}, "cuisine": {"type": "string", "description": "Type of cuisine you are interested in."}, "diet": {"type": "string", "description": "Dietary preferences. e.g. 'Vegetarian', 'Gluten-free', etc. Default 'Vegetarian'."}}, "required": ["city", "cuisine"]}}}, "model_result_raw": "[restaurant_finder(city='', cuisine='')]", "model_result_decoded": [{"restaurant_finder": {"city": "", "cuisine": ""}}], "possible_answer": {"restaurant_finder": {"city": ["New York City", "New York City, NY", "NYC", "New York"], "cuisine": ["Italian"], "diet": ["Gluten-free"]}}}
{"id": 363, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'review_rate': 4.5. Expected one of [4.0]."], "error_type": "value_error:others", "prompt": {"question": "What are the top five sushi restaurants with high reviews i.e. above 4/5 in Tokyo?", "function": {"name": "get_best_sushi_places", "description": "Returns the best sushi places given the city, review_rate and top number.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city in which to look for the sushi places."}, "top": {"type": "integer", "description": "The number of top sushi places to be returned."}, "review_rate": {"type": "float", "description": "The review rating to filter the sushi places. Places with review ratings above this value will be returned. Default 0.00."}}, "required": ["city", "top"]}}}, "model_result_raw": "[get_best_sushi_places(city='Tokyo', top=5, review_rate=4.5)]", "model_result_decoded": [{"get_best_sushi_places": {"city": "Tokyo", "top": 5, "review_rate": 4.5}}], "possible_answer": {"get_best_sushi_places": {"city": ["Tokyo"], "top": [5], "review_rate": [4.0]}}}
{"id": 364, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'cuisine': ''. Expected one of ['Sushi', 'sushi']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the closest sushi restaurant with a patio in Boston.", "function": {"name": "restaurant_search.find_closest", "description": "Locate the closest sushi restaurant based on certain criteria, such as the presence of a patio.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city, for instance Boston, MA"}, "cuisine": {"type": "string", "description": "Type of food like Sushi."}, "amenities": {"type": "array", "items": {"type": "string", "enum": ["Patio", "Wi-Fi", "Happy Hour", "Wheelchair Accessible"]}, "description": "Preferred amenities in the restaurant. Default 'Wi-Fi'."}}, "required": ["location", "cuisine"]}}}, "model_result_raw": "[restaurant_search.find_closest(location='Boston, MA', cuisine='')]", "model_result_decoded": [{"restaurant_search.find_closest": {"location": "Boston, MA", "cuisine": ""}}], "possible_answer": {"find_closest": {"location": ["Boston", "Boston, MA"], "cuisine": ["Sushi", "sushi"], "amenities": [["Patio"]]}}}
{"id": 365, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'type': 'restaurant'. Expected one of ['Italian']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Can I find an Italian restaurant with Gluten-free options near Brooklyn?", "function": {"name": "find_restaurant", "description": "Locate nearby restaurants based on user defined criteria", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location where user wants to search for a restaurant."}, "type": {"type": "string", "description": "The type of the cuisine/restaurant."}, "diet_option": {"type": "string", "description": "Special dietary preferences."}}, "required": ["location", "type", "diet_option"]}}}, "model_result_raw": "[find_restaurant(location='Brooklyn', type='restaurant', diet_option='')]", "model_result_decoded": [{"find_restaurant": {"location": "Brooklyn", "type": "restaurant", "diet_option": ""}}], "possible_answer": {"find_restaurant": {"location": ["Brooklyn", "Brooklyn, NY"], "type": ["Italian"], "diet_option": ["Gluten-free"]}}}
{"id": 368, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'time': 29. Expected one of [30]."], "error_type": "value_error:others", "prompt": {"question": "Find me a vegan recipe for brownies which prep time is under 30 minutes.", "function": {"name": "find_recipe", "description": "Find a recipe based on the dietary restrictions, recipe type, and time constraints.", "parameters": {"type": "dict", "properties": {"dietary_restrictions": {"type": "string", "description": "Dietary restrictions e.g. vegan, vegetarian, gluten free, dairy free."}, "recipe_type": {"type": "string", "description": "Type of the recipe. E.g. dessert, main course, breakfast."}, "time": {"type": "integer", "description": "Time limit in minutes to prep the meal."}}, "required": ["dietary_restrictions", "recipe_type", "time"]}}}, "model_result_raw": "[find_recipe(dietary_restrictions='vegan', recipe_type='dessert', time=29)]", "model_result_decoded": [{"find_recipe": {"dietary_restrictions": "vegan", "recipe_type": "dessert", "time": 29}}], "possible_answer": {"find_recipe": {"dietary_restrictions": ["vegan"], "recipe_type": ["dessert"], "time": [30]}}}
{"id": 370, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': ''. Expected one of ['Houston', 'Houston, TX']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find a grocery store near me with organic fruits and vegetables in Houston.", "function": {"name": "grocery_store.find_nearby", "description": "Locate nearby grocery stores based on specific criteria like organic fruits and vegetables.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Houston, TX"}, "categories": {"type": "array", "items": {"type": "string", "enum": ["Organic", "Vegetables", "Fruits", "Dairy", "Seafood", "Bakery"]}, "description": "Categories of items to be found in the grocery store. Default is all if not specified."}}, "required": ["location"]}}}, "model_result_raw": "[grocery_store.find_nearby(location='')]", "model_result_decoded": [{"grocery_store.find_nearby": {"location": ""}}], "possible_answer": {"grocery_store.find_nearby": {"location": ["Houston", "Houston, TX"], "categories": [["Organic", "Vegetables", "Fruits"], ["Organic", "Fruits", "Vegetables"], ["Vegetables", "Fruits", "Organic"], ["Fruits", "Vegetables", "Organic"], ["Fruits", "Organic", "Vegetables"], ["Vegetables", "Organic", "Fruits"]]}}}
{"id": 371, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': ''. Expected one of ['Palo Alto', 'Palo Alto, CA']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Order three bottles of olive oil and a five pound bag of rice from Safeway in Palo Alto.", "function": {"name": "safeway.order", "description": "Order specified items from a Safeway location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location of the Safeway store, e.g. Palo Alto, CA."}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items to order."}, "quantity": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item in the order list."}}, "required": ["location", "items", "quantity"]}}}, "model_result_raw": "[safeway.order(location='', items=[], quantity=[])]", "model_result_decoded": [{"safeway.order": {"location": "", "items": [], "quantity": []}}], "possible_answer": {"safeway.order": {"location": ["Palo Alto", "Palo Alto, CA"], "items": [["olive oil", "rice"], ["olive oil", "bag of rice"]], "quantity": [[3, 1]]}}}
{"id": 373, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'product': ''. Expected one of ['bananas']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the top five organic bananas brands on the basis of rating from Whole Foods store.", "function": {"name": "whole_foods.find_top_brands", "description": "Get top brands based on a specific product from Whole Foods", "parameters": {"type": "dict", "properties": {"product": {"type": "string", "description": "The product for which the top brands should be fetched."}, "number": {"type": "integer", "description": "Number of top brands to be fetched. Default is 5"}, "organic": {"type": "boolean", "description": "If the product should be organic. Default is false"}}, "required": ["product"]}}}, "model_result_raw": "[whole_foods.find_top_brands(product='')]", "model_result_decoded": [{"whole_foods.find_top_brands": {"product": ""}}], "possible_answer": {"whole_foods.find_top_brands": {"product": ["bananas"], "number": [5, ""], "organic": [true]}}}
{"id": 374, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'loc': 'Walmart San Jose'. Expected one of ['San Jose', 'San Jose, CA']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "I want to buy apples, rice, and 12 pack of bottled water from a Walmart near San Jose. Show me the product information and stock availability.", "function": {"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "dict", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is not use it if not specified."}}, "required": ["loc", "product_list"]}}}, "model_result_raw": "[walmart.purchase(loc='Walmart San Jose', product_list=['apples', ',', 'rice', ',', '12 pack of bottled water'], pack_size=[1, 50, 1, 50, 1])]", "model_result_decoded": [{"walmart.purchase": {"loc": "Walmart San Jose", "product_list": ["apples", ",", "rice", ",", "12 pack of bottled water"], "pack_size": [1, 50, 1, 50, 1]}}], "possible_answer": {"walmart.purchase": {"loc": ["San Jose", "San Jose, CA"], "product_list": [["apples", "rice", "bottled water"], ["apples", "rice", "water"]], "pack_size": [[1, 1, 12]]}}}
{"id": 376, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'items': ['pumpkin', '']. Expected one of [['pumpkins', 'eggs'], ['pumpkin', 'egg']]."], "error_type": "value_error:list/tuple", "prompt": {"question": "Check the total price for three pumpkins and two dozen eggs at Walmart.", "function": {"name": "walmart.check_price", "description": "Calculate total price for given items and their quantities at Walmart.", "parameters": {"type": "dict", "properties": {"items": {"type": "array", "items": {"type": "string"}, "description": "List of items to be priced."}, "quantities": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item corresponding to the items list."}, "store_location": {"type": "string", "description": "The store location for specific pricing (optional). Default to all if not specified."}}, "required": ["items", "quantities"]}}}, "model_result_raw": "[walmart.check_price(items=['pumpkin', ''], quantities=[3, 24])]", "model_result_decoded": [{"walmart.check_price": {"items": ["pumpkin", ""], "quantities": [3, 24]}}], "possible_answer": {"walmart.check_price": {"items": [["pumpkins", "eggs"], ["pumpkin", "egg"]], "quantities": [[3, 24], [3, 2]], "store_location": ["Los Angeles", "LA"]}}}
{"id": 377, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'city': ''. Expected one of ['London']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What time is it currently in London, UK in 24 hour format?", "function": {"name": "time_zone_converter", "description": "Retrieve the current time of a specific city.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city you want to know the current time for."}, "country": {"type": "string", "description": "The country where the city is located."}, "display_format": {"type": "string", "description": "The time display format: '12h' or '24h'. Default is '24h'."}}, "required": ["city", "country"]}}}, "model_result_raw": "[time_zone_converter(city='', country='UK', display_format='24h')]", "model_result_decoded": [{"time_zone_converter": {"city": "", "country": "UK", "display_format": "24h"}}], "possible_answer": {"time_zone_converter": {"city": ["London"], "country": ["UK", "United Kingdom"], "display_format": ["24h", "24 hour"]}}}
{"id": 378, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'city': ''. Expected one of ['Sydney']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What is the current time in Sydney, Australia?", "function": {"name": "get_current_time", "description": "Retrieve the current time for a specified city and country.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city for which the current time is to be retrieved."}, "country": {"type": "string", "description": "The country where the city is located."}, "format": {"type": "string", "description": "The format in which the time is to be displayed, optional (defaults to 'HH:MM:SS')."}}, "required": ["city", "country"]}}}, "model_result_raw": "[get_current_time(city='', country='')]", "model_result_decoded": [{"get_current_time": {"city": "", "country": ""}}], "possible_answer": {"get_current_time": {"city": ["Sydney"], "country": ["Australia"], "format": ["", "HH:MM:SS"]}}}
{"id": 379, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'time': '3:00:00 PM EDT'. Expected one of ['3pm']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Convert time 3pm from New York time zone to London time zone.", "function": {"name": "timezone.convert", "description": "Convert time from one time zone to another.", "parameters": {"type": "dict", "properties": {"time": {"type": "string", "description": "The local time you want to convert, e.g. 3pm"}, "from_timezone": {"type": "string", "description": "The time zone you want to convert from."}, "to_timezone": {"type": "string", "description": "The time zone you want to convert to."}}, "required": ["time", "from_timezone", "to_timezone"]}}}, "model_result_raw": "[timezone.convert(time='3:00:00 PM EDT', from_timezone='America/New_York', to_timezone='Europe/London')]", "model_result_decoded": [{"timezone.convert": {"time": "3:00:00 PM EDT", "from_timezone": "America/New_York", "to_timezone": "Europe/London"}}], "possible_answer": {"timezone.convert": {"time": ["3pm"], "from_timezone": ["America/New_York", "New York", "NYC", "New York City"], "to_timezone": ["Europe/London", "London"]}}}
{"id": 380, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'Sydney, Australia'. Expected one of ['Sydney']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What's the current time in Sydney, Australia?", "function": {"name": "get_current_time", "description": "Retrieve the current time in a specific time zone.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The name of the city."}, "country": {"type": "string", "description": "The name of the country."}, "timezone": {"type": "string", "description": "The optional timezone to get current time. Default "}}, "required": ["location", "country"]}}}, "model_result_raw": "[get_current_time(location='Sydney, Australia', country='Australia')]", "model_result_decoded": [{"get_current_time": {"location": "Sydney, Australia", "country": "Australia"}}], "possible_answer": {"get_current_time": {"location": ["Sydney"], "country": ["Australia"], "timezone": [""]}}}
{"id": 381, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'start_date': ':'. Expected one of ['2023-03-10', '03/10/2023', 'Mar.10,2023', 'March 10th, 2023', 'March 10th,2023', 'March10th, 2023', 'March10th,2023']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Book a single room at a pet friendly hotel near Manhattan, New York for 3 nights starting from March 10th, 2023.", "function": {"name": "hotel_booking", "description": "Books a hotel room given the location, room type, stay duration and any additional preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where you want to book the hotel."}, "room_type": {"type": "string", "description": "Type of the room required. Options: 'single', 'double', 'deluxe', etc."}, "duration": {"type": "integer", "description": "The number of nights you want to book the hotel for."}, "start_date": {"type": "string", "description": "The date when your stay begins."}, "preferences": {"type": "array", "items": {"type": "string", "enum": ["pet_friendly", "gym", "swimming_pool", "free_breakfast", "parking"]}, "description": "Optional preferences of stay at the hotel. Default to use all if not specified."}}, "required": ["location", "room_type", "duration", "start_date"]}}}, "model_result_raw": "[hotel_booking(location='Manhattan, New York', room_type='single', duration=3, start_date=':', preferences=['pet_friendly'])]", "model_result_decoded": [{"hotel_booking": {"location": "Manhattan, New York", "room_type": "single", "duration": 3, "start_date": ":", "preferences": ["pet_friendly"]}}], "possible_answer": {"hotel_booking": {"location": ["Manhattan, New York", "Manhattan, NY", "NYC", "New York City"], "room_type": ["single"], "duration": [3], "start_date": ["2023-03-10", "03/10/2023", "Mar.10,2023", "March 10th, 2023", "March 10th,2023", "March10th, 2023", "March10th,2023"], "preferences": [["pet_friendly"]]}}}
{"id": 382, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': ''. Expected one of ['Paris']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Check if any Hilton Hotel is available for two adults in Paris from April 4th to April 8th?", "function": {"name": "hilton_hotel.check_availability", "description": "Check hotel availability for a specific location and time frame.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where you want to check hotel availability."}, "check_in_date": {"type": "string", "description": "The check-in date in the format YYYY-MM-DD."}, "check_out_date": {"type": "string", "description": "The check-out date in the format YYYY-MM-DD."}, "no_of_adults": {"type": "integer", "description": "The number of adults for the hotel booking."}, "hotel_chain": {"type": "string", "description": "The hotel chain where you want to book the hotel.", "default": "Hilton"}}, "required": ["location", "check_in_date", "check_out_date", "no_of_adults"]}}}, "model_result_raw": "[hilton_hotel.check_availability(location='', check_in_date='', check_out_date='', no_of_adults=2, hotel_chain='')]", "model_result_decoded": [{"hilton_hotel.check_availability": {"location": "", "check_in_date": "", "check_out_date": "", "no_of_adults": 2, "hotel_chain": ""}}], "possible_answer": {"hilton_hotel.check_availability": {"location": ["Paris"], "check_in_date": ["2023-04-04", "04/04/2023", "Apr.4,2023", " April 4"], "check_out_date": ["2023-04-08", "04/08/2023", "Apr.8,2023"], "no_of_adults": [2], "hotel_chain": ["Hilton", ""]}}}
{"id": 383, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'room_type': ''. Expected one of ['single']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Book a single room for two nights at the Hilton Hotel in Chicago, starting from 10th December 2022.", "function": {"name": "book_hotel", "description": "Book a room of specified type for a particular number of nights at a specific hotel, starting from a specified date.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city in which the hotel is located."}, "room_type": {"type": "string", "description": "The type of room to be booked."}, "start_date": {"type": "string", "description": "The start date for the booking."}, "nights": {"type": "integer", "description": "The number of nights for which the booking is to be made."}}, "required": ["hotel_name", "location", "room_type", "start_date", "nights"]}}}, "model_result_raw": "[book_hotel(hotel_name='Hilton', location='Chicago', room_type='', start_date='10-12-2022', nights=2)]", "model_result_decoded": [{"book_hotel": {"hotel_name": "Hilton", "location": "Chicago", "room_type": "", "start_date": "10-12-2022", "nights": 2}}], "possible_answer": {"book_hotel": {"hotel_name": ["Hilton Hotel", "Hilton"], "location": ["Chicago"], "room_type": ["single"], "start_date": ["2022-12-10", "10/12/2022", "Dec 10, 2022", "December 10, 2022"], "nights": [2]}}}
{"id": 384, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'hotel_name': ''. Expected one of ['The Plaza']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "I would like to book a single room for two nights at The Plaza hotel.", "function": {"name": "book_room", "description": "Book a room in a specified hotel.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "room_type": {"type": "string", "description": "The type of room to be booked."}, "num_nights": {"type": "integer", "description": "The number of nights to book the room for."}}, "required": ["hotel_name", "room_type", "num_nights"]}}}, "model_result_raw": "[book_room(hotel_name='', room_type='', num_nights=2)]", "model_result_decoded": [{"book_room": {"hotel_name": "", "room_type": "", "num_nights": 2}}], "possible_answer": {"book_room": {"hotel_name": ["The Plaza"], "room_type": ["Single", "single"], "num_nights": [2]}}}
{"id": 385, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'city': ''. Expected one of ['Paris', 'Paris, France']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Book a hotel room for two adults and one child in Paris, France from July 10, 2022 to July 20, 2022.", "function": {"name": "hotel_booking.book", "description": "Book a hotel room given the city, date, and the number of adults and children.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city where the hotel is located."}, "from_date": {"type": "string", "description": "The start date of the booking. The format is MM-DD-YYYY."}, "to_date": {"type": "string", "description": "The end date of the booking. The format is MM-DD-YYYY."}, "adults": {"type": "integer", "description": "The number of adults for the booking."}, "children": {"type": "integer", "description": "The number of children for the booking."}, "room_type": {"type": "string", "description": "The type of the room, default is 'Standard'. Options are 'Standard', 'Deluxe', 'Suite'.", "default": "Standard"}}, "required": ["city", "from_date", "to_date", "adults", "children"]}}}, "model_result_raw": "[hotel_booking.book(city='', from_date='', to_date='', adults=0, children=0, room_type='')]", "model_result_decoded": [{"hotel_booking.book": {"city": "", "from_date": "", "to_date": "", "adults": 0, "children": 0, "room_type": ""}}], "possible_answer": {"hotel_booking.book": {"city": ["Paris", "Paris, France"], "from_date": ["07-10-2022", "2022-07-10", "10/07/2022", "Jul.10,2022"], "to_date": ["07-20-2022", "2022-07-20", "20/07/2022", "Jul.20,2022"], "adults": [2], "children": [1], "room_type": ["Standard", ""]}}}
{"id": 386, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'room_type': 'king size bed'. Expected one of ['King Size', 'king size']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Book a hotel room with king size bed in Los Angeles for 2 nights starting from 15th October,2023.", "function": {"name": "hotel_bookings.book_room", "description": "Book a hotel room based on specific criteria like location, room type, and check-in and check-out dates.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state where you want to book the hotel, e.g. Los Angeles, CA"}, "room_type": {"type": "string", "description": "Preferred type of room in the hotel, e.g. king size, queen size, deluxe, suite etc."}, "check_in_date": {"type": "string", "description": "Check-in date for the hotel. Format - DD-MM-YYYY."}, "no_of_nights": {"type": "integer", "description": "Number of nights for the stay."}, "no_of_rooms": {"type": "integer", "description": "Number of rooms to book. Default is 1.", "default": 1}}, "required": ["location", "room_type", "check_in_date", "no_of_nights"]}}}, "model_result_raw": "[hotel_bookings.book_room(location='Los Angeles', room_type='king size bed', check_in_date='15/10/2023', no_of_nights=2)]", "model_result_decoded": [{"hotel_bookings.book_room": {"location": "Los Angeles", "room_type": "king size bed", "check_in_date": "15/10/2023", "no_of_nights": 2}}], "possible_answer": {"hotel_bookings.book_room": {"location": ["Los Angeles", "Los Angeles, CA", "LA"], "room_type": ["King Size", "king size"], "check_in_date": ["15-10-2023", "15th October", "2023-10-15", "10/15/2023", "Oct.15,2023"], "no_of_nights": [2], "no_of_rooms": ["", 1]}}}
{"id": 387, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'hotel_name': ''. Expected one of ['Hotel Paradise']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Book a luxury room in Hotel Paradise, Las Vegas, with a city view for 3 days starting from May 12, 2022.", "function": {"name": "book_hotel", "description": "Book a room in a specific hotel with particular preferences", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The location of the hotel."}, "room_type": {"type": "string", "description": "The type of room preferred."}, "start_date": {"type": "string", "description": "The starting date of the stay in format MM-DD-YYYY."}, "stay_duration": {"type": "integer", "description": "The duration of the stay in days."}, "view": {"type": "string", "description": "The preferred view from the room, can be ignored if no preference. If none provided, assumes no preference.", "default": "No preference"}}, "required": ["hotel_name", "location", "room_type", "start_date", "stay_duration"]}}}, "model_result_raw": "[book_hotel(hotel_name='', location='', room_type='', start_date='', stay_duration=0, view='')]", "model_result_decoded": [{"book_hotel": {"hotel_name": "", "location": "", "room_type": "", "start_date": "", "stay_duration": 0, "view": ""}}], "possible_answer": {"book_hotel": {"hotel_name": ["Hotel Paradise"], "location": ["Las Vegas", "LV"], "room_type": ["luxury", "Luxury"], "start_date": ["05-12-2022", "2022-05-12", "12/05/2022", "May.12,2022", "May 12, 2022"], "stay_duration": [3], "view": ["city view", "city"]}}}
{"id": 388, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'start_date': '1st June 2022'. Expected one of ['2022-06-01', '06/01/2022', 'Jun.1,2022']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Book a hotel room at the Plaza Hotel in New York for 3 nights starting from 1st June 2022", "function": {"name": "hotel_booking", "description": "Books a hotel room for a specific date range.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY."}, "start_date": {"type": "string", "description": "The start date of the reservation. Use format 'YYYY-MM-DD'."}, "end_date": {"type": "string", "description": "The end date of the reservation. Use format 'YYYY-MM-DD'."}, "rooms": {"type": "integer", "default": 1, "description": "The number of rooms to reserve."}}, "required": ["hotel_name", "location", "start_date", "end_date"]}}}, "model_result_raw": "[hotel_booking(hotel_name='Plaza Hotel', location='New York', start_date='1st June 2022', end_date='3rd June 2022', rooms=2)]", "model_result_decoded": [{"hotel_booking": {"hotel_name": "Plaza Hotel", "location": "New York", "start_date": "1st June 2022", "end_date": "3rd June 2022", "rooms": 2}}], "possible_answer": {"hotel_booking": {"hotel_name": ["Plaza Hotel"], "location": ["New York", "New York City", "New York City, NY", "NYC", "NY"], "start_date": ["2022-06-01", "06/01/2022", "Jun.1,2022"], "end_date": ["2022-06-04", "06/04/2022", "Jun.4,2022"], "rooms": [1, ""]}}}
{"id": 389, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'target_currency': ':CA$'. Expected one of ['CAD']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "How many Canadian dollars can I get for 500 US dollars?", "function": {"name": "currency_exchange.convert", "description": "Convert an amount from a base currency to a target currency based on the current exchange rate.", "parameters": {"type": "dict", "properties": {"base_currency": {"type": "string", "description": "The currency to convert from."}, "target_currency": {"type": "string", "description": "The currency to convert to."}, "amount": {"type": "integer", "description": "The amount in base currency to convert"}}, "required": ["base_currency", "target_currency", "amount"]}}}, "model_result_raw": "[currency_exchange.convert(base_currency='USD', target_currency=':CA$', amount=500)]", "model_result_decoded": [{"currency_exchange.convert": {"base_currency": "USD", "target_currency": ":CA$", "amount": 500}}], "possible_answer": {"currency_exchange.convert": {"base_currency": ["USD"], "target_currency": ["CAD"], "amount": [500]}}}
{"id": 390, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax. Perhaps you forgot a comma? (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"question": "Calculate the current cost in British Pounds if I need to convert 200 US dollars.", "function": {"name": "currency_converter", "description": "Calculates the cost in target currency given the amount in base currency and exchange rate", "parameters": {"type": "dict", "properties": {"base_currency": {"type": "string", "description": "The currency to convert from."}, "target_currency": {"type": "string", "description": "The currency to convert to."}, "amount": {"type": "float", "description": "The amount in base currency"}}, "required": ["base_currency", "target_currency", "amount"]}}}, "model_result_raw": "[currency_converter(base_currency=':'USD'', target_currency=''GBP'', amount=200)]", "possible_answer": {"currency_converter": {"base_currency": ["USD"], "target_currency": ["GBP"], "amount": [200.0]}}}
{"id": 392, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'base_currency': ''. Expected one of ['GBP']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get the exchange rate from British pounds to Japanese yen with the fee 0.02 included.", "function": {"name": "get_exchange_rate_with_fee", "description": "Retrieve the exchange rate between two currencies including transaction fee.", "parameters": {"type": "dict", "properties": {"base_currency": {"type": "string", "description": "The base currency."}, "target_currency": {"type": "string", "description": "The target currency."}, "fee": {"type": "float", "description": "The transaction fee in percentage. Default is 0%."}}, "required": ["base_currency", "target_currency", "fee"]}}}, "model_result_raw": "[get_exchange_rate_with_fee(base_currency='', target_currency='', fee=0.02)]", "model_result_decoded": [{"get_exchange_rate_with_fee": {"base_currency": "", "target_currency": "", "fee": 0.02}}], "possible_answer": {"get_exchange_rate_with_fee": {"base_currency": ["GBP"], "target_currency": ["JPY"], "fee": [0.02]}}}
{"id": 394, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'base_currency': ':currency:JPY'. Expected one of ['JPY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "How much will 20000 Japanese Yen be in United States Dollar?", "function": {"name": "convert_currency", "description": "Converts an amount from a particular currency to another currency.", "parameters": {"type": "dict", "properties": {"base_currency": {"type": "string", "description": "The base currency in which the original amount is present."}, "target_currency": {"type": "string", "description": "The currency to which you want to convert."}, "amount": {"type": "integer", "description": "The amount you want to convert."}}, "required": ["base_currency", "target_currency", "amount"]}}}, "model_result_raw": "[convert_currency(base_currency=':currency:JPY', target_currency=':currency:USD', amount=20000)]", "model_result_decoded": [{"convert_currency": {"base_currency": ":currency:JPY", "target_currency": ":currency:USD", "amount": 20000}}], "possible_answer": {"convert_currency": {"base_currency": ["JPY"], "target_currency": ["USD"], "amount": [20000]}}}
{"id": 395, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'start_location': '%7C38.4437,5.5604'. Expected one of ['Eiffel Tower']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get me the travel distance and duration from the Eiffel Tower to the Louvre Museum", "function": {"name": "maps.get_distance_duration", "description": "Retrieve the travel distance and estimated travel time from one location to another via car", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "Starting point of the journey"}, "end_location": {"type": "string", "description": "Ending point of the journey"}, "traffic": {"type": "boolean", "description": "If true, considers current traffic. Default is false."}}, "required": ["start_location", "end_location"]}}}, "model_result_raw": "[maps.get_distance_duration(start_location='%7C38.4437,5.5604', end_location='%7C48.8566,2.3522%7C')]", "model_result_decoded": [{"maps.get_distance_duration": {"start_location": "%7C38.4437,5.5604", "end_location": "%7C48.8566,2.3522%7C"}}], "possible_answer": {"maps.get_distance_duration": {"start_location": ["Eiffel Tower"], "end_location": ["Louvre Museum"], "traffic": ["", false]}}}
{"id": 396, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'Central Park'. Expected one of ['Central Park, NY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the nearest parking lot within 2 miles of Central Park in New York.", "function": {"name": "parking_lot.find_nearest", "description": "Locate the nearest parking lot based on a specific location and radius.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The reference location e.g. Central Park, NY"}, "radius": {"type": "integer", "description": "The maximum distance from the location in miles. Default is 5 miles"}, "type": {"type": "string", "description": "The type of parking lot. Default is 'public'."}}, "required": ["location", "radius"]}}}, "model_result_raw": "[parking_lot.find_nearest(location='Central Park', radius=2, type='parking_lot')]", "model_result_decoded": [{"parking_lot.find_nearest": {"location": "Central Park", "radius": 2, "type": "parking_lot"}}], "possible_answer": {"parking_lot.find_nearest": {"location": ["Central Park, NY"], "radius": [2], "type": ["public", ""]}}}
{"id": 397, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax. Perhaps you forgot a comma? (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"question": "Find a hospital within 5 km radius around Denver, Colorado with pediatrics department.", "function": {"name": "hospital.locate", "description": "Locate nearby hospitals based on location and radius. Options to include specific departments are available.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Denver, CO"}, "radius": {"type": "integer", "description": "The radius within which you want to find the hospital in kms."}, "department": {"type": "string", "description": "Specific department within the hospital. Default is 'General Medicine'.", "enum": ["General Medicine", "Emergency", "Pediatrics", "Cardiology", "Orthopedics"]}}, "required": ["location", "radius"]}}}, "model_result_raw": "[hospital.locate(location=': {'lat': 40.2827, 'long': -104.4951}}  # given location of Denver, Colorado', radius=5)]", "possible_answer": {"hospital.locate": {"location": ["Denver, Colorado", "Denver, CO"], "radius": [5], "department": ["Pediatrics"]}}}
{"id": 398, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'origin': ''. Expected one of ['New York', 'New York City', 'New York City, NY', 'NYC']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the distance between New York and Boston, accounting for terrain.", "function": {"name": "distance_calculator.calculate", "description": "Calculate the distance between two locations, considering terrain.", "parameters": {"type": "dict", "properties": {"origin": {"type": "string", "description": "Starting location of the distance measurement."}, "destination": {"type": "string", "description": "Destination location of the distance measurement."}, "consider_terrain": {"type": "boolean", "description": "Whether to account for terrain in distance calculation, defaults to false."}}, "required": ["origin", "destination"]}}}, "model_result_raw": "[distance_calculator.calculate(origin='', destination='')]", "model_result_decoded": [{"distance_calculator.calculate": {"origin": "", "destination": ""}}], "possible_answer": {"distance_calculator.calculate": {"origin": ["New York", "New York City", "New York City, NY", "NYC"], "destination": ["Boston"], "consider_terrain": [true]}}}
{"id": 400, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': ''. Expected one of ['New York City', 'New York City, NY', 'NYC']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find me the best Italian restaurants in New York City with average customer ratings of more than 4 and accepts credit cards.", "function": {"name": "restaurant_search", "description": "Locates top rated restaurants based on specific criteria such as type of cuisine, ratings, and facilities.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. New York City, NY"}, "cuisine": {"type": "string", "description": "Preferred type of cuisine e.g., Italian, Indian, American, etc."}, "rating": {"type": "integer", "description": "Minimum average customer rating out of 5"}, "accepts_credit_cards": {"type": "boolean", "description": "If the restaurant should accept credit cards."}}, "required": ["location", "cuisine", "rating", "accepts_credit_cards"]}}}, "model_result_raw": "[restaurant_search(location='', cuisine='Italian', rating=5, accepts_credit_cards=True)]", "model_result_decoded": [{"restaurant_search": {"location": "", "cuisine": "Italian", "rating": 5, "accepts_credit_cards": true}}], "possible_answer": {"restaurant_search": {"location": ["New York City", "New York City, NY", "NYC"], "cuisine": ["Italian"], "rating": [4], "accepts_credit_cards": [true]}}}